[{"title":"Home","content":"Welcome to the Datapack Wiki!\n\nWelcome to the Datapack Wiki, a resource for everything related to Minecraft\nDatapacks. This community-built wiki has got guides, tutorials, and\ndocumentation to help you create and modify Minecraft Datapacks.\n\nNew to Minecraft Datapacks?\n\nDon't worry! You're in the right place. We've got a guide on\nhow to make a datapack for those of you with no or\nlittle experience. If you get stuck, don't hesitate to ask in our Discord\nServer. Pages on this wiki have been written with beginners in mind - you should\nhave no trouble working through these resources.\n\nWhat are Minecraft Datapacks?\n\nMinecraft Datapacks are like addons - they are a Minecraft feature that lets you\ncustomize Minecraft worlds without mods. They allow you to modify and enhance\nthe game by adding new features and mechanics by using Minecraft commands,\nadvancements, worldgen, and more!\n\nWith datapacks, you can:\n\nAdd and modify custom recipes\nModify existing or create new loot tables\nAdd new advancements and enchantments\nCreate unique structures\nAnd much more!\n\nContribute\n\nThis project wouldn't be possible without the support of community members. We\nencourage you to contribute to this wiki if you want to write any pages, correct\nany mistakes, or share any of your knowledge!\n\nYou can hit the Edit button on any page to open the GitHub page for the\ncurrent wiki page. All our contributions are done via GitHub and are written in\nMarkdown. For more information, find the Contribution section of this page, or\nread our contribution guide on our\nGitHub repo.","description":"Welcome to the Datapack Wiki, a resource for everything related to Minecraft Datapacks. We've got guides, tutorials, and documentation to help you build your knowledge about data packs.","url":"/","tags":[]},{"title":"Credits","content":"Credits\n\nThe Datapack Wiki is managed by Datapack Hub, based\non an original design and idea by Aandeel. All of the\ncontent on this wiki is made possible thanks to the dedication of our awesome\ncontributors! You can contribute to this wiki on our GitHub - click the Edit\nbutton on any page.\n\nAdministrators\n\nThese people run and develop the site, making any and all important decisions.\n\nSilabear\nCobblestone\nAandeel\n\nEditors\n\nThese people are in charge of what contributions are added to the site, as well\nas planning and writing new pages.\n\nGears\n\nContributors\n\nThese people have written or edited pages for the wiki or guides.\n\nDiamond\nHeDeAn\nSuperAnt\\_\nSwitchedCube\nKraggle09\nAmandin\n\n\n\nIf you're contributing, feel free to add your username to this page! You can\ncontribute by clicking the Edit button on any page.\n\n","description":"The Datapack Wiki is brought to you by [Datapack Hub](https://datapackhub.net) in collaboration with Aandeel.","url":"/credits/","tags":[]},{"title":"Right Click Detection Summary","content":"Right Click Detection\n\nThere a few ways we can detect right clicks in a Minecraft datapack, depending\non your situation. Here are the methods we can use:\n\nUsing a Carrot on a stick\n\nThis method is the \"traditional\" right click detection method. We can use a\nscoreboard to detect when a player right clicks a carrot on a stick item.\n\nThis is the most straightforward method for simple right click detection, but it\nhas certain drawbacks - including making pigs follow the player.\n\nUsing an item with the consumable component\n\nWith the item changes added in 1.20.5, we can now detect right clicks on any\nitem using the consumable component. This method is much more versatile.\nHowever, this method triggers once per tick, not just once per right click.\n\nUsing an Eye of Ender\n\nThis method is a bit more niche, as it only works in worlds without strongholds.\nThis method also triggers once per tick, not just once per right click.\n\nClicking an Interaction Entity\n\nThis method detects when the player right clicks on an interaction entity.\nUnlike the other methods, which all detect right clicks while holding specific\nitems, this method lets you detect when a player right clicks on a specific area\nof the world.","description":"This section goes over the various ways of detecting right clicks with a Minecraft datapack.","url":"/guide/right-click/","tags":[]},{"title":"Using an Interaction Entity for RC detection","content":"Interaction Right (and left) Click Detection\n\nAn interaction entity can detect clicks in a specific area, instead of on an\nitem. Interaction entities can detect both right and left clicks (although this\nguide will go over right clicks specifically). There are two methods to detect\nright clicks using interaction entities, depending on what you want to do\nafterwards.\n\nMethod 1: Detect when a player right clicks an interaction entity\n\nThis method works best when you want to do something to the player when they\nright click the interaction entity.\n\nTo detect when the interaction entity has been interacted with, you must create\na player_interacted_with_entity advancement, and specify the entity data you\nwant to trigger the advancement. Then, you can specify a reward function which\nwill be run when the advancement is triggered.\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:player_interacted_with_entity\",\n\"conditions\": {\n\"entity\": {\n\"type\": \"minecraft:interaction\",\n\"nbt\": \"{Tags:[\\\\\"my_interaction\\\\\"]}\"\n}\n}\n}\n},\n\"rewards\": {\n\"function\": \":rightclick_run\"\n}\n}\n\nIn the function (in this case, you will need to create it:\n/data/ /functions/rightclick_run.mcfunction), you can put commands\nthat you want to run when the interaction entity is right clicked. Make sure\nthat this function also revokes the advancement so that it can be triggered\nagain next tick.\n\nRevoke the advancement so we can detect the click again\nadvancement revoke @s only namespace:interacted_with_interaction\n\nCustom logic\nsay I clicked the interaction entity!\n\nNow you can summon the interaction entity by doing\n/summon interaction~ {Tags:[\"my_interaction\"]} - you may want to enable\nhitboxes with F3 + B in order to see the hitbox of the interaction entity (it\nis invisible without it).\n\nMethod 2: Detect when an interaction entity is right clicked\n\nThis method works best when you want to do something to the interaction when it\nis right clicked, ignoring which player did it.\n\nThe interaction entity will have an interaction NBT tag when it has been right\nclicked by a player. You can use a tick function to detect this easily using\nexecute if entity, and run a function as the interaction entity when it has\nbeen triggered:\n\nexecute as @e[type=interaction,tag=my_interaction] if data entity @s interaction run function :rightclick_run\n\nIn the rightclick_run function, you will need to remove the interaction NBT\nfrom the entity so that it resets, and then you can add custom logic:\n\nRemove the interaction tag so it can be used again\ndata remove entity @s interaction\n\nCustom logic\nsay I was right clicked!\n\n\n\nIf you want to detect left clicks instead, then instead of checking and removing\nthe interaction NBT, use the attack NBT.\n\n","description":"Interaction entities can be used to detect when a player rightclicks or leftclicks in a specific area of the world.","url":"/guide/right-click/interaction/","tags":[]},{"title":"Using COAS/WFOAS for RC detection","content":"Carrot on a Stick Right Click Detection\n\nUsing a carrot on a stick (or a warped fungus on a stick) is perhaps one of the\nsimplest methods of right-click detection, requiring only a single tick command\nand a scoreboard. This method works due to the used:carrot_on_a_stick\nstatistic detecting right clicks on any carrot_on_a_stick item.\n\n\n\nFor the sake of simplicity, we will use a carrot on a stick, **shortened to\nCOAS**. This method also works with warped fungus on a stick (WFOAS) items.\n\n\n\nCOAS and WFOAS items have a unique property that means that right clicking the\nitem counts as \"using\" an item, and will therefore increase the\nused:carrot_on_a_stick statistic. We can track changes to this statistic using\na scoreboard. When it goes up, we know that the player has right clicked a COAS,\nand we can run a command when that happens.\n\nMethod\n\nTo get started, we need to create a scoreboard with the criteria\nminecraft.used:minecraft.carrot_on_a_stick, so that we can later detect when a\nplayer uses the COAS (by right clicking on it).\n\nIf you don't already have it, you'll need to create a load function with a\ncommand that creates a new scoreboard objective. You can name the objective\nwhatever you want. We recommend naming it something like .rc_coas.\nIn your load function, put a scoreboard command such as this:\n\nscoreboard objectives add.rc_coas minecraft.used:minecraft.carrot_on_a_stick\n\nThis scoreboard will go up by 1 every time a player right clicks a COAS -\nwhen this happens we can execute our function. Note that this command must run\nevery tick, otherwise it won't be able to detect right clicking. Put this in\nyour tick/loop function:\n\nThis will run the \"rc_run\" function as the player who uses the COAS.\nexecute as @a[scores={.rc_coas=1..}] run function :rc_run\nscoreboard players reset @a[scores={.rc_coas=1..}].rc_coas\n\nIn the rc_run.mcfunction file, you can do whatever you like as a result of\nright clicking the COAS. As an example, putting this in rc_run.mcfunction will\nmake the player say Used COAS when they right click a COAS item.\n\nsay Used COAS\n\nDetecting specific items\n\nThe above method will detect when any carrot on a stick item is right clicked,\nwhich by itself isn't useful. Instead, we want to detect when a specific carrot\non a stick item is clicked.\n\nWe can give our carrot on a stick item a special custom_data component which\nis unique to our custom item. The custom_data component can support any NBT\ndata, but the simplest value would be {item:\"my_custom_item\"}:\n\nGive the player the custom item\ngive @s carrot_on_a_stick[custom_data={item:\"my_custom_item\"}]\n\nThen, we can just add an extra check to our execute command in\ntick.mcfunction to only run the function when the player is holding our custom\nitem:\n\nReplace the previous execute command in tick.mcfunction with this:\nexecute as @a[scores={.rc_coas=1..}] if items entity @s weapon.mainhand carrot_on_a_stick[custom_data~{item:\"my_custom_item\"}] run function :rc_run\nIf you want more than one custom item, simply copy the above command, and just change \"my_custom_item\"","description":"Using a carrot on a stick for right click detection is an easy way to detect right clicks with a datapack.","url":"/guide/right-click/coas/","tags":[]},{"title":"Using an Eye of Ender for RC detection","content":"Eye of Ender Right Click Detection\n\n\n\nThis only works in world without strongholds, if you don't want that, you can\neither use a similiar method that works everywhere (using the Food Component\nmethod) or do some chnages to these functions, as specified at the end of this\nguide.\n\n\n\nEye of ender items can be used to detect right clicks in Minecraft. Similarly to\nthe Carrot on a Stick method, we can detect when an eye of ender item is being\nused by the player as a result of right clicking it.\n\nUnlike the Carrot on a Stick method, this method will be trigger every tick that\nright click is being held, instead of just once when right click is pressed.\n\nMethod\n\nTo detect when an eye of ender is being used, you must create a using_item\nadvancement, and specify the item data you want to trigger the advancement.\nThen, you can specify a reward function which will be run when the advancement\nis triggered.\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:using_item\",\n\"conditions\": {\n\"item\": {\n\"items\": [\n\"minecraft:ender_eye\"\n],\n\"predicates\": {\n\"minecraft:custom_data\": {\"custom_id\": \"your_custom_item_id\"}\n}\n}\n}\n}\n},\n\"rewards\": {\n\"function\": \":rightclick_run\"\n}\n}\n\nIn the function (in this case,\n/data/ /functions/rightclick_run.mcfunction), you can put commands\nthat you want to run when the item is clicked. Make sure that this function also\nrevokes the advancement so that it can be triggered again next tick.\n\nRevoke the advancement from the player so it can be used again\nadvancement revoke @s only :used_eye_of_ender\n\nCustom logic\nsay I successfully used EoE detection!\n\nIf you want this method to work in worlds with strongholds, you can either block\nthe target of ender eyes in the pack.mcmeta or killing the eye and giving it\nback after it being used.","description":"An intresting right click detection method for sure, due to the fact that it can only be used in worlds without strongholds!","url":"/guide/right-click/eoe/","tags":[]},{"title":"Using the Consumable component for RC detection","content":"Consumable Component Right Click Detection\n\nThe minecraft:consumable component can be a helpful indicator of when an item\nis right clicked by the player in a Minecraft datapack. We can detect usage of\nan item with the consumable and food components with an advancement which\ncan trigger a function. This method can be used on almost any type of item.\n\n\n\nThis method will work for any type of item. However, if the item type already\nhas a default rightclick functionality (such as placing a block), it will keep\nthat functionality. This method is best used for items that don't have a default\nrightclick functionality.\n\n\n\nMethod\n\nTo detect when the item is being used (in this case, being right clicked), you\nmust create a using_item advancement, and specify the item data you want to\ntrigger the advancement. Then, you can specify a reward function which will be\nrun when the advancement is triggered.\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:using_item\",\n\"conditions\": {\n\"item\": {\n\"items\": [\n\"minecraft:\"\n],\n\"predicates\": {\n\"minecraft:custom_data\": {\"custom_id\": \"your_custom_item_id\"}\n}\n}\n}\n}\n},\n\"rewards\": {\n\"function\": \":rightclick_run\"\n}\n}\n\nIn the function (in this case,\n/data/ /functions/rightclick_run.mcfunction), you can put commands\nthat you want to run when the item is clicked. Make sure that this function also\nrevokes the advancement so that it can be triggered again next tick.\n\nRevoke the advancement from the player so it can be used again\nadvancement revoke @s only :click\n\nCustom logic\nsay I right clicked the item!\n\nAfter /reloading the datapack, we will now need to give the player the item\nwith the custom food and data components.\n\ngive @p [consumable={consume_seconds:999999999,animation:\"none\"},food={nutrition:0,saturation:0,can_always_eat:true},custom_data={custom_id:\"your_custom_item_id\"}] 1\n\nNow, when you right click this item, it should send a message to the chat saying\nI right clicked the item!.","description":"Using the minecraft:consumable component to detect when the user right clicks an item in a datapack.","url":"/guide/right-click/consumable_component/","tags":[]},{"title":"MCFunction vs Coding","content":"Mods vs Datapacks\n\nMods and datapacks are two commonly confused topics in Minecraft, and knowing\nthe difference between them could help you decide which better fits your use\ncase. While both mods and datapacks extend Minecraft's capabilities, mods\ngenerally offer more control and customization, while datapacks are more\nintegrated with the base game and rely on the server environment.\n\nWhat is a mod?\n\nSimply put, mods are modifications to the base game, which includes Java code mods,\ndatapacks, resource packs and Bukkit plugins. In this guide, we will only address two of these topics, Java code mods\nand datapacks. For the remainder of this guide, when you read mod, we will be referring to Java code mods.\n\nDatapacks\n\nDatapacks are extensions to vanilla features and are officially supported by\nMojang Studios. Datapacks are becoming increasingly powerful with the advent of\nnew data-driven features, commands and technical additions such as interactions\nor block displays. For these reasons, datapacks make an excellent addition for a\nvanilla server or even some modded servers, who don't want to worry about\nincompatibilities or dealing with broken plugins/mods.\n\nDatapacks can be used to define custom world generation, advancements, enchantments, loot\ntables, recipes and many contain command functions; small scripts which run Minecraft commands (with some small caveats). Datapacks use these functions to create unique mod-like features or add interactivity in maps. Many impressive datapacks can be so well made they are confused for mods, which is\nwhere some of the confusion between them and mods stem from.\n\nDue to how they work, datapacks can be more limited compared to mods. New\nfeatures have to be added by Mojang themselves before they can be used in\ndatapacks and many custom features such as custom entities and custom blocks\nhave yet to be implemented. In addition to this, anything that requires the\nMinecraft client such as rendering changes or key input is not possible, as\ndatapacks are installed on the server/world.\n\nMod\n\nMods are unofficial changes to the game's code using Java and in most cases a\nmod loader such as Fabric, Forge, NeoForge, etc. **Mods are not supported by\nMojang Studios.** Mods allow you to do anything you want with the game on both\nthe client and the server. They give you full control of everything in the game\nfrom game rendering, to blocks, to key input, to even networking. They allow for\nmuch more complex interactions with some minor caveats.\n\n\n\nDo not install mods from suspicious sources, as they have near full access to\nanything on your computer including sensitive files.\n\nAlways download from a reputable distributor such as\nModrinth or\nCurseForge!\n\n\n\n\n\nMods can include data and asset files alongside code. This includes shipping\nmodel/texture files in the resource pack format, recipe files in the datapack\nformat, and more.\n\nIn some cases, mods can simply be datapacks in a specially formatted JAR file!\n\n\n\nMods that add blocks or unique interactions can only be used on servers if\neveryone on the server uses the required mods, which can be hard to manage\nespecially with larger packs. Mods can also be harder to debug and troubleshoot,\nespecially if they utilize parts of Minecraft's obfuscated code. A strength of\ndatapacks is that anyone can join a server that uses them since they are fully\nvanilla.\n\nSummary of Differences\n\nAs you may have read, datapacks and mods are very different and can be used for\nvery different use cases. Below we've summarized some of the important points\ninto a handy-dandy list!\n\n| Mods| Datapacks|\n| ------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------- |\n| Allow for full control over all of Minecraft's code| Modify the base systems of the game|\n| Can contain datapacks in the form of data folders| May contain command functions along with system modifications such as recipes or world generation|\n| Full control over everything in game/server and out of game (could be a security risk)| Limited to server-side changes of game mechanics, malicious datapacks are much safer than malicious mods |\n| Generally faster and can improve game and server performance due to high level of control| Generally slower but more lightweight and less resource hungry|\n| Ideal for modifying the game in ways datapacks cannot (e.g custom blocks, new mobs) or adding new mechanics/systems | Ideal for small mods that modify existing systems, \"vanilla\" looking mods and map making|\n| Server owners must verify mod compatibility between clients| Any client can use datapacks, making them easy to manage|\n| May require some knowledge of Java to use and debug effectively| In most cases, easier to debug|\n\nIf you would like to learn\nhow to install datapacks, see our guide!","description":"Learn the differences between using MCFunctions and traditional coding.","url":"/guide/datapacks-for-mods/mods-vs-datapacks/","tags":[]},{"title":"How to Make a Minecraft Datapack - Beginner's Guide","content":"How to make a Minecraft Datapack\n\nDatapacks are a Minecraft feature that lets you customize Minecraft worlds\nwithout mods. They allow you to modify and enhance the game by adding new\nfeatures and mechanics by using Minecraft commands, advancements, worldgen, and\nmore! This guide will walk you through the process of creating your first\nMinecraft datapack from scratch in the latest version.\n\n\n\nIf you don't know what datapacks are, then take this explanation. Datapacks are\nessentially add-ons to Minecraft which can change the game, whether by adding a\nsimple game mechanic, or creating completely new experiences! The best part is\nthat they're really easy to create, even if you have little coding knowledge\n\n\n\nThis guide will help you to create your first datapack, whether you've never\ntried coding before or if you've got loads of experience. The process of coding\na datapack is a bit different to other typical programs. By the end of this\ntutorial, you'll have made a simple datapack which makes **arrows explode when\nthey land!**\n\nPrerequisites\n\nMinecraft Datapacks basically just consist of text files inside folders. For\nthis reason, you can technically make a datapack with just the default text\neditor and a file explorer. However, if you are able to, we highly suggest\ndownloading a code editor such as Visual Studio Code.\n\nWith VS Code, you will be able to view errors in your datapack, autocomplete\ncommands, and highlight syntax with different colours so that making datapacks\nisn't as painful as using Notepad.\n\nDownload Visual Studio Code: https://code.visualstudio.com/download\nGet the VS Code extensions for datapack development:\nhttps://marketplace.visualstudio.com/items?itemName=amandin.dpc-pack\n\n\n\nIf you prefer not to download programs, then you can use a web version of Visual\nStudio Code which essentially has all the same features, except it can be slower\nor more difficult to work with. https://vscode.dev/\n\n\n\nSetting up an empty datapack\n\nThe first step when creating a datapack is to make a new world to test it\nin. Go ahead and do that now - make sure that your world has cheats enabled\nand it is set to creative mode. Once you've created the world, the next step\nis to find and open your world folder:\n\nSave and quit your world\nGo to your world in the Singleplayer menu and hit \"Edit\"\nPress \"Open World Folder\"\n\nThe folder that opens contains all the data in your Minecraft world. You should\nsee that there's lots of other subfolders in this folder. Find the one which is\ncalled datapacks, and open it. This folder is where the world's datapacks are\nstored. Create a folder - this will be the root folder of your datapack project.\nThe name doesn't matter. I'm just going to call it Example Datapack. **Open\nthis new folder**. Inside this folder is where all the data starts from.\n\n\n\nIf you are using Visual Studio Code, at this point you should open it, find\nOpen Folder, and open the newly created folder. Navigating through your\ndatapack will be so much easier!\nopen folder location\n\n\n\nThe first file we want to create is the pack.mcmeta file. This file will tell\nMinecraft that the folder is a datapack, as well as holding the basic\ninformation of the pack. Create pack.mcmeta, and put this inside it:\n\n{\n\"pack\": {\n\"description\": \"DATAPACK NAME HERE\",\n\"pack_format\": 81\n}\n}\n\nIf you're interested, here's what this file means:\n\npack is an object containing the metadata of the file.\ndescription is the name of your datapack, usually along with a short\ndescription of what your pack does.\npack_format tells Minecraft what versions this datapack works in. 81 is\nthe latest for 1.21.8\n\nWriting your first function\n\n\n\nWhat are functions? In short, functions are the majority of what makes up most\ndatapacks. A function is a file containing Minecraft commands. When a function\nis ran, every command in the function is ran in order. Functions are always ran\nas an entity (or as the Server) and at a position\n\n\n\nLet's get started by writing one simple function. In traditional programming\nfashion, let's make a function which sends \"Hello World\" to chat.\n\nCreate a folder in your datapack called data.\nIn the data folder, create a new folder. This folder is your\nnamespace - it will contain all the data specific to your datapack.\nUsually this needs to have a unique name (one which other people would\nnot have picked), but for this tutorial just call it example.\nIn the example folder, create a folder called function. This folder will\ncontain all the mcfunction files.\n\nYou should now have a folder structure that looks something like this:\n\n/world/datapacks/Example Datapack/data/example/function\n\n\n\nIn versions earlier than 1.21, the function folder should be called functions,\ndue to some pesky name changes Mojang introduced in a recent update.\n\n\n\nOnce you're sure that's correct, you can start writing the actual function.\n\nIn the function folder, create an empty file called hello_world.mcfunction.\nOpen this file with any text editor (we recommend Visual Studio Code)\n\nInside hello_world.mcfunction, put the following:\n\nShow the player Hello World on their screen\ntitle @s title \"Hello World!\"\n\nGive the player a diamond\ngive @s diamond\n\nIt's that simple! Once you save that file, rejoin your world and then\nrun /reload, you should be able to use the following command to run the\nfunction:\n\n/function example:hello_world\n\nWhat's next?\n\nNow you know how to create a basic function and run it, we'll next start to\nthink about how to create our project. For more advanced projects, this can\nsometimes be the most difficult part. Luckily for us, what we want to create\nwon't be too difficult.\n\nLet's break down the idea into smaller steps. Remember, we want to create a\ndatapack which makes arrows explode.\n\nDetect when an arrow lands on the ground. We can do this by running a\ncommand on a loop which will select any arrow on the ground and then run a\nfunction.\nCreate an explosion. This is as simple as summoning a TNT at the position\nof the arrow.\nRemove the arrow. If you don't do this, then it will keep on exploding\nforever.\n\nThe next steps of this guide will guide you through the typical process of each\nof those steps.\n\nRunning functions on a loop\n\nThe first step on our list is to detect arrows which land on the ground. To do\nthis, we need to run a command on a loop. Luckily, Minecraft makes this pretty\neasy for us.\n\nFirstly, let's make the function which you want to run on a loop. In the\nfunction folder, create a new mcfunction file - call this one\nloop.mcfunction.\n\nFor now, let's just make it say \"Hi\" every time it loops. You can do this by\nputting this in the new function:\n\nsay Hi\n\nTo make this function run on a loop, we need to create a JSON file which tells\nMinecraft \"run this command every tick\" (every tick = 20 times per second)\n\nIn the data folder, create the minecraft folder.\nIn the minecraft folder, create a tags folder\nIn the tags folder, create a function folder\nIn the new function folder, create a new file: tick.json\n\ntick.json is NOT a function. In tick.json, we are going to put a **list\nof functions** which we want to run every tick. If you put any commands in\ntick.json, it will break your pack.\n\nIn tick.json, put the following:\n\n{\n\"values\": \"example:loop\"]\n}\n\nvalues is a list of function references which will be run on a loop.\nexample:loop is a reference to the loop.mcfunction file we created\nearlier. example refers to the namespace (the folder in data), and loop\nrefers to the mcfunction file name.\n\nIf you save this file, go back to your world, and run /reload, you should see\nthat the chat is being spammed with \"Hi\" over and over again!\n\nSelecting the arrows\n\nNow we've created a function which will run infinitely on a loop, we can move on\nto detecting when an arrow is in the ground.\n\nAs far as the game is concerned, an arrow is an entity, just like a pig, cow\nor zombie. Minecraft gives us a special way to select any types of entities\nwith [target selectors. Once we've selected an\nentity, we can use the /execute command to run a\ncommand as the entity.\n\nWe can use these to select all arrows which are in the ground, and then run a\ncommand to make them explode (and then remove themselves).\n\nAs mentioned, to select an entity, we need to use a target selectors. I'm going\nto teach you a bit about target selectors. You should pay attention here, but if\nyou only want the code, scroll past this section.\n\nWhat are target selectors?\n\nTarget selectors are a special bit of code we can use to find an entity in the\nworld. They all start with an @ symbol. There are 6 base target selectors:\n\n| Target Selector | Description|\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| @e| All Entities - By itself, this selector will select every single entity which is currently loaded in the world|\n| @s| This Entity - This selector will select the entity which is currently running the command. For example, if I run a command as @s, then it will run the commands as me. |\n| @a| All Players - This selects all currently online players. (All players are always loaded in the world).|\n| @r| Random Player - This selects one random player.|\n| @p| Nearest Player - This selects the nearest player to the position this command is ran from.|\n| @n| Nearest Entity - This selects the nearest entity (player or non-player) to the position this command is ran from.|\n\nOn it's own, a base target selector (like in the table) does not do much. We can\nnarrow down the selection even more by using criteria. Criteria are put in\nsquare brackets after the base selector.\n\nFor example, we can use @e with a type criteria to select all entities of a\ncertain type - for example, @etype=minecraft:cow] would select all cow\nentities.\n\nI'm not going to explain every single criteria you can use - you can view a list\n[here. These are the\nbasic ones which you might see quite often:\n\n| Criteria| Description|\n| ------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [type=minecraft:arrow] | Entity Type - This criteria will narrow down the selection to only include entities of a certain type. For good pack optimisation, you should use this often.|\n| [distance=..5]| Distance to entity - This criteria will only include entities based on their distance to their distance to the current position. .. can be used to represent a greater/less than symbol - for example, ..5 means less than 5 blocks away.|\n| [limit=2]| Limit selection - Using the limit criteria, you can make specify a max amount of entities to be selected. This is often used in conjunction with the sort criteria. For example, @e[sort=nearest,limit=1] would select the nearest entity of any type. |\n| [nbt={key:value}]| Entity Data - This criteria will select entities if their NBT (entity data) matches a pattern.|\n\nHow are we going to use them?\n\nWe can use these selectors to only select arrows which are in the ground. We can\nselect all arrows with @e[type=arrow], but this will also include arrows in\nthe air. To select arrows in the ground, we can check if they have the data\n{inGround:1b}, so we would use @e[type=arrow,nbt={inGround:1b}]\n\nThis target selector can be used in an execute command to run a command as the\nentity. Try putting this in your loop.mcfunction:\n\nexecute as @e[type=arrow,nbt={inGround:1b}] at @s run say I'm an arrow, I'm in the ground!\n\nReload your datapack and fire an arrow at at a block. You should see that your\nchat is spammed with messages, meaning that we successfully selected arrows in\nthe ground, and executed a command as them!\n\nMake it go boom\n\nNow we can move onto the fun part! We have a simple command which will run\nanother command as any arrow in the ground. We only need to do two things with\nthis command:\n\nSpawn an explosion at the position of the arrow\nKill the arrow so that it only explodes once\n\nTo create an explosion in Minecraft, we can simply summon a TNT entity. When a\nTNT entity is summoned, it will explode instantly.\n\nexecute as @e[type=arrow,nbt={inGround:1b}] at @s run summon tnt\n\nThen, we just need to copy this command and make it kill the arrow after the\nexplosion has happened. This is as simple as it sounds - we can use /kill to\nremove the arrow. Your finished loop.mcfunction should look like this:\n\nexecute as @e[type=arrow,nbt={inGround:1b}] at @s run summon tnt\nkill @e[type=arrow,nbt={inGround:1b}]\n\n\n\nIn reality, this method isn't the best one to use. Instead of having two\ncommands for this, you can just execute a function as the arrow which will\nsummon the TNT at @s's position, and then kill @s. By only using the @e selector\nonce and then referring to @s, you remove extra stress from the computer. For\nnow, it doesn't matter - this guide is designed to give you a better idea of the\nlogic rather than the little details.\n\n\n\nYou're done! Once you /reload your pack, you should be free to play around\nwith a simple exploding arrows datapack which you made with the help of this\ntutorial. Take a break to play around with it - you deserve one!\n\nAnd when you want to move on to other datapack ideas you might have, feel free\nto join our Discord server for extra support from our team of helpers. We're\nmore than happy to help you on your journey to creating awesome Minecraft\ndatapacks!","description":"Learn how to create a Minecraft datapack with our beginner's guide. This step-by-step tutorial will help you understand the basics of datapack creation, even if you have little coding knowledge. Start enhancing your Minecraft experience today!","url":"/guide/getting-started/","tags":["guide","beginner","Minecraft","datapack","tutorial","step-by-step"]},{"title":"Array Iteration","content":"Array Iteration\n\nArray Iteration allows us to loop through an array and do something with each\nitem individually (for example, add every item in an array, output each array\nitem individually, modify all elements in an array, combine strings in an array,\netc.)\n\nMethod\n\nFor this guide, imagine our array is defined with the following:\n\ndata modify storage minecraft:example ExampleArray set value [\"Array Item 1\", \"Array Item 2\", \"Array Item 3\"]\n\nThe steps to iterate through the array are:\n\nStore the length of the array in a score.\nDo something with the first element in the array (array[0]) - you can\neither just read the element, or modify it.\nCopy the first element to the end of the array, then remove the first\nelement.\nDecrease the length score by 1.\nIf the length score is 1 or more, repeat from step 2 until it isn't.\n\nFirst, we need a function which will begin the process. This is where we do step\n1 and then run the loop function:\n\nGet the length of the array, and store it in a fake player in a scoreboard\n(we assume you already have created a scoreboard - do this in your load function)\nexecute store result $length run data get storage minecraft:example ExampleArray\n\nIf the length is at least 1, run the loop function\nexecute if score $length matches 1.. run function :array_loop\n\nIn the array_loop function, you can do whatever you want to the array item,\nincluding modifying it. In this example, we will send the array item to chat,\nand then replace it with \"Iterated\".\n\nWe can access the current array item with \"storage minecraft:example ExampleArray[0]\"\n\nSend the current array element to chat\ntellraw @a {\"nbt\":\"ExampleArray[0]\",\"storage\":\"minecraft:example\"}\n\nReplace the current array element with \"Iterated\"\ndata modify storage minecraft:example ExampleArray[0] set value \"Iterated\"\n\nCopy the current element to the end of the array then remove the current element (so the loop will work)\ndata modify storage minecraft:example ExampleArray append from storage minecraft:example ExampleArray[0]\ndata remove storage minecraft:example ExampleArray[0]\n\nDecrease the length score\nscoreboard players remove $length 1\n\nIf there are still items left (length is not 0), run the loop again\nexecute if score $length matches 1.. run function :array_loop\n\nThe chat output should be as follows:\n\nArray Item 1\nArray Item 2\nArray Item 3\n\n/data get storage minecraft:example ExampleArray\nOutput: [\"Iterated\", \"Iterated\", \"Iterated\"]","description":"This guide explains how to loop through an array's items in a Minecraft datapack","url":"/guide/nbt-and-scores/array-iteration/","tags":[]},{"title":"Floating Point Division","content":"Division with floating points\n\nTypically, we can use scoreboard players operation to divide two numbers in\nMinecraft. However, this command will only output an integer. If the result of\nthe division is a decimal number, it is always rounded down. To divide numbers\nwith decimal points, we need to use a workaround:\n\nMultiply the dividend by a large factor of 10 (e.g 1000000).\nDivide the numbers using scoreboard players operation.\nStore the result to a data storage, scaling it down by the same factor of 10.\n\nHere is an example of how to divide two arbitrary integer numbers:\n\nDefine the numbers we want to divide (in this case, 10 / 3)\nscoreboard players set #dividend math 10\nscoreboard players set #divisor math 3\n\nMultiply the dividend by 1000000\nexecute store result storage temp minecraft:math int 1000000 run scoreboard players get #dividend math\nexecute store result score #dividend math run scoreboard players get storage temp minecraft:math\n\nDivide the numbers\nscoreboard players operation #dividend math /= #divisor math\n\nStore the result to a data storage\nexecute store result storage result minecraft:math float 0.000001 run scoreboard players get #dividend math\n\nDisplay the result\ntellraw @a {\"nbt\":\"result\",\"storage\":\"temp\"}\n\nAlternatively, you can scale by 1/n to divide by n. For instance, if you\nwant to divide by 2, you can scale by 1/2 which is 0.5:\n\nDefine the numbers we want to divide (in this case, 10 / 2)\nscoreboard players set #dividend math 10\n\nScale down by 0.5 (divide by 2)\nexecute store result storage result minecraft:math float 0.5 run scoreboard players get #dividend math\n\nDisplay the result\ntellraw @a {\"nbt\":\"result\",\"storage\":\"temp\"}","description":"Learn how to divide numbers in Minecraft which have decimal points.","url":"/guide/nbt-and-scores/division/","tags":[]},{"title":"Player ID System","content":"Player ID System\n\nThis guide will explain how to create a player ID system within a datapack. A\nplayer ID system gives each player a unique score on a scoreboard, which can\nthen be used to link players to entities, or for the player to be able to select\nanother player easily.\n\nAssigning player IDs\n\nFirstly, we need to create a scoreboard objective to store the players' IDs.\nThis scoreboard will also hold a counter of the IDs given in a fake player so\nthat no two players end up with the same ID.\n\nCreate the playerid scoreboard\nscoreboard objectives add playerid dummy\n\nNext, we need to assign an ID to the player when they first join the world.\nCreate a function which assigns the value of the max player ID counter to the\nplayer, and then increments it by one.\n\nAssign the max player ID to the player\n(When this is first ran, .max playerid is not set and read as 0, so the first player gets the ID 0)\nscoreboard players operation @s playerid = .max playerid\n\nIncrement the max player ID by one\nscoreboard players add .max playerid 1\n\nFinally, we need to make this function run when a player first joins the world.\nWe can do this using a tick advancement - it will only trigger when the player\nfirst joins the world.\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:tick\"\n}\n},\n\"rewards\": {\n\"function\": \":assign_id\"\n}\n}\n\nFind the player/entity with a specific ID\n\nWe can use a predicate to check if the player has the same ID as the specified\nID (stored in a fake player on a scoreboard). In this case, this predicate will\nonly trigger if the player's playerid score is equal to the playerid score\nof the fake player (#this).\n\n{\n\"condition\": \"minecraft:entity_scores\",\n\"entity\": \"this\",\n\"scores\": {\n\"playerid\": {\n\"min\": { \"type\": \"minecraft:score\", \"target\": { \"type\": \"minecraft:fixed\", \"name\": \"#this\" }, \"score\": \"playerid\" },\n\"max\": { \"type\": \"minecraft:score\", \"target\": { \"type\": \"minecraft:fixed\", \"name\": \"#this\" }, \"score\": \"playerid\" }\n}\n}\n}\n\nWe can call this predicate any time we want to find the player or entity with a\nspecific ID - just set the #this fake player to the score you want to match,\nand then call the predicate as all entities or players. This function will\nreturn all the entities with the same ID as the executor:\n\nSet #this to the current entity's ID\nscoreboard players operation #this playerid = @s playerid\n\nFind all entities which have the same ID\nexecute as @e[predicate= :match_id] run say I have the same ID.","description":"Create a player ID system in a Minecraft datapack for linking players to entities.","url":"/guide/nbt-and-scores/player-id-system/","tags":[]},{"title":"Generating Random Numbers","content":"Generating Random Numbers using Datapacks!\n\nGenerating a random number is very useful in programming for many reasons.\nMinecraft 1.20.2 added the /random command, which lets us do this very easily.\nHowever, if you are using an older version, you can still generate random\nnumbers using loot tables.\n\n1.20.2 and newer\n\nBecause of the /random added in 1.20.2, it is much simpler to generate random\nnumbers. It now only requires a single command:\n\nexecute store result ... run random value 1..10\n\nIn the command you can change the values 1 and 10 to change the range. You can\nfill in ... to specify where you want to store the random number. For example,\nto store the random number in the player's scoreboard:\n\nexecute store result score @s run random value 1..10\n\n1.20.1 and below\n\nIn earlier versions, a loot table can be used to generate a random number. This\nworks by summoning a loot table which will drop a random amount of air items,\nand storing the result of that summon.\n\nThis template loot table can be used to generate a random number between 1 and\n10:\n\n{\n\"pools\": [\n{\n\"rolls\": {\n\"min\": 1,\n\"max\": 10\n},\n\"entries\": [\n{\n\"type\": \"minecraft:item\",\n\"name\": \"minecraft:stone\",\n\"functions\": [\n{\n\"function\": \"minecraft:set_count\",\n\"count\": 0\n}\n]\n}\n]\n}\n]\n}\n\nYou can change the values 1 and 10 to change the range. If you leave it as\nit is, it generates a random number between 1-10.\n\nTo use this, you will just have to store the result of summoning this loot\ntable:\n\nexecute store result ... run loot spawn~ loot :rng","description":"Generate a random number in a datapack using the /random command, or alternatively, a loot table.","url":"/guide/nbt-and-scores/random-numbers/","tags":[]},{"title":"Choosing a Server","content":"Choosing a Server\n\nWhen you join a Minecraft server, you are playing on a computer running a\nspecial software. This software allows you to interact with other players on the\nserver and play the game. There are so many different choices when it comes to\nchoosing Minecraft server JARs that it can easily become overwhelming.\n\nIn this guide, we focus on multiple aspects of the various servers, from\nperformance, to datapack support to even features that are exclusive to certain\nserver softwares.\n\nBackground Information\n\nBefore we dive into the different server JARs, we need to talk about the\ndifferent types of Minecraft servers. Throughout this guide, we will be using\nthe term \"server JAR\" to refer to the actual Minecraft server file. These JARs\nare Java executable files that run the Minecraft server.\n\nThere are a few common types of Minecraft servers:\n\nVanilla: The vanilla server is the most basic server software, it's just\nthe vanilla game.\nBukkit-based: Bukkit is a plugin-based server software that is used by\nmost Minecraft servers. It is the most popular of the server softwares as it\nprovides a wide range of plugins and features.\nModded: Modded servers are based on the Fabric or Forge, which are\nmod-based server softwares. They are more customizable than Bukkit-based\nservers, but are not as popular. The use of modded servers is still very\nlimited, making it hard to find a mod for some purposes.\nSponge-based: Sponge is a plugin-based server software that is used by\nmany Minecraft servers. It is similar to Bukkit-based servers, but is more\ncustomizable and has support for mods with SpongeForge.\n\nVanilla\n\nThe vanilla server is the most basic server software, and is the one that you\nget when you download the jar file from the\nofficial website. It does not\ncome with mod or plugin support. Beyond datapacks, it is not customizable at\nall.\n\n| Pros| Cons|\n| ----------------------------------------------- | ----------------------- |\n| Easy to set up| No mod support|\n| Fastest to update (comes out with every update) | Mediocre performance|\n| Designed with exclusively datapacks in mind| Limited customizations|\n| No additional bug fixes| No additional bug fixes |\n\n\n\nFor some, a lack of bug fixes can be both positive and negative. Mileage may\nvary!\n\n\n\n\n\nEven though it mentions bad performace, the vanilla server still has decent\nperformance. For small servers on decent hardware, it doesn't really matter what\nyou choose.\n\n\n\nSpigot\n\nSpigot is another popular server software, it comes\nwith some basic performance optimizations, and is not as customizable as Paper.\nIt can cause some issues with datapacks but mitigating datapack-related bugs is\nsignificantly easier when compared to Paper. If you want plugins and\ndatapacks, this is likely the one you want.\n\n| Pros| Cons|\n| ------------------------------------------ | --------------------------------------------------- |\n| Popular and well-supported| Bad datapack support by default|\n| Comes with basic performance optimizations | A bit older, May be lacking APIs other servers have |\n| Datapack bugs are less common| Not as customizable as other server softwares|\n\nPaper\n\nPaper is a fork of Spigot, and it's the most popular\nBukkit server JAR according to bStats. It is\none of the most customizable server software on this list and comes with\nexcellent plugin support and amazing performance optimizations. Unfortunately,\nit is notorious for breaking datapacks and even some plugins for the sake of\nperformance, modernity and bug fixes.\n\n| Pros| Cons|\n| ------------------------------------------------------------ | --------------------------------------------------------------------- |\n| Popular and well-supported| Breaks many datapacks due to destructive performance optimizations|\n| Numerous performance optimizations| Only designed for plugins|\n| Modern and forward-looking| Can take a while to update due to relying on Spigot as a base|\n| Comes with extensive documentation and configuration options | Some useful bugs are fixed by default (TNT duping, sand duping, etc.) |\n\n\n\nUntil recently, Paper was based Spigot, but recently, they converted the project\ninto a hard fork (no longer based on Spigot), however, the software is still\nslow to update and make stable releases.\n\n\n\nForge\n\nForge is a mod-based server software used\nprimarily by older Minecraft servers. Forge is the gold standard for mods for\nversions >1.13 while still offering support for latest versions. Many mod packs\nsuch as RLCraft, Pixelmon, ATM (All The Mods) will only run on Forge. Forge\nis still updated to latest versions, however, newer loaders are recommended.\n\n| Pros| Cons|\n| ------------------------------------- | ------------------------------------------------------- |\n| Great for older Minecraft versions| By choosing older versions, you miss out on DP features |\n| Large mod catalog spanning many years | Different mod loaders are recommended nowadays|\n| Many mods do not affect DP features||\n\n\n\nIt's recommended to use NeoForge on the latest version when\npossible. This will offer the bestest of Datapack features and the most modern\nmods\n\n\n\n\n\nBy choosing an older Minecraft version you will lose out on a lot of cool\ndatapack features.\n\n\n\nNeoForge\n\nNeoForge is a mod-based server software used by many\nMinecraft servers. It is a fork of Forge designed to be cleaner and more modern,\nwith significant reworks to many bloated parts of Forge. It is designed to be\nused with new versions of Minecraft and many mods that did target the latest\nversion of Forge will now target NeoForge or both!\n\n| Pros| Cons|\n| ----------------------------------- | ---------------------------------------------------------- |\n| Great for newer Minecraft versions| Finding mods in general is hard|\n| Great modding community| Different mod loaders may provide a larger catalog of mods |\n| Many mods do not affect DP features ||\n\nFabric\n\nFabric is another mod-based server software. Fabric is\nused by most modern modded servers due to its fast boot time, advanced injection\nand great mods. Fabric is likely the best modded server for use with datapacks\ndue to how it injects its code.\n\n| Pros| Cons|\n| ---------------------------------- | ----------------------------------------------- |\n| Popular and well-supported| Finding server-side mods are hard|\n| Mods rarely affect datapacks| Hard to troubleshoot|\n| Great for newer Minecraft versions | Support for older Minecraft versions is limited |\n\n\n\nYou may see people talk about Cardboard. It's a mod that can add the Paper API\nto your Fabric server, but the actual functionality is very limited and its slow\nto update.\n\nWe do not recommend you use it! Instead, try find native Fabric alternatives!\n\n\n\nSpongeVanilla\n\nSpongeVanilla is the\nvanilla version of Sponge. It is an alternative to Bukkit-based server jars with\nincredible extensibility. It is very rarely used due to the lack of mods/plugins\nsupporting it.\n\n| Pros| Cons|\n| ---------------------------------- | ---------------------------------------------------- |\n| High quality plugins are common| Support for newer Minecraft versions is experimental |\n| Generally fast| Server support is hard to find|\n| Great for older Minecraft versions | Finding Sponge mods are hard|\n\nSpongeForge\n\nSpongeForge is a version of\nSponge with support for Forge mods. Similarly to SpongeVanilla, it is very\nrarely used due to the lack of mods supporting it.\n\n| Pros| Cons|\n| ---------------------------------- | -------------------------------------------------------------------------------- |\n| Support for plugins and mods| Support for newer Minecraft versions is experimental|\n| Plugins are well integrated| Generally not as popular as Bukkit-based servers|\n| Great for older Minecraft versions | Finding Sponge mods are hard, support for Forge mods is pinned at lower versions |\n\nHonorable Mentions\n\nMinestom\n\nMinestom is a very high performance, lightweight server jar designed for extreme\ncustomizability at the expense of doing everything yourself.\n\n\n\nThis server jar is basically an empty shell and is only recommended for highly\ntechnical purposes. You need to program everything you want into this server\nyourself, including features you may expect to come with the jar (lighting). You\nhave been warned!\n\n\n\n| Pros| Cons|\n| --------------------------------------------------- | ---------------------------------------------- |\n| Extremely high performance| Almost everything must be manually implemented |\n| Uber customizable, anything you dream is possible!| HIGHLY TECHNICAL! Expect many errors with DIY|\n| Absolutely no obfuscation, the protocol is readable | An understanding of networking may be required |\n\nProxies (BungeeCord, Velocity, Waterfall, etc.)\n\nThese \"servers\" are different from the rest, as they themselves are not servers,\nbut rather proxies.\n\nMost Minecraft servers can't handle more than a hundred-or-so people at once, so\nhow do giant servers like Hypixel have tens of thousands of people on at one\ntime? Imagine a large server with many mini games. Every time you teleport to a\ngame, a proxy is sending you to a completely different server, usually dedicated\nto running just that game. Larger servers can have thousands of people\nonline at a time because not everyone is in one server, they are split between\ntens or hundreds of servers. Simply put, the proxy is like glue, sticking\nservers together and allowing people to \"teleport\" between them.","description":"Learn the differences, pros and cons of different Minecraft server softwares, and which one you should use for datapacks, mods and/or plugins.","url":"/guide/choosing-a-server/","tags":[]},{"title":"Slowcast","content":"Slowcasting\n\nA Slowcast is similar to a raycast, but unlike a standard Raycast, it is not\ninstant.\n\nIn some cases it is enough to use a simple tp command that teleports a marker a\nbit forward every tick. If you wanted it to move faster, however, you have to\nincrease the distance it teleports and this could result in skipping over\nentities or blocks you might want to detect.\n\nA slowcast solves this problem by teleporting multiple times within a single\ntick to travel faster but still checking if it hits something on its way.\n\n\n\nThis tutorial uses a thing called a recursive function. A recursive\nfunction is a function that runs itself over and over again.\n\n\n\nSlowcasting to an entity\n\nThis method shows you how you can create and shoot a slowcast to detect entities\non its way.\n\nSlowcasts can be useful if you want to create fast but not instantaneous moving\nprojectiles for magic spells for example.\n\nTo make a slowcast, you need:\n\nTo set up a projectile with all the data it needs.\nA duration function to manage the travel distance.\nA step function that teleports the projectile and checks if it hit something.\nA temporary loop that calls the step function for all active projectiles.\n\nLet's start by creating all the necessary scoreboards in the load function.\n\nscoreboard objectives add temp dummy\nscoreboard objectives add slowcast.steps dummy\nscoreboard objectives add slowcast.duration dummy\n\nThe next step is to initialize the projectile. This is done by running the\nfollowing function as and at the player. It summons a new marker entity (any\nother entity works too) and runs the setup function as that entity.\n\nexecute anchored eyes positioned ^ ^ ^.3 summon minecraft:marker run function :setup\n\nSadly it is not possible to add nbt data in the summon sub-command so we have to\nadd it in the setup function too. We will give it a tag that marks it as a\nslowcast projectile. After that, we set all the scores it needs to function\nproperly. In this example, you will see that instead of setting the scores\ndirectly it copies from temporary scoreboards. This is so that the values are\nnot hardcoded and can be different for different projectiles without having to\ncreate a new setup function for each projectile. At the end, we then call the\ntemporary loop function.\n\ntag @s add slowcast\n\nscoreboard players operation @s slowcast.steps = maxSteps temp\nscoreboard players operation @s slowcast.duration = duration temp\n\nfunction :temp_tick\n\nThe projectile is all set up and the loop function is called. The loop function\nis the part of this whole system that keeps everything running as long as there\nare active slowcast projectiles.\n\nexecute as @etype=marker,tag=slowcast,scores={slowcast.duration=1..}] at @s run function :duration\n\nexecute if entity @n[type=marker,tag=slowcast] run schedule function :temp_tick 1t\n\nNow the actual slowcast logic which handles the movement, travel distance, and\nhit detection.\n\nIn the looping function the duration function is called, let's make this one\nfirst. This function is responsible for the slowcasts travel distance and\ncalling the step function for the actual movement.\n\nDecrease the duration score.\nStore the projectile step count in a temporary scoreboard.\nCall the step function 0.2 blocks further in the facing direction.\nKill the projectile should it have a distance score of below 1 at the end of\nthe function.\n\nscoreboard players remove @s slowcast.duration 1\n\nscoreboard players operation steps temp = @s slowcast.steps\nexecute positioned ^ ^ ^.1 run function :step\n\nexecute unless score @s slowcast.duration matches 1.. run kill\n\nIn the called step function we handle the teleportation between the current and\ntarget position and check if the projectile has hit something on its way there.\n\nDecrement the step score in the temporary scoreboard _(we still need the step\nscore stored in the projectile for the next time we call the step function)_.\nMake some particles for the visuals (you could replace the particle command\nwith another function call that does more complex stuff).\nExecute a command as every entity _(excluding entities with the slowcast tag\nand players)_ whose hit box intersects with both\n[virtual volumes\nrun the hit function and kill the projectile.\nTp the projectile to the current position _(until now it only executed the\ncommand at this position but is still 0.1 block further back)_.\nExecute this function again one 0.1 block step forward should the temporary\nstep counter still be over 1 (recursion).\n\nscoreboard players remove steps temp 1\n\nparticle flame~ .1 .1 .1 0 1\n\nexecute as @e[type=!player,type=!marker,dx=0] positioned -.99 -.99 -.99 if entity @s[dx=0] positioned .99 .99 .99 unless function :hit run kill @n[tag=slowcast]\n\ntp~\n\nexecute if score slowcast.steps temp matches 1.. positioned ^ ^ ^.1 run function :step\n\nThe hit function called in the hit detection does whatever you want it to do\nwhen hitting an entity. It could spawn an explosion, apply an effect, or simply\ndeal some damage.\n\n\n\nWhen you make the hit function have a successful return value, it will not kill\nthe projectile in the step function. You could use this to make a piercing\nprojectile for example.\n\n","description":"Like a raycast but in slow. Useful if simply using tp every tick skips over too much when making it fast.","url":"/guide/misc/slowcasts/","tags":[]},{"title":"Debugging your Datapacks","content":"Debugging your datapacks\n\nThere will come times when your datapack won't work, and you will have to figure\nout what exactly doesn't work in it. Don't worry if this happens to you, if\nyou're like any of the rest of us, this will happen often. Code will almost\nnever work the first time you try it. An error in your code is referred to as a\nbug. Removing these bugs is called debugging. This guide will teach you the best\nmethods for debugging datapacks.\n\nWhat are bugs?\n\nBugs are a fancy programmer term for an error in your code. There are two main\ntypes of bugs:\n\nSyntax error: This is a bug in the actual written code. This is caused by\nthe code you write being incorrectly written so that the computer literally\ncan't read it. For example, writing executr as @a would be a syntax error\nbecause executr isn't a command.\nLogic error: This is a bug where the written code is correctly written,\nbut the code doesn't do what you want it to. This is caused by a mistake in\nthe code logic. In the simplest example, if you want to give a player 32\ndiamonds, but you accidentally wrote 322.\n\nFinding and debugging syntax errors\n\nSyntax errors are pretty easy to spot and fix, due to Minecraft's output logs,\nwhich literally tell you if your code is incorrect. When you're coding\ndatapacks, its a good idea to always have the logs open if you need to double\ncheck it. You can open the logs by opening the default Minecraft launcher and\nclicking \"Settings\", and then enabling \"Open output log when Minecraft: Java\nEdition starts\", then just starting the game.\n\nA guide on how to open the Minecraft launchers output logs\n\nSyntax errors will show up in red text when you /reload your datapack. But\nsometimes other errors can also show in yellow text instead.\n\nLets take this image as an example:\nOutput log with an error. Here, the\nerror tells you exactly where the error is - in this case it's in the function\n\"be:give\" at line 1 after \".... give @s\". And indeed I did spell \"loot\" as\n\"lot\", which caused the error.\nCode with a syntax error\n\nFinding logic errors\n\nLogic errors are more difficult to find because there's nothing actually\nincorrect with the code you wrote, it just does something other than what you\nwant it to do.\n\nAn easy way to find where a logic error is in the code is to make use of the\nsay or tellraw command. These commands will send any message to the\nchat, making it easy for you to know when and if your code actually runs **as\nyou expect it to**. You can easily put a\nsay Function ran correctly command in your function - If the\nfunction runs, then it will send a message to the chat. It will also send the\nname of the entity that ran the function to the chat, so you can see if your\nfunction is executed by the correct entity.\n\nSimilarly, you can use the tellraw command for more advanced debugging. The\ntellraw command also has the capability to show you the value of scoreboards and\nNBT values, so you can check what data your code is using. For instance, if you\nwant to check the value of a scoreboard, you could use the following command:\n\ntellraw @a {\"score\":{\"name\":\"@s\",\"objective\":\"some_scoreboard_objective\"}}\n\nBased on the output of these commands in chat, you can use this to tell where\nyour code goes wrong. (Just make sure to remove them after you've found the\nerror, otherwise it can get annoying).\n\nYou may want to keep the debug messages in the datapack, but you don't want it\nto be sent to every player. Fortunately for us, with the tellraw command, you\ncan specify to who the message will be sent. This means you could only send the\ndebug messages to those who have the tag debug:\n\ntellraw @atag=debug] {\"text\":\"Debug message sent only to people with the debug tag!\"}\n\nDebugging logic errors\n\nUnfortunately, debugging logic errors in your code isn't as easy as fixing one\nspelling mistake. But yet there are still techniques that we can use.\n\nOne way to solve logic errors is to recreate the error in a separate project.\nWhen you remove all the other context of the pack, you can focus just on the bit\nwhich doesn't work. You can just copy out the code you want to fix into a\nseparate datapack, then fix it there. Once you've identified and fixed the\nproblem, you'll know how to fix it in the real project.\n\nSummary\n\nThe first main method for debugging datapacks is using Minecraft's output logs,\nwe've already learnt how to use those in the first part of this guide. The\nsecond method is using the in-game commands, like /say and /tellraw to print\ninformation in real-time about how your datapack works. But those are not the\nonly ones, you can use the /scoreboard objectives setdisplay \ncommand to show the values of a scoreboard on your screen in real-time, or you\ncan use /data get ..., which will print the value of any NBT data in chat.\n\nA scoreboard on screen\n\nYou might also find that some other methods that suit you the best, for example\nyou might find the [Data Reload mod\nuseful for displaying errors in chat, or a completely different method, that is\nup to you.","description":"Sometimes your datapack won't work, and you will have to figure out what exactly doesn't work in them. And this guide will help you with exactly that!","url":"/guide/misc/debugging/","tags":[]},{"title":"Raycasts","content":"Raycasting\n\nRaycasting is when we shoot a line from the player's eyes in the direction they\nare looking. We use this to get what the player is looking at and do something\nto it, such as spawning an explosion.\n\n\n\nThis tutorial uses a neat thing called a recursive function. A recursive\nfunction is a function that runs itself over and over again.\n\n\n\nThis method works due to a special behaviour of Minecraft functions - functions\nare always run at a position and rotation. This means that we can run a function\nat a postition, move it forward in the direction, and run it again, over and\nover again. This is how we can make a raycast.\n\nMethod\n\nThis method will show you how to find what entity that a player is looking at.\nThis is useful for many reasons - if you wanted to make a gun datapack, you'd\nneed to damage the entity that a player is looking at in order to damage them.\n\nTo do this, you have to run a recursive function which will start at the eyes of\nthe player and keep running itself 0.1 blocks forward until it hits an\nentity. When it does hit an entity, you can easily get the entity and do\nsomething to it.\n\nFirstly, we'll make the function which, when you run it, will start the\nraycast. In this function, we'll want to:\n\nSet the maximum distance for the raycast, so it won't go on forever if it\nnever hits an entity.\nRun the function at the eyes of the player.\n\nTo set a maximum distance, we store the maximum amount of times we want the\nfunction to run in a scoreboard. Every time the recursive function runs, we want\nto subtract one from that scoreboard, and only continue if the score is more\nthan 0.\n\nFirst, you need to create a scoreboard in your load function. This scoreboard\nwill store the maximum amount of times the raycast function can run:\n\nCreate the scoreboard\nscoreboard objectives add raycast dummy\n\nThen, when we want to start the raycast, we just do the following:\n\nTag the entity or player that starts the raycast, so we can refer back to\nthem.\nSet the maximum distance for the raycast.\nCall the raycast function in the facing direction.\nRemove the tag at the end, so it doesn't interfere with other raycasts.\n\nTag the raycaster\ntag @s add raycaster\n\nSet the maximum distance\nscoreboard players set .raycastLimit raycast 1000\n\nBegin the raycast function\nexecute at @s anchored eyes positioned ^ ^ ^.1 run function :raycast\n\nRemove the tag from the raycaster\ntag @s remove raycaster\n\nIn the raycast function, we just want to check if the function has hit an\nentity, and if not, run it again until it does, hits a wall, or reaches the\nraycasts limit, moving slightly each time.\n\nThe next step is a bit more complex. We execute a command as every entity that\nis not the caster and whose hitbox intersects with the current path of the\nraycast (using\nvirtual volumes).\nThe command will return run :hit if the raycast hits an entity. The\nreturn run will stop the raycast from running further, and then will run the\nhit function as the entity it has hit.\n\nThe last command checks if the raycast hit a wall. If it does, the raycast will\nend. If it doesn't, it will then check if the limit is reached, again ending if\nit is. Should the limit not be reached yet, it will move 0.1 blocks forward\nand call the raycast function again (recursion).\n\nRemove one from the raycast limit\nscoreboard players remove .raycastLimit raycast 1\n\nOptional: display a particle\nparticle minecraft:flame\n\nCheck if the raycast has hit an entity's hitbox\nexecute positioned -.99 -.99 -.99 as @e[dx=0,tag=!raycaster] positioned .99 .99 .99 as @s[dx=0] run return run function :hit\n\nIf the raycast has not hit a wall, and the limit has not been reached, move the raycast forward and run the function again\nexecute if block~ #minecraft:replaceable if score .raycastLimit raycast matches 1.. positioned ^ ^ ^0.1 run function :raycast","description":"Raycasting is when we shoot a line from the player's eyes in the direction they are looking. We use this to get what the player is looking at, and do something to it, such as spawning an explosion.","url":"/guide/misc/raycasts/","tags":[]},{"title":"Installing a Datapack","content":"Introduction\n\nSo you've found a nice datapack for Minecraft, and the next step is to get it\ninto your game. This guide will explain how to install a datapack onto a world\nwhich exists, a new world.\n\nInstalling a datapack to an existing world\n\nIn your world menu, find the world which you want to install the datapack on.\nClick Edit.\nThe singleplayer menu\nOpen the world folder.\nThe edit menu\nIn the world folder, open the datapacks folder.\nWorld folder with datapacks highlighted\nPut the datapack zip file into the folder.\nzip folder in datapacks folder\nIf the zip folder contains a folder which contains data and\npack.mcmeta, then put that folder in the datapacks folder instead of the\nfull zip. Putting the zip in the datapacks folder only works when\ndata and pack.mcmeta are directly in the root folder of the zip.\nRejoin the world and run /reload.\nReload command in chat\n\nInstalling a datapack to an new world\n\nGo to the Create New World screen. Make sure that you enable cheats.\nCreate new world screen\nNavigate to the Data Packs screen. This is under the \"More\" tab in the latest\nversions.\nThe Data Packs screen option\nDrag and drop the datapack zip into this screen.\nThe Data Packs screen after I dragged and dropped something in\nIf it doesn't show up, then it's likely that the zip file contains a folder\nwhich contains the datapack, and not the zip file just containing the\ndatapack. You need to take the folder out of the datapack, and put it in\nthe datapacks folder (click the \"Open Packs Folder\" button to open it.)\nClick on the datapack icon to apply it to the world.\nThe Data Packs screen after I clicked the icon\nCreate the world, and then run /reload in chat.\nReload command in chat\n\nInstalling a datapack to a realm\n\nTo install a datapack to a realm, you need to basically do this:\n\nDownload the world from the realm into your singleplayer worlds.\nFollow the steps in \"Installing a datapack to an existing world\" to\ninstall a datapack on that world.\nUpload that world to your realm.","description":"So you've found a nice datapack for Minecraft, and the next step is to get it into your game. This guide will explain how to install a datapack onto a world which exists, a new world.","url":"/guide/installing-a-datapack/","tags":[]},{"title":"How to Measure Performance","content":"How to Measure Performance\n\nDatapacks are server side - they run on the server. The \"server\" is the brain of\nthe world. It handles all the logic of the world. \n\nGenerating new chunks as players explore the world.\n\nValidating player interactions such as mining blocks.\n\nMob behaviour. All mob AI, pathfinding, targeting, etc.\n\nAnd so on...\n\nServer performance is measured in TPS - ticks per second.\nServer updates the game state every tick. Calculates mobs' positions and state,\nvalidating player actions like breaking and placing blocks, and processes all\nother game logic.\n\nServer normally runs at 20 TPS. However, if the server is overloaded with\ncomputations - it makes the individual tick longer, to keep up with all the\ncomputations. That leads to lower TPS, which causes lag and delay for all\nplayers. Blocks disappearing, or breaking too slowly, mobs behaviour slowing\ndown, this is all due to low TPS.\n\nMeasure Overall Performance\n\nYou can toggle the TPS graph using F3 + 2. \n\nTPS graph showcase\n\nGraph shows the last 240 ticks, each tick represented as a thin colored line.\nThere are a total of 4 possible colors, stacked onto each other like layers.\nEach color serves it's own purpose.\n\nLayer 1 Dark red is time spent for the main logic of the tick. Bottom layer.\n\nLayer 2 Light brown is time spent running scheduled tasks.\n\nLayer 3 Purple is time spent executing all other code.\n\nLayer 4 Green / Yellow / Red (depending on lag) is time spent waiting for the next tick. Top layer.\n\nThen, on top of the graph you can see 3 numbers: min, avg, max. They show the\nhow much time in milliseconds it took to compute for the shortest, average and\nlongest tick, currently visible on the graph.\n\nIf the longest tick (max) on the graph took less than 50ms (length of a single\ntick) the TPS is good. The server is able to process all logic in time. Otherwise,\nif max is above 50 and the lines high enough to cross over the border, the TPS is\nsuffering.\n\nBenchmarking\n\nBenchmarking is also a way of measuring performance. However, unlike the TPS\ngraph, benchmarking measures the performance of a specific chunk of code in a\ndatapack, rather than general performance of the server. \n\nBenchmarking results are inconsistent across PCs due to different hardware\nspecifications. However, the difference in results between two different\nbenchmarks is usually somewhat consistent, even across different PCs. This is\nwhy benchmarking is generally used for comparing the performance of different\nimplementations.\n\nHow Benchmarking Works\n\n\nA recursive function is a function that runs itself repeatedly. A single\nrecursive function call is called an iteration.\n\n\nBenchmarkng works by running the same function recursively, as many times as\npossible, for 40ms every tick.\n\nHigh level overview of the implementation:\n\nMove world border by a 1000 blocks in 1 second.\n\nStart recursively running the function, until the world border has moved by 40\nblocks\n\nRepeat this cycle for a 100 more ticks (5 seconds)\n\nThen, measure the average amount of iterations across the 100 ticks. This works,\nbecause world border movement does not depend on ticks, and moves in real time.\n\nBenchmark Tools\n\nWhile you could write your own benchmark,\nwe recommend using Kragast's Benchmark datapack,\nsince it makes benchmarking easier.\n\nThe following section will explain how to\nuse Kragast's Benchmark datapack using an example. This datapack measures the\nperformance of a function by running it repeatedly as many times as possible\nbefore the game starts to lag. The more times your function ran - the more\nperformant it is.\n\nTo start, download the datapack, unzip, and open it. In the function folder\nunder the benchmark namespace you will notice a few functions for you to use.\n\n📄 config.mcfunction📄 order.mcfunction\n\nFunctions above are used to customize the behavior of the benchmark datapack.\nThere are many settings, every option is documented within the config function\nusing comments. For this example, the default settings are good enough so we\nwill not change anything.\n\n📄 test.mcfunction📄 test2.mcfunction\n\nFunctions above will both be running repeatedly to test their performance.\nFor this example, let's compare a scoreboard check with an entity NBT check.\nBut you can write your own tests, and compare anything you want. First, create a\nbunch of armor_stand entities in an empty world. Then put the following code in\ntest and test2 functions.\n\nexecute as @e[type=armor_stand] if score @s test matches 1..\n\nexecute as @e[type=armor_stand] if data entity @s {ShowArms:false}\n\nNow, all that is left is to run function #benchmark:get_profile and wait for\nthe result.\n\nReading Results\n\nBenchmark Results\n\nWith the previously mentioned setup, and a total of 300 armor stands in the\nworld, these are the results i ended up with. Yellow number is the amount of\ntime a function was ran. Bigger number - faster execution, better performance.\n\nFunction 0: This is the control function. It is always empty, and is only\nhere to provide a baseline to compare to.\n\nFunction 1: This is the test function, the one with scoreboard check.\n\nFunction 2: This is the test2 function, the one with entity NBT check.\n\nSince the test function executed more frequently, it has better\nperformance compared to test2.","description":"Learn about the performance impact of a datapack.","url":"/guide/performance/how-to-measure/","tags":[]},{"title":"Write Optimized Code","content":"How To Write Optimized Code\n\nPoorly written code might cause major lag and ruin user experience. To ensure\nseamless user experience, you should write optimized code.\n\nIdentify the Bottlenecks\n\nFirst step to writing optimized code is to identify the bottlenecks. A\nbottleneck is a specific part of your code that hinders performance.\nThen, you need to replace performance heavy implementations with faster\nvariations.\nBelow - we will identify and address every major performance bottleneck.\n\nForking\n\n\nThe concept of forking is explained on the execute page itself.\n\n\nForking is the biggest performance bottleneck.\nSome execute subcommands like execute as fork the command execution into\nmultiple branches, executing every branch one by one.\n\nMinimize the Amount of Forking\n\nIf you want to run multiple commands using the same selector and condition,\nyou should avoid writing code in the following way:\n\nexecute as @atag=!already_acquired_apple] if items entity @s weapon apple run say I acquired my first apple\nexecute as @a[tag=!already_acquired_apple] if items entity @s weapon apple run give @s diamond[item_name=\"Reward\"]\nexecute as @a[tag=!already_acquired_apple] if items entity @s weapon apple run tag @s add already_acquired_apple\n\nThis code above forks multiple times for the same selector and condition.\nThis is very inefficient. Instead, you should fork once, and call a function. Like this:\n\nexecute as @a[tag=!already_acquired_apple] if items entity @s weapon apple run function acquired_apple\n\nsay I acquired my first apple\ngive @s diamond[item_name=\"Rewards\"]\ntag @s add already_acquired_apple\n\nMinimize the Amount of Branches\n\nTo optimize forking, you need to minimize the amount of branches. Forking\ncreates one branch per entity, so you need to write very specific selectors that\nselect few entities.\n\nUse many selector arguments to narrow down the amount of branches. You should\nespecially make use of tag= argument by adding tags to specific entities\nfirst, and then using them. As well as distance=, limit=, type= and other\narguments.\n\nNested Forking\n\nSometimes, every branch that was already forked, gets forked again. That is called\nnested forking. If forking is nested, the total amount of branches is going to\nbe equal to* .\n\nexecute as @e[type=pig] at @e[type=cow] run say hello\n\nLet's explore an example where in a world with 100 pigs and 200 cows you run the\ncommand above. Since the execution forks twice, first after as @e and then\nafter at @e that leads to nested forking. Resulting in a total of `100 * 200\n= 20,000 branches. That is equivalent of 20.000 say` commands ran at the same\ntime.\n\nNotice how rapidly that amplifies the amount of commands. This is precisely\nwhy you should always keep track of execute subcommands that fork the execution,\nbecause even the smallest mistake can cause exponential growth.\n\nThat also means, you shouldn't [ID search\nfor all entities. ID search itself already forks once. Therefore, running an ID search\nfor all entities, would result in nested forking.\n\nSlow Operations\n\nMacro functions\nand\nentity / block NBT operations\nare two of the slowest operations in the game.\n\nMacro functions are very slow, because they have to be re-evaluated every time\nyou run them. It is best that you avoid any macro functions, unless absolutely\nnecessary.\n\nAll NBT operations on a block or an entity\nwhether a modifying, copying or using in a condition are slow. You should always\navoid running block / entity NBT operations every tick.\n\nIt is okay to perform those operations on rarely occuring events. That way, the\nbrief lag spike does not ruin user experience.\n\nIf a slow operation is unavoidable, you can put it behind a condition. That way,\nthe slow operation does not get executed all the time, but only when that\ncondition is met. For example, if you wanted to modify every pig's NoAI data,\nyou can do the following.\n\nexecute as @etype=pig] unless entity @s[tag=disabled_ai] run function example:disable_ai\n\ndata modify entity @s NoAI set value true\ntag @s add disabled_ai\n\nIn this example, to avoid mindlessly modifying NBT of every pig, we tag all pigs\nwith modified NBT. Then we add a condition to only modify NBT of pigs without\nthe tag, so that we dont run the NBT operations twice on the same pig.\n\nScoreboard Event Detection\n\nUsing scoreboards to detect events (such as breaking a block), requires\nrunning a condition check every tick. Detecting many events like this may cause\nlag.\n\nInstead, [use advancements to detect events\nwhenever possible. Advancements do not have to check for condition every tick to\ndetect an event, unlike scoreboards.\n\nRecursion\n\n\nA recursive function is a function that runs itself repeatedly.\n\n\nAny recursive functions, whether a \nloop,\nraycast,\nor an array iteration\nshould be used carefully.\n\nAvoid the following:\n\nCombining recursive functions with forking.\n\nRecursive functions within recursive functions (Nested recursion).\n\nRunning recursive functions every tick or upon often occuring events\n\nToo many recursion calls. For example a long distance raycast, large loop, or\niteration over a long array.","description":"Learn how to optimize a minecraft datapack.","url":"/guide/performance/write-optimized-code/","tags":[]},{"title":"MCFunction vs Coding","content":"MCFunction vs Traditional Coding\n\nMany people will join the datapack community with experience with traditional\nprogramming languages. While this can be helpful for understanding topics, there\nare a lot of differences between the two, many of which can seem confusing when\nyou are used to a more traditional programming language. In this guide we touch\non some common questions and problems people run into when trying to apply\ntraditional coding logic to MCFunction.\n\nQ: How do you do variables in MCFunction?\n\nMCFunction isn't like most programming languages, MCFunction uses scoreboards,\nstorages and macros (1.20.2+) as their variables.\n\nScoreboards are like a table. They store a\nname and a value which you can then retrieve and modify later. You can use both\nentity names/UUIDs and \"fake player\" names (names not associated with any\nplayer), allowing for easy combination of variables and entity scores.\nScoreboards can only hold 32-bit integers and other data types (such as floats,\ndoubles or strings) can not be stored this way.\n\nStorages are a way of storing\nNBT data without attaching it to an entity or\nblock. Storages are stored globally per world and unlike scoreboards, don't need\nto be initialized beforehand. Unlike entity and block NBT, storages have no\nfixed structure, and can contain whichever arbitrary keys are added to it.\n\nMacros are like fancy string\ntemplating, when a function is supplied with macros, it will go through the\nfunction file and replace the macro with its value (block, entity, storage).\nInterestingly, this also works function-wide, meaning you could use them as mock\narguments.\n\n\n\nMacros can be significantly slower than other methods, it is best to only use\nthem when necessary or in non-performance-critical code.\n\n\n\nBelow are some examples of their usage:\n\nScoreboards\ncreates a new table called storage\n(dummy means it does not track any statistic)\nscoreboard objectives add storage dummy\n\nadds a fake player named \"$steps\" to storage (using prefix \"$\" to avoid collisions with real players, good practice)\nscoreboard players set $steps storage 41\n\nsets the value of a player to 42\nscoreboard players set Cbble_ storage 42\n\nMacros\nRun cool function with a macro\nfunction dph:cool_function with block~ Items\nfunction dph:cool_function with entity @etype=minecraft:squid,limit=1,sort=nearest] CustomName\nfunction dph:cool_function {Potato:true}\n\nUsage with entity NBT:\nexecute as @p run dph:cool_function with entity @s SelectedItem\n\nthis is in the dph:cool_function function\n$say The player running this function is holding $(count) items with ID $(id)!\n\nStorages\ndata merge storage example:main {number: 1, message: \"Hello!\"}\ndata modify storage example:main other_number set from storage example:main number\ndata modify storage example:main compound.array append value 42\n\n(Get more info on storages on\n[the wiki page)\n\nQ: How do you loop in MCFunction?\n\nLooping in most cases is done with 1 of 2 methods, depending on the use case:\n\nRecursive Function Calls: This is when a function calls itself which will\nloop until some end condition is met, or forever, if one is never met.\nTick Functions (#minecraft:tick): This is a special tag you can declare\nthat will run every function declared in it every tick, it is best practice\nto only have one of these function in a datapack at a time.\n\nQ: How do you make functions/methods?\n\nEvery MCFunction file is its own function which you can run with the function\ncommand. MCFunction does not support inheritance and inherited functions, but\nyou can call any function from anywhere in your datapack.\n\nfunction ...]\n\nQ: How do I do conditionals?\n\nYou can also do some basic conditionals with\n[selectors, but most if not all conditionals\nare done with the\nexecute if\nsubcommand, which accepts a variety of different inputs and check if they\nmatch/are equal. You can learn more about execute if on the\nexecute page.\n\nQ: How do you do math/expressions?\n\nMCFunction does math in an interesting way; it uses scoreboard operations in\norder to do math. Using the scoreboard players operation subcommand, you can\ndo a\nvariety of math operations.\n\n\n\nMCFunction does not come with complex math like trigonometry, absolutes, a\npre-defined Pi, or even square root! These all must be implemented either by\nhand or with a third-party library.\n\n","description":"Learn the differences between using MCFunctions and traditional coding.","url":"/guide/mcf-vs-code/","tags":[]},{"title":"Adding Mob Variants","content":"How to add custom mob variants\n\nBy the end of this guide, you will be able to add your own naturally spawning mob variants, including custom spawn conditions.\n\nThis will only work in 1.21.5+, as data-driven mob variants were added in the snapshot 25w04a. \n\nThis guide requires you\nto have at least a small understanding of datapacks. If you don't understand this guide, you can read the Getting Started\nguide. \n\n\nCreating a cat variant\n\nSetting up the datapack\n\nTo start you will need a basic datapack, if you don't know how to make one, see the\nGetting Started guide.\n\nFirstly, we are going to create the main cat variant file in the directory data/ /cat_variant/.\nYou can name the file whatever you want, but it has to be in the .json file format. For the purposes of this tutorial, we're\ngoing to call it example_cat.json. Inside, we will put and configure these settings:\n\n{\n\"asset_id\": \"example:entity/cat/example_cat\",\n\"spawn_conditions\": \n{\n\"priority\": 0\n}\n]\n}\n\nThis is a run-down of the fields in that file:\nasset_id: The resource location of the paintings texture to use. In this example, example:entity/cat/example_cat directs to assets/example/textures/entity/cat/example_cat.png.\nspawn_conditions: A list of spawn conditions, each with a priority. Right now we only have one, with a priority of 0. This means it will spawn like any other cat texture.\n\nSettings up the resource pack\n\nNext we are going to add the actual texture file for the cat variant. This needs to be placed in assets/ /textures/entity/cat/, and match the name you specified in the asset_id field earlier. In this example that is example_cat.png.\n\nTesting\n\nIf you load the datapack and the resource pack, you should now be able to spawn your cat using /summon minecraft:cat~ {variant:\"example:example_cat\"}\n\n\nFor this to work, you will need to leave and rejoin the world, just using the /reload command won't do the trick here!\n\n\nAdding more spawn conditions\n\nTo add more spawn conditions, you can add more entries to the spawn_conditions field in the .json file you created earlier.\n\n{\n\"asset_id\": \"example:entity/cat/custom\",\n\"spawn_conditions\": [\n{\n\"condition\": {\n\"type\": \"minecraft:structure\",\n\"structures\": \"minecraft:village_snowy\"\n},\n\"priority\": 1\n},\n{\n\"condition\": {\n\"type\": \"minecraft:biome\",\n\"biomes\": \"snowy_taiga\"\n},\n\"priority\": 1\n},\n{\n\"priority\": 0\n}\n]\n}\n\nThis cat variant will spawn with a priority level of 1 if it spawns in a snowy village or a snowy taiga. If another cat variant were to meet its spawn conditions, the game would randomly select a variant.\n\nFor more spawn conditions, see [this page on the minecraft wiki.\n\nOther mobs with variants\n\nYou can also add variants for these mobs:\nchicken\ncow\nfrog\npig\nwolf\n\nFor example, if you wanted to add a frog variant, you would:\nCreate a variant file in data/ /frog_variant\nAdd something like the following to the file:\n\n{\n\"asset_id\": \"example:entity/frog/example_frog\",\n\"spawn_conditions\": [\n{\n\"priority\": 0\n}\n]\n}\n\nAdd the texture to assets/ /textures/entity/frog/example_frog\n\nMobs with additional fields\n\nIf you want to add a chicken, cow, or pig variant, you'll also need to specify the model field, like this:\n\n{\n\"asset_id\": \"example:entity/cow/example_cow\",\n\"model\": \"normal\",\n\"spawn_conditions\": [\n{\n\"priority\": 0\n}\n]\n}\n\nThe model field can be normal, cold or warm for cows, and just normal or cold for chickens and pigs.\n\nIf you want to add a wolf variant, you'll need to specify 3 textures, like this:\n\n{\n\"assets\": {\n\"angry\": \"example:entity/wolf/example_wolf_angry\",\n\"tame\": \"minecraft:entity/wolf/example_wolf_tame\",\n\"wild\": \"minecraft:entity/wolf/example_wolf\"\n},\n\"spawn_conditions\": [\n{\n\"priority\": 0\n}\n]\n}\n\nIt's worth noting that you can't add custom variants for some mobs like Horses and Rabbits. If it's not in the list mentioned earlier, then it can't be added using a datapack.","description":"Learn how to add custom mob variants with Minecraft datapacks","url":"/guide/adding-new-features/mob-variants/","tags":[]},{"title":"Adding Paintings","content":"How to add custom paintings\n\nBy the end of this guide, you will be able to implement your own custom\npaintings, which will show up in the creative inventory.\n\nThis will only work in 1.21+, as custom painting variants were added in the\nsnapshot 24w18a.\n\n\n\nThis guide requires you to have at least a small understanding of datapacks. If\nyou don't understand this guide, you can read the\nGetting Started guide.\n\n\n\nSetting up the datapack\n\nTo start you will need a basic datapack, if you don't know how to make one, see\nthe Getting Started guide.\n\nFirstly, we are going to create the main painting variant file in the directory\ndata/ /painting_variant/. You can name the file whatever you want,\nbut it has to be in the .json file format. For the purposes of this tutorial,\nwe're going to call it example_painting.json. Inside, we will put and\nconfigure these settings:\n\n{\n\"asset_id\": \":example_painting-texture\",\n\"title\": \"Example Painting\",\n\"author\": \"Datapack Hub\",\n\"height\": 1,\n\"width\": 1\n}\n\nThis is a run-down of the fields in that file:\n\ntitle: A text component to use as this paintings title.\nauthor: A text component to use as this paintings author.\nheight: A value between 1 and 16, represents the height of the painting when\nplaced.\nwidth: A value between 1 and 16, represents the width of the painting when\nplaced.\nasset_id: The resource location of the paintings texture to use. In this\nexample, example:texture_name would direct to\nassets/example/textures/painting/texture_name.png.\n\nIf you are not sure what to put in asset_id, don't worry, the resource pack\npart is going to focus on that!\n\nTo finish with the datapack, we are going to have to add the newly created\npainting into Minecraft's #minecraft:placeable painting variant tag. This will\nallow the painting to be placed via the Painting item, and to be added to the\ncreative inventory. To do this, create a new file called placeable.json under\ndata/minecraft/tags/painting_variant/placeable.json. Please note that the\nexact spelling and the use of the Minecraft namespace is required here!\n\n{\n\"values\": [\n\":example_painting\"\n]\n}\n\nFinish off with the Resource Pack\n\nLastly, we are going to add the actual painting texture file. This has to be\nplaced in assets/example/textures/painting/.png This\ntexture, of course, has to have the same dimensions as the width and height you\npreviously entered into the painting variant definition file.\n\nOptionally, you can change the author and title in the datapack definition to\nuse a resourcepack translation file. Which can be added into\nassets/example/lang/.json under\n\"painting..example_painting.\".\n\nSee it in action\n\nOnce you save the above files, you need to reload the resource pack with the\nkeybind F3 + T in-game. You will also need to leave and rejoin the world to\nupdate the datapack.\n\n\n\nFor this to work, you will need to leave and rejoin the world, just using the\n/reload command won't do the trick here!\n\n\n\nYou can either get the painting by using the normal painting item and placing it\ninto a 1x1 spot, or by searching for \"Example Painting\" in the creative\ninventory.","description":"Learn how to add custom paitings to Minecraft just with a datapack and a resourcepack!","url":"/guide/adding-new-features/painting-variants/","tags":[]},{"title":"Recipes for your Custom Items","content":"Creating Recipes for your Custom Items\n\nThere are two ways to add recipes to your custom items, they differentiate based on what Minecraft version you are\ndeveloping for. The first one is for the Minecraft version 1.20.5+ (Datapack format 34+), here items can be directly\nspecified in the output with item components. The second method is for all version\nbefore 1.20.5.\n\n1.20.5 and newer\n\nThis is the easier method of the two, only requiring you to put the item id and\ncomponents into the recipe output.\n\n\n\nNote that there is currently no way to specify item components in the recipe's\ninput items, only in the result. Meaning your custom item can't (easily) be\ncrafted out of different custom items.\n\n\n\nThe instructions here will be very simple, requiring you to only create one\nfile, that being the actual crafting recipe file. This file can be named\nwhatever, but has to end in the .json file format.\n\nHere is an example of a recipe with the output of a custom item:\n\n{\n\"type\": \"minecraft:crafting_shaped\",\n\"pattern\": [\n\"ttt\",\n\" s \",\n\" s \"\n],\n\"key\": {\n\"t\": {\n\"item\": \"minecraft:turtle_scute\"\n},\n\"s\": {\n\"item\": \"minecraft:stick\"\n}\n},\n\"result\": {\n\"id\": \"minecraft:iron_pickaxe\",\n\"count\": 1,\n\"components\": {\n\"minecraft:tool\": {\n\"rules\": [\n{\n\"blocks\": \"minecraft:turtle_egg\",\n\"speed\": 6,\n\"correct_for_drops\": true\n}\n],\n\"default_mining_speed\": 3,\n\"damage_per_block\": 1\n},\n\"minecraft:item_name\": \"{\\\\\\\"text\\\\\\\":\\\\\\\"sCUTE-axe\\\\\\\"}\"\n}\n}\n}\n\nIn the example, you can see that the result has a \"components\" field, where\nyou can list the components that your custom item should have. I can also\nrecommend a useful site for generating recipes with specified components:\nhttps://misode.github.io/recipe/\n\n1.20.4 and below\n\n**This part of the guide assumes that you already knowledge some basic commands\nand how crafting recipes and advancements work.**\n\nTo create a crafting recipe for one of your custom items, you need just a little\nbit more than for a normal recipe. This is because of the fact that you couldn't\nuse NBT in recipes before 1.20.5 dropped, so that's why we need a small\nworkaround.\n\nLets create the recipe first:\n\n{\n\"type\": \"minecraft:crafting_shaped\",\n\"pattern\": [\n\"ttt\",\n\" s \",\n\" s \"\n],\n\"key\": {\n\"t\": {\n\"item\": \"minecraft:turtle_scute\"\n},\n\"s\": {\n\"item\": \"minecraft:stick\"\n}\n},\n\"result\": {\n\"item\": \"minecraft:knowledge_book\"\n}\n}\n\nAs mentioned before, we can't use the custom item as output, so we use the\nknowledge book as a placeholder.\n\nTo switch the knowledge book with our custom item, we need an advancement to\nreact when we craft the recipe. For this we use the recipe_crafted trigger.\n_With some trickery, here it is also possible to make the ingredients require\ncertain nbt._\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:recipe_crafted\",\n\"conditions\": {\n\"recipe_id\": \":scuteaxe\"\n}\n}\n},\n\"rewards\": {\n\"function\": \":craft_scuteaxe\"\n}\n}\n\nLastly we have to make the actual function that handles the item switching. You\ncan either use a give command or, what I recommend more, define the item in a\nseparate loot table and then use the loot command.\n\nclear @s knowledge_book\nadvancement revoke @s only :craft_scuteaxe\nAny code can go here, this will run when the player crafts the item.\nloot give @s loot :\nYou can also you a give command here instead\n\n\n\nIf you want to create more recipes, you can just copy, rename and configure all\nthe files we've just created.\n\n\n\nAnd that's it, you should now have a custom working recipe for your item.","description":"Learn how to make custom crafting recipes for custom items in Minecraft Datapacks.","url":"/guide/adding-new-features/custom-items/crafting/","tags":[]},{"title":"Creating Custom Items","content":"Creating Custom Items\n\nIn this guide, we will go over the basics explaining how custom items work, as\nwell as how to make your own using item components. This guide will not go over\nhow to give your custom items a texture or model.\n\nSince 1.21, it has been easy to create custom items in Minecraft. 1.21\nintroduced item components, which are like\ntags you can put on items to change their appearance or functionality. This is\nthe basis for how custom items work - we take an item which already exists, then\nadd or remove item components from that item to give it the desired feel and\nfunctionality.\n\nIn this guide we will create a custom edible item which can mine sand instantly\nand makes the player glow who eats it.\n\nHow do custom items work?\n\nCustom items are items with a unique set of item components to change their\nappearance and functionality. As of 1.21, we cannot create fully custom items -\ninstead, we need to take an item which exists, and add, remove, or edit their\nitem components to customise it.\n\nItem components cannot cover every desired functionality. An example of this is\ndoing something when the item is right clicked. We still have to use workarounds\nfor this, such as giving the item a food component to make it edible, then\ndetecting when a player starts eating it. You can read more about this in our\nright click detection summary.\n\nCreating our custom item\n\nWe are going to create a custom item with the following properties:\n\nIt can mine sand very quickly\nIt is edible, and players who eat it will start glowing\nIt will be called Sandy McDesertface\n\nWe will use item components to give the item those properties. Item components\nare put after the item in our item's give command. For example:\n\n/give @s flint[minecraft:item_name=\"Sharp Rock\"]\n\nThese are all the item components which we are going to use.\n\n| Property| Component needed| Our component|\n| -------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| Mines sand very quickly| minecraft:tool is used to make items mine different blocks quickly| [tool={default_mining_speed:1.5,damage_per_block:0,rules:[{blocks:\"minecraft:sand\",speed:100}]}]|\n| Is edible, makes the player glow| minecraft:consumable makes items edible. We can also use it to specify an effect for the player to recieve. | [consumable={on_consume_effects:[{type:\"minecraft:apply_effects\",effects:[{id:\"minecraft:glowing\",amplifier:1,duration:100}]}]}] |\n| Gives the player saturation and nutrition stats on consumption | minecraft:food gives the player saturation and nutrition after consuming it.| [food={nutrition:3,saturation:1,can_always_eat:true}]|\n| Is called Sandy McDesertface| minecraft:item_name overrides our item name.| [item_name=\"Sandy McDesertface\"]|\n\nCombining all of these together, we can create a give command for our custom\nitem:\n\n/give @s stick[tool={default_mining_speed:1.5,damage_per_block:0,rules:[{speed:100,blocks:\"sand\"}]},food={nutrition:3,saturation:1,can_always_eat:true},consumable={on_consume_effects:[{type:\"minecraft:apply_effects\",effects:[{id:\"minecraft:glowing\",amplifier:1,duration:100}]}]},item_name='\"Sandy McDesertface\"'] 1\n\n\n\nminecraft:stick can be any item you want. All custom items need to be based on\nan existing item. We do not yet have the functionality to create our own item\nIDs. However, we can make use of the custom_model_data (or custom_model in\nrecent snapshots) component to change the model or texture of the item.\n\n","description":"Learn how to make custom items with Minecraft Java datapacks","url":"/guide/adding-new-features/custom-items/intro/","tags":["beginner","guide","custom_items","item_components"]},{"title":"Creating Custom Item Models and Textures","content":"Creating Custom Item Models and Textures\n\nThis guide uses the item_model item component to change the model and texture of items with that component. It does not replace any vanilla items. It also goes over spawning custom models in your world as an entity.\n\n\n\nBefore Minecraft version 1.21., CustomModelData was used to change the look of items. It was replaced with item models\nin Minecraft version 1.21.4, so it won't work in later versions. Item Models use a completely different method\ncompared to Custom Model Data.\n\n\n\nTo add custom models or textures to the game, you will need a resouce pack. If you already have a resource pack or know\nhow to create one, you can skip to Adding custom items. If not, just continue reading.\n\nCreating an empty resource pack\n\nBefore creating your custom item, you will have to create a basic resource pack. For that, create an empty folder in\nyour minecraft/resourcepacks directory. Create a new file in that folder called pack.mcmeta and add the following\ntext:\n\n{\n\"pack\": {\n\"pack_format\": 69,\n\"description\": \"\"\n}\n}\n\nAdd a new folder named assets, and a folder inside with the name of your namespace. This should be the name of\nyour resource pack, in small letters and with underscores (\\_) as spaces.\n\nNow to the fun part.\n\nAdding custom items\n\nYou will now have to decide it you want a simple, 2d item (like for example a Totem of\nUndying) or a custom 3d model.\n\nAdding custom 2d items\n\nTo add a custom texture, make sure it's a png and place it in the assets/namespace/textures/item directory. You\ncan give it any name, but it makes sense to keep it lowercase and without spaces. Your texture will also have to have a\n16x16 size.\n\nNow, you will add the default Minecraft model for 2-dimensional items to your custom item. To do that, create a file in\nassets/namespace/models/item/your_item.json with the following contents:\n\n{\n\"parent\": \"item/generated\",\n\"textures\": {\n\"layer0\": \"namespace:item/your_texture\"\n}\n}\n\nYou can now continue reading at Adding the item_model\n\nAdding custom 3d models\n\nFor creating your custom model, I recommend using Blockbench. It's the most popular\nMinecraft model creation tool and even used by Minecraft itself. Export both the texture and the model as a\nBlock/Item model.\n\nWhen you have your model and texture file, you will have to place your model in the\nassets/namespace/models/item/your_model.json folder and your texture in\nassets/namespace/textures/item/your_item.json. You can use any name, but it makes sense to keep it lowercase and with\nunderscores (\\_) instead of spaces.\n\nTextures\n\nYour model file will now probably look like this:\n\nImage\n\nReplace all the values inside the textures bracket with namespace:item/your_texture.\n\n\n\nDo not add .png!\n\n\n\nAdding the item_model\n\nNext, you'll have to make the item available in Minecraft. To do this, you create this file in\nassets/namespace/items/your_item.json:\n\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"namespace:item/your_item_model\"\n}\n}\n\nThis binds your model to the item_model component.\n\nYou can now add your texture to any item using this command:\n\n/give @s [item_model=\"namespace:your_item\"]\n\n\n\nThis command can also be used to change the texture of any item to another vanilla item texture without a resource pack\nnor a data pack using a command like this:\n\n/give @s [item_model=\"minecraft:vanilla_item\"]\n\n\n\nSpawning the items as entities in-game\n\nYou can spawn your created models in-game using an entity called an Item Display. An item display does what the name suggests: It displays items. And since you can change the model and texture of an item, you can also change them on an item display. You can spawn an item displays with your custom model/texture like this:\n\n/summon item_display~ {item:{id:\"minecraft:paper\",count:1,components:{\"minecraft:item_model\":\"namespace:your_item\"}}}\n\n\nIn Minecraft: Java Edition, there is no good or simple way to animate your models. The best you can do is using multiple item displays and teleporting them/changing their transformation data.\n","description":"Learn how to make custom item models and textures with Minecraft Java resource packs","url":"/guide/adding-new-features/custom-items/models/","tags":[]},{"title":"Adding Smithing Trims","content":"How to add custom Smithing Trims\n\nThis guide is split into three parts, adding a custom smithing trim pattern,\nadding a custom smithing trim color palette and adding a custom trimmable item.\nThese parts can be seperately without following each other.\n\n\n\nThis guide requires you to have at least a small understanding of datapacks. If\nyou don't understand this guide, you can read the\nGetting Started guide.\n\n\n\nTo start you will need a basic datapack, if you don't know how to make one, see\nthe Getting Started guide.\n\nAdding a smithing trim pattern\n\nSetting up the datapack - Smithing Trim Pattern\n\nTo start, we are going to create the main trim pattern file in the directory\ndata/ /trim_pattern/. You can name the file whatever you want, but\nit has to be in the .json file format. For the purposes of this tutorial,\nwe're going to call it example_pattern.json. Inside, we will put and configure\nthese settings:\n\n{\n\"asset_id\": \":example_template\",\n\"description\": \"Example Trim\",\n\"decal\": false\n}\n\nThis is a run-down of the fields in that file:\n\ndescription: A text component to use as this trim's description name.\nasset_id: The resource location which is used in the resourcepack.\ndecal: Whether or not the pattern texture should be masked based on the\nunderlying armor. Optional, defaults to false.\n\nIf you are not sure what to put in asset_id, don't worry, the resource pack\npart is going to focus on that!\n\nNow, we are going to add the recipe file into data/ /recipe/. You\ncan see more about the recipe's format\nhere.\n\n{\n\"type\": \"minecraft:smithing_trim\",\n\"addition\": \"#minecraft:trim_materials\",\n\"base\": \"#minecraft:trimmable_armor\",\n\"template\": \"minecraft:diamond_block\",\n\"pattern\": \":example_template\"\n}\n\nHere we have to specify the template item which is going to be used for the\npattern, and the trim pattern ID itself.\n\nFinishing up with the resourcepack - Smithing Trim Pattern\n\nTo finish off, we'll need to add the actual definition for all the different\ncolors and armor types. This can be done by changing the armor trim's atlas\nfile. This file can be found in assets/minecraft/atlases/armor_trims.json.\nPlease note that the exact spelling and the use of the Minecraft namespace is\nrequired here!\n\n{\n\"sources\": \n{\n\"type\": \"minecraft:paletted_permutations\",\n\"textures\": [\n\":trims/entity/humanoid/example_template\",\n\":trims/entity/humanoid_leggings/example_template\"\n],\n\"palette_key\": \"trims/color_palettes/trim_palette\",\n\"permutations\": {\n\"quartz\": \"trims/color_palettes/quartz\",\n\"iron\": \"trims/color_palettes/iron\",\n\"gold\": \"trims/color_palettes/gold\",\n\"diamond\": \"trims/color_palettes/diamond\",\n\"netherite\": \"trims/color_palettes/netherite\",\n\"redstone\": \"trims/color_palettes/redstone\",\n\"copper\": \"trims/color_palettes/copper\",\n\"emerald\": \"trims/color_palettes/emerald\",\n\"lapis\": \"trims/color_palettes/lapis\",\n\"amethyst\": \"trims/color_palettes/amethyst\",\n\"iron_darker\": \"trims/color_palettes/iron_darker\",\n\"gold_darker\": \"trims/color_palettes/gold_darker\",\n\"diamond_darker\": \"trims/color_palettes/diamond_darker\",\n\"netherite_darker\": \"trims/color_palettes/netherite_darker\",\n\"resin\": \"trims/color_palettes/resin\"\n}\n}\n]\n}\n\nAnd now to finish, we'll need the actual trim textures. These should be\ngrayscale images using the same colors as\ntextures/trims/color_palettes/trim_palette (can be seen below).\n\nThese black-and-white colors will be automatically replaced by the game when a\ntrim color palette is applied. An example file of\n /textures/trims/entity/humanoid/example_template and\n /textures/trims/entity/humanoid_leggings/example_template can also\nbe found below.\n\nOnce you save the above files, you need to reload the resource pack with the\nkeybind F3 + T in-game. You will also need to leave and rejoin the world to\nupdate the datapack.\n\n\n\nFor this to work, you will need to leave and rejoin the world, just using the\n/reload command won't do the trick here!\n\n\n\nAdding a smithing trim material\n\nSetting up the datapack - Smithing Trim Material\n\nFor this example, we are going to add a new trim color palette. To start, we are\ngoing to create the main trim color palette file in the directory\ndata/ /trim_material/. Once again, you can name the file whatever\nyou want, but it has to be in the .json file format. For the purposes of this\ntutorial, we're going to call it matexample.json. Inside, we will put and\nconfigure these settings:\n\n{\n\"asset_name\": \"matexample\",\n\"description\": {\n\"text\": \"Example Material\",\n\"color\": \"#00e09d\"\n}\n}\n\nThis is a run-down of the fields in that file:\n\ndescription: A text component to use as this trim's material description\nname.\nasset_name: The resource location which is used in the resourcepack.\noverride_armor_materials: A list of optional armors which should have a\ndifferent color palette. (E.g. Gold trim on gold armor has a darker color\npalette.)\n\nNext, we are going to add the ingredient item to the\n#minecraft:trim_materials item tag. This ensures the item can be used as an\ningredient in the smithing table. This file is located in\ndata/minecraft/tags/item/. Please note that the exact spelling and the use of\nthe Minecraft namespace is required here!\n\n{\n\"values\": [\n\"minecraft:barrier\"\n]\n}\n\nAs of 1.21.5, every item you want to work as a trim material, needs to have the\n[provides_trim_material\nitem component. So to give ourselfs a barrier which provides our custom trim\nmaterial, we can use this /give command:\n\n/give @s barrierprovides_trim_material=\":matexample\"] 1\n\nFinishing up with the resourcepack - Smithing Trim Material\n\nTo finish off, we'll need to add the material definition in the resourcepack.\nThis can be done by changing the armor trim's atlas file. This file can be found\nin assets/minecraft/atlases/armor_trims.json. Please note that the exact\nspelling and the use of the Minecraft namespace is required here!\n\n{\n\"sources\": [\n{\n\"type\": \"paletted_permutations\",\n\"textures\": [\n\"trims/entity/humanoid/bolt\",\n\"trims/entity/humanoid_leggings/bolt\",\n\"trims/entity/humanoid/flow\",\n\"trims/entity/humanoid_leggings/flow\",\n\"trims/entity/humanoid/coast\",\n\"trims/entity/humanoid_leggings/coast\",\n\"trims/entity/humanoid/sentry\",\n\"trims/entity/humanoid_leggings/sentry\",\n\"trims/entity/humanoid/dune\",\n\"trims/entity/humanoid_leggings/dune\",\n\"trims/entity/humanoid/wild\",\n\"trims/entity/humanoid_leggings/wild\",\n\"trims/entity/humanoid/ward\",\n\"trims/entity/humanoid_leggings/ward\",\n\"trims/entity/humanoid/eye\",\n\"trims/entity/humanoid_leggings/eye\",\n\"trims/entity/humanoid/vex\",\n\"trims/entity/humanoid_leggings/vex\",\n\"trims/entity/humanoid/tide\",\n\"trims/entity/humanoid_leggings/tide\",\n\"trims/entity/humanoid/snout\",\n\"trims/entity/humanoid_leggings/snout\",\n\"trims/entity/humanoid/rib\",\n\"trims/entity/humanoid_leggings/rib\",\n\"trims/entity/humanoid/spire\",\n\"trims/entity/humanoid_leggings/spire\",\n\"trims/entity/humanoid/silence\",\n\"trims/entity/humanoid_leggings/silence\",\n\"trims/entity/humanoid/wayfinder\",\n\"trims/entity/humanoid_leggings/wayfinder\",\n\"trims/entity/humanoid/raiser\",\n\"trims/entity/humanoid_leggings/raiser\",\n\"trims/entity/humanoid/shaper\",\n\"trims/entity/humanoid_leggings/shaper\",\n\"trims/entity/humanoid/host\",\n\"trims/entity/humanoid_leggings/host\"\n],\n\"palette_key\": \"trims/color_palettes/trim_palette\",\n\"permutations\": {\n\"matexample\": \":trims/color_palettes/matexample\"\n}\n}\n]\n}\n\nAnd next, we are going to modify assets/minecraft/atlases/blocks.json:\n\n{\n\"sources\": [\n{\n\"type\": \"paletted_permutations\",\n\"textures\": [\n\"trims/items/leggings_trim\",\n\"trims/items/chestplate_trim\",\n\"trims/items/helmet_trim\",\n\"trims/items/boots_trim\"\n],\n\"palette_key\": \"trims/color_palettes/trim_palette\",\n\"permutations\": {\n\"matexample\": \":trims/color_palettes/matexample\"\n}\n}\n]\n}\n\nHere, the key-value pair under permutations should be the same as the\nasset_name field from the datapack file we created before.\n\nNow, we will need to create the actual material color palette texture. Since we\nare using Vanilla's default palette_key, this image needs to have a width of 8\nand a height of 1. You can see an example palette below. This image should be\nsaved in assets/ /textures/trims/color_palettes/ as\nmatexample.png.\n\nNow comes the last and also hardest part, adding the item models and their\ndefinition for all the armor pieces. I will only show this on the diamond\nchestplate but you will have to create a file for every single armor pieces!\n\nTo do this, create a new file in assets/minecraft/models/item/ called\ndiamond_chestplate_matexample_trim.json, where matexample is the name of\nyour trim material. Inside that file, put this:\n\n{\n\"parent\": \"minecraft:item/generated\",\n\"textures\": {\n\"layer0\": \"minecraft:item/diamond_chestplate\",\n\"layer1\": \"minecraft:trims/items/diamond_chestplate_matexample_trim\"\n}\n}\n\nAnd inside assets/minecraft/items/diamond_chestplate.json put and configure\nthis:\n\n{\n\"model\": {\n\"type\": \"minecraft:select\",\n\"cases\": [\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate_quartz_trim\"\n},\n\"when\": \"minecraft:quartz\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate_iron_trim\"\n},\n\"when\": \"minecraft:iron\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate_netherite_trim\"\n},\n\"when\": \"minecraft:netherite\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate_redstone_trim\"\n},\n\"when\": \"minecraft:redstone\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate_copper_trim\"\n},\n\"when\": \"minecraft:copper\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate_gold_trim\"\n},\n\"when\": \"minecraft:gold\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate_emerald_trim\"\n},\n\"when\": \"minecraft:emerald\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate_diamond_trim\"\n},\n\"when\": \"minecraft:diamond\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate_lapis_trim\"\n},\n\"when\": \"minecraft:lapis\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate_amethyst_trim\"\n},\n\"when\": \"minecraft:amethyst\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate_resin_trim\"\n},\n\"when\": \"minecraft:resin\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate_matexample_trim\"\n},\n\"when\": \":matexample\"\n}\n],\n\"fallback\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_chestplate\"\n},\n\"property\": \"minecraft:trim_material\"\n}\n}\n\nHere, the majority of the file remains the same as default, only the last trim\nmodel definition was added.\n\nOnce you save the above files, you need to reload the resource pack with the\nkeybind F3 + T in-game. You will also need to leave and rejoin the world to\nupdate the datapack.\n\n\n\nFor this to work, you will need to leave and rejoin the world, just using the\n/reload command won't do the trick here!\n\n\n\nAdding a trimmable item\n\nSetting up the datapack - Smithable Item\n\nThis example will make the diamond_pickaxe a smithable item. This time, the\ndatapack side of things is very simple. We only need to add the\ndiamond_pickaxe to the #minecraft:trimmable_armor item tag, which is located\nin data/minecraft/tags/item/. Once again, the Minecraft directory is required\nhere.\n\n{\n\"values\": [\n\"minecraft:diamond_pickaxe\"\n]\n}\n\nFinishing up with the resourcepack - Smithable Item\n\nIn the resourcepack, we'll need to customize the diamond pickaxe's item model\ndefinition. This is located inside of assets/minecraft/items/.\n\n{\n\"model\": {\n\"type\": \"minecraft:select\",\n\"cases\": [\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_pickaxe_quartz_trim\"\n},\n\"when\": \"minecraft:quartz\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_pickaxe_iron_trim\"\n},\n\"when\": \"minecraft:iron\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_pickaxe_netherite_trim\"\n},\n\"when\": \"minecraft:netherite\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_pickaxe_redstone_trim\"\n},\n\"when\": \"minecraft:redstone\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_pickaxe_copper_trim\"\n},\n\"when\": \"minecraft:copper\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_pickaxe_gold_trim\"\n},\n\"when\": \"minecraft:gold\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_pickaxe_emerald_trim\"\n},\n\"when\": \"minecraft:emerald\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_pickaxe_diamond_trim\"\n},\n\"when\": \"minecraft:diamond\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_pickaxe_lapis_trim\"\n},\n\"when\": \"minecraft:lapis\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_pickaxe_amethyst_trim\"\n},\n\"when\": \"minecraft:amethyst\"\n},\n{\n\"model\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_pickaxe_resin_trim\"\n},\n\"when\": \"minecraft:resin\"\n}\n],\n\"fallback\": {\n\"type\": \"minecraft:model\",\n\"model\": \"minecraft:item/diamond_pickaxe\"\n},\n\"property\": \"minecraft:trim_material\"\n}\n}\n\nNext we will need to **create the following file for every single material\nlisted in the file above**. All of the files need to be located inside\nassets/minecraft/models/item/ directory. For the purpose of this guide, i will\nonly create one for the resin material.\n\n{\n\"parent\": \"minecraft:item/generated\",\n\"textures\": {\n\"layer0\": \"minecraft:item/diamond_pickaxe\",\n\"layer1\": \"minecraft:trims/items/pickaxe_trim_resin\"\n}\n}\n\nYou might have noticed that the file above mentions a pickaxe_trim_resin\ntexture. Fortunately, we do not need to create this texture file as it is\ngenerated automatically by the game. But for it to work, we need to create the\natlas file inside assets/minecraft/atlases/blocks.json.\n\n{\n\"sources\": [\n{\n\"type\": \"paletted_permutations\",\n\"textures\": [\n\"trims/items/pickaxe_trim\"\n],\n\"palette_key\": \"trims/color_palettes/trim_palette\",\n\"permutations\": {\n\"quartz\": \"trims/color_palettes/quartz\",\n\"iron\": \"trims/color_palettes/iron\",\n\"gold\": \"trims/color_palettes/gold\",\n\"diamond\": \"trims/color_palettes/diamond\",\n\"netherite\": \"trims/color_palettes/netherite\",\n\"redstone\": \"trims/color_palettes/redstone\",\n\"copper\": \"trims/color_palettes/copper\",\n\"emerald\": \"trims/color_palettes/emerald\",\n\"lapis\": \"trims/color_palettes/lapis\",\n\"amethyst\": \"trims/color_palettes/amethyst\",\n\"resin\": \"trims/color_palettes/resin\"\n}\n}\n]\n}\n\nNow for the last step, we will need to create the pickaxe_trim texture. This\nis a black-and-white mask which is applied on-top of the diamond pickaxe when it\nhas a trim applied. Please note that the file has to use the same colors as\nVanillas textures/trims/color_palettes/trim_palette (this file can be seen in\nthe\n[Smithing Trim Pattern\nchapter.) This image has to be located in\nassets/minecraft/textures/trims/items/ with the name pickaxe_trim.png The\ntexture I used can be found below:\n\nOnce you save the above files, you need to reload the resource pack with the\nkeybind F3 + T in-game. You will also need to leave and rejoin the world to\nupdate the datapack.\n\n\n\nFor this to work, you will need to leave and rejoin the world, just using the\n/reload command won't do the trick here!\n\n","description":"Learn how to add custom smithing trims patterns to Minecraft just with a datapack and a resourcepack!","url":"/guide/adding-new-features/smithing-trims/","tags":[]},{"title":"Adding Jukebox Songs","content":"How to add custom jukebox songs\n\nIn this guide, we will not only learn how to create custom jukebox songs, but\nalso how to give yourself a custom music disc item and implement custom sounds!\n\nThis will only work in 1.21+, as custom jukebox songs were added in the snapshot\n24w21a.\n\n\n\nThis guide requires you to have at least a small understanding of datapacks, if\nyou don't understand this guide, you can read the\nGetting Started guide.\n\n\n\nSetting up the datapack\n\nTo start you will need a basic datapack, if you don't know how to make one, see\nthe Getting Started guide.\n\nFirstly, we are going to create the actual jukebox song file in the directory\ndata/ /jukebox_song/. The file can be named whatever, but\nit has to be in the .json file format. For the purposes of this tutorial,\nwe're gonna call it example_jukebox_song.json. Inside, we will put and\nconfigure this:\n\n{\n\"comparator_output\": 13,\n\"description\": {\n\"text\": \"ARTIST - SONG NAME\"\n},\n\"length_in_seconds\": 69.0,\n\"sound_event\": {\n\"sound_id\": \":\"\n}\n}\n\nThis is a run-down of the fields in that file:\n\ncomparator_output: A value between 1 and 15, representing the redstone\noutput when a comparator is placed next to the jukebox playing this song.\ndescription: The description of the enchantment (should be a JSON text\ncomponent).\nlength_in_seconds: The length of the song (in seconds).\nsound_event: The ID of the sound (from the resource pack) to play.\n\nIf you don't understand what to put in sound_event, don't worry, the next part\nis going to focus specifically on this!\n\nAdding custom music - Resource Pack\n\nThis part is going to be optional in the case, that you only want a vanilla\nMinecraft sound to play from the jukebox. In that case, change the sound_id in\nthe example_jukebox_song.json file from the datapack to the sounds ID. (for\nexample: \"sound_id\": \"minecraft:music_disc.cat\").\n\nIf you don't want to use a default Minecraft sound, then a resource pack is\nrequired to add the custom sound (in this case, the music on the disc) to\nMinecraft, so that the datapack can read it.\n\n\n\nMinecraft handles sound in .ogg files. There are many different converters you\ncan use to convert an MP3, WAV, or other audio file to .ogg.\n\n\n\nYou need to add your .ogg file (the audio of your music disc) to\nassets/ /sounds/.ogg. Make sure thatand\nare the same values you put in the datapack's JSON file (the\nexample_jukebox_song.json file in our case).\n\nThen, if you haven't already, you need to create a sounds.json file at the\nposition assets/ /sounds.json. This file tells Minecraft what audio\nfiles map to what IDs. Put this inside:\n\n{\n\"music_disc.\": {\n\"sounds\": [\n{\n\"name\": \":\",\n\"stream\": true\n}\n]\n}\n}\n\nSee it in action\n\nOnce you save the above files, you need to activate the resource pack with the\nkeybind F3 + T in-game. You will also need to leave and rejoin the world to\nupdate the datapack.\n\n\n\nFor this to work, you will need to leave and rejoin the world, just using the\n/reload command won't do the trick here!\n\n\n\nTo get the music disc, you need to get an item which has the\nminecraft:jukebox_playable component. This can be any item - it doesn't have\nto necessarily be an already existing music disc (but you can if you want).\n\ngive @s minecraft:YOUR_ITEM[minecraft:jukebox_playable={song:\":example_jukebox_song\"}]\n\nThen, you can use this item on a jukebox, and it should start playing your song!","description":"Learn how to create custom music discs and custom jukebox songs with Minecraft datapacks","url":"/guide/adding-new-features/jukebox-songs/","tags":[]},{"title":"Dialogs","content":"Dialogs\n\nA dialog is a \"pop-up\" menu/form which we can send to the user by using the\n/dialog command. They can show text to the user, and can also have text\ninputs, check boxes, select menus, number inputs, and action buttons.\n\nFor example, you could create a settings menu for your datapack with a dialog.\nThey can open the dialog with a function (which runs the /dialog show\ncommand), and when they are done, their inputs in the form will be converted\ninto a command which will change the settings of the datapack.\n\nDialogs are stored as JSON files in the /data/ /dialog/ folder.\n\nTypes of dialog\n\nThere are many different types of dialog that we can create.\n\nAll dialogs can have a title (displayed at the top of the screen), a\nbody (which can contain text), and any number of inputs (e.g text,\nnumber, multiselect, checkbox). The exact format of the dialog (including\nwhether there are buttons in the footer) depends on the type:\n\nConfirmation (minecraft:confirmation): This type of dialog has two\nbuttons in the footer (e.g \"Yes\" and \"No\", or \"Submit\" and \"Cancel\").\nNotice (minecraft:notice): This type of dialog has one button in the\nfooter - it is the simplest type of dialog.\nMulti Action (minecraft:multi_action): This type of dialog has a list of\nbuttons (arranged in columns), and optionally a \"close\" button at the bottom.\nDialog List (minecraft:dialog_list): This type of dialog consists of any\nnumber of buttons that open another dialog when clicked (arranged in columns)\nServer Links (minecraft:server_links): This type of dialog will display\nthe server's preset custom links.\n\n\n\nThe body can contain items as well as text. If an item is used, then it will\ndisplay graphically, and will look as if it is in the inventory when it is\nhovered over by the cursor.\n\n\n\nInputs\n\nThere are different types of input we can use on form dialogs (simple input form\nand multi action input form):\n\nText (minecraft:text): Allows the user to enter text.\nNumber range (minecraft:number_range): Allows the user to select a\nnumber with a slider (like in the settings menu)\nBoolean (minecraft:boolean): This is a checkbox. When the checkbox is\nticked, then the value is true, and vice versa.\nSingle Option (minecraft:single_option): Allows the user to select one\nfrom a list of options. It looks like a button, but you click on it to cycle\nthrough the values.\n\nEach input also has a key. This is the name of the macro value that is used\nwhen a dynamic/run_command button is clicked. For instance, if one input has\nthe key message, and a button runs the command /tellraw @a \"$(message), then\nthe value from that input is used in the command.\n\nThese inputs are pretty customisable. For instance, Text, Number range, and\nSingle Option types can have a custom width, text inputs can be made multiline,\netc.\n\nActions\n\nActions are basically buttons (e.g the submit button) which will do something\nwhen clicked. On forms, actions will run a command which uses the inputs from\nthe form, like a submit button. On other dialog types, they can do things such\nas running a set command, opening a URL, opening another dialog, etc.\n\nThe action button has a click event when the player is clicked (which is\nessentially the same as text components). This click event can be: Open URL, Run\nCommand, Suggest Command, Copy Text to Clipboard, or Show Dialog.\n\nIf the dialog has inputs, you can also use dynamic actions such as\ndynamic/run_command. This works similar to the run command action, except the\narguments of the commmand can change based on the values of the inputs.\n\nFor example, if a simple input form has one text input with the ID name and\nthe user has entered the value Silabear, and the action is a\ndynamic/run_action action which runs the command kill @aname=$(name)], then\nwhen the action is clicked, the player will run the command\nkill @a[name=Silabear].\n\n\n\nNote that the player needs permission to run the command. This means that, if\nthe player does not have operator status, then most useful commands cannot be\nrun.\n\n\n\nJSON Format\n\nThe [Minecraft Wiki goes into detail on the\nJSON format of a dialog file. However, we recommend that you use\nMisode's Dialog Editor to create dialog\nfiles, which also allows you to preview the dialog in the browser.\n\nUsing dialogs\n\nDialogs can be shown to a player in three different ways:\n\n/dialog command: The /dialog command can be used to show a dialog to a\nplayer at any time. For example, /dialog show @a namespace:my_dialog will\nshow the dialog in /data/namespace/dialog/my_dialog.json to all players.\nPause Screen: Any dialogs listed in the dialog tag\nminecraft:pause_screen_additions\n(/data/minecraft/tags/dialog/pause_screen_additions.json) will be available\nfrom the pause screen. If this tag only has one dialog, then there will be a\nbutton on the pause screen which opens that dialog. If there are more dialogs\nin the tag, then the button on the pause screen will open a menu which lets\nyou open any of the dialogs in the tag. Note that this replaces the \"Send\nFeedback\"/\"Report Bugs\" button on the home screen if used.\nQuick Actions: Any dialogs listed in the dialog tag\nminecraft:quick_actions (/data/minecraft/tags/dialog/quick_actions.json)\nwill be available when a player clicks the Quick Actions keybind (which is G\nby default). If the tag only has one dialog, then clicking G will open that\ndialog, otherwise it will open a menu where you can select any of the dialogs,\nlike the pause screen additions\nClick Events: In text components and actions in other dialogs, one click\nevent type is Open Dialog. This lets the player open a dialog when they\nclick on text (in chat, in a book, on a sign, etc) or a button (in a dialog).","description":"Dialogs are pop-up menus that you can send to the user","url":"/wiki/files/dialogs/","tags":[]},{"title":"Predicates","content":"Predicates\n\nPredicates are a type of file which can be called to check if a certain\ncondition is true. For instance, you can create a predicate to check if a player\nis walking, if an entity is above a specific Y level, or if a player is holding\nan item. They are extremely versatile and, in many cases, more optimised than\nexecute if commands.\n\n\n\nAlthough this page covers predicate files, predicates are also used within in\nadvancements and loot table files. The structure of these predicates is the same\nas described here, although some fields may not be used in certain contexts.\n\n\n\nExamples\n\nThis predicate will use the entity_properties condition check if the player is\nholding a beef item while being inside a desert village:\n\n{\n\"condition\": \"minecraft:entity_properties\",\n\"entity\": \"this\",\n\"predicate\": {\n\"location\": {\n\"structures\": \"minecraft:village_desert\"\n},\n\"equipment\": {\n\"mainhand\": {\n\"items\": \"minecraft:beef\"\n}\n}\n}\n}\n\nWe can use @apredicate=namespace:my_predicate] to select all players who\nmatch the predicate. For example:\n\nexecute as @a[predicate=namespace:my_predicate] run say I am holding beef in a desert village :D\n\nJSON Format\n\nEach predicate is represented as a JSON object. Predicate files can either\ncontain one predicate object, or a list of predicate objects. Each predicate\nobject needs a condition field, which specifies the type of condition to\ncheck. The rest of the fields depend on the condition type.\n\nFor more information about the JSON format in general, see the\n[JSON page.\n\nCertain objects are commonly reused within different predicate (and advancement)\nconditions. Below are some of them, along with their JSON structure:\n\nNumber providers\n\nA number provider is used in a predicate to provide a number. This could be a\nconstant, score value, random value, etc.\n\nThis can simply be a number (e.g 4 or 5.87). This can also be an object with\na min and max field to represent a random number (e.g\n{\"min\":1, \"max\":10}). For more advanced providers, they are represented as\nobjects - the contents of the object will vary based on which type field you\nuse. The available type fields, along with the fields required for them, are\nas follows:\n\n\"binomial\": Provides a random number based on binomial distribution.\nRequires the following fields:\nn: The number of trials used for the binomial distribution. This should be\nan int or number provider\np: The chance of success for each trial. This should be an int or number\nprovider\n\n\"constant\": Provides the specified number. Requires the following field:\nvalue: The value to provide. This should be an int or a float\n\n\"score\": Provides the score of the entity as a number. Requires the\nfollowing fields:\ntarget: An object to specify the score holder. Contains a type field -\nif set to fixed, then a name field should be used to specify which\nplayer's (by username) or entity's (by UUID) score to use. If set to\ncontext, then a target field should be used with one of the following:\nthis, killer, direct_killer, killer_player\nscore: The objective name to get the entity's score from.\nscale: If present, then the score is multiplied by scale.\n\n\"storage\": Provides the value from a specific path in an NBT storage.\nRequires the following fields:\nstorage: The storage ID to get the score from.\npath: The NBT path to the specified field in the storage.\n\n\"uniform\": Provides a random number between two values. Requires the\nfollowing fields:\nmin: The minimum number to return. This should be a number or number\nprovider.\nmax: The maximum number to return. This should be a number or number\nprovider.\n\nItem matcher\n\nAn item matcher is used to match an item with advanced filters for components\nand count.\n\nAn item matcher is an object which can consist of the following fields:\n\nitems: The item type(s) to match. This can either be string (with an item ID\nor item tag ID), or an array of item IDs.\ncount: The count of the item stack. This can either be an integer or an\nobject with a min and max key to match a range of counts.\ncomponents: An object containing the item components to match. The key is\nthe component name, and the value is the expected value in the component. This\nwill only match if the component is exactly the same as the value - if any\nother data is in the component, it will be false.\npredicate: Like components, but will match if the component at least\ncontains the specified data, rather than only matching if it is exactly the\nsame.\n\nConditions\n\nThese are all the possible conditions that can be used in a predicate.\n\nblock_state_property\n\nblock_state_property checks if the block state(s) of the block is/are equal to\na specified value(s). This predicate type is not usable with\nexecute if predicate, instead, this predicate is used in a loot table to check\na block.\n\nFields:\n\nblock: The block ID to match (e.g minecraft:andesite_wall)\nproperties: A map of block state properties to match. The key is the\nproperty name, and the value is the property value. For instance,\n{\"waterlogged\":\"true\", \"south\":\"tall\"}.\n\ndamage_source_properties\n\ndamage_source_properties checks the source of damage. This is often used in\nadvancements and loot tables.\n\nFields:\n\npredicate: An object containing the following keys:\ntags: A list of damage_type tags to match. Checks if the type of damage is\ninflicted in any of these tags (can be toggled with the expected field).\nFor instance, {\"id\":\"minecraft:bypasses_shield\",\"expected\":true}].\nsource_entity: An entity_properties predicate to match the source entity\n(inflicter, e.g skeleton) of the damage.\ndirect_entity: An entity_properties predicate to match the direct entity\n(entity responsible, e.g arrow entity) for the damage.\n\nenchantment_active_check\n\nenchantment_active_check checks if the enchantment is active. This can only be\nused in enchantments.\n\nFields:\n\nactive: If set to true, will check that the enchantment is active. If false,\nwill check that the enchantment is inactive.\n\nentity_properties\n\nentity_properties checks if the entity matches the specified properties. This\nis very often used in datapacks - it can be used to check players and entities\nwith the predicate= selector argument, and execute if predicate.\n\nFields:\n\nentity: Who to check. Can be this (equivalent of @s), attacker (the\nentity that attacked), direct_entity (the entity that caused the damage), or\nattacking_player.\npredicate: An object containing all the entity properties to check. There\nare lots of these, and going into full detail would take a lot of space (use a\ngenerator like [misode.github.io to create these\nmore efficiently):\ntype: The entity type to match. For instance, minecraft:player.\ntype_specific: An object that contains properties which may only be\nspecific to one type of entity.\nteam: The team that the entity is on.\nnbt: An NBT object to match. This should be in a string. For instance,\n\"{Health:20}\".\nlocation: A location_check predicate to match the entity's location.\ndistance: An object which is used to match the distance between the entity\nand wherever the predicate is being checked.\nflags: An object which is used to match certain true/false flags of the\nentity, such as if they are on fire, or if they are sneaking.\nequipment: An object which is used to match the equipment (head, chest,\nmainhand, etc.) of the entity. The key is the slot (e.g head), and the\nvalue is an item matcher.\nvehicle: Another entity_properties predicate to match the entity which\nthis entity is riding.\npassenger: Another entity_properties predicate to match the entity which\nis riding this entity.\nstepping_on: Following the same structure as location, this matches the\nblock the entity is standing on.\ntargeted_entity: Another entity_properties predicate to match the entity\nwhich this entity (non-player) is targeting.\neffects: An object which matches the current status effects of this entity\nslots: An object which matches the contents of the entity's inventory\nslots.\nmovement: An object which matches the movement of the entity.\nperiodic_tick: Returns true once every x ticks of the entity's lifetime.\nmovement_affected_by: Following the same structure as location, this\nmatches what affects the movement of the entity.\ncomponents - Matches entity components exactly (the component must be\nexactly equal to what is being checked).\npredicates - Matches entity components ignoring any other data in the\ncomponent (the component must contain what is being checked).\n\nentity_scores\n\nentity_scores checks if the entity's score on an object matches a specified\nvalue or range.\n\nFields:\n\nentity: Who to check. Can be this (equivalent of @s), attacker (the\nentity that attacked), direct_entity (the entity that caused the damage), or\nattacking_player.\nscores: An object containing the scores to check. The key is the objective\nname, and the value is either an int (e.g 33) or an object containing a\nmin and max number provider to match a range. For instance,\n{\"scoreboard1\":5, \"scoreboard2\":{\"min\":1, \"max\": 10}}.\n\nkilled_by_player\n\nkilled_by_player checks if the entity was killed by a player. This is used in\nloot tables.\n\nFields:\n\ninverse: If true, checks if the entity was not killed by a player.\n(optional)\n\nlocation_check\n\nlocation_check checks if the current location matches the specified\nproperties. When used in an entity_properties -> location field, it checks the\nentity's location, but if used in a loot table, it checks the location of the\nloot source (block or entity).\n\nFields:\n\nposition: The coordinates in the world to check. This is an object\ncontaining the following keys:\nx: The x coordinate to match. This should be a number or a number\nprovider.\ny: The y coordinate to match. This should be a number or a number\nprovider.\nz: The z coordinate to match. This should be a number or a number\nprovider.\nbiomes: A biome or list of biomes to match. Will be true if the location is\nwithin a biome. For instance, [\"minecraft:plains\", \"minecraft:forest\"].\nstructures: A structure or list of structures to match. Will be true if the\nlocation is within a structure. For instance,\n[\"minecraft:village\", \"minecraft:woodland_mansion\"].\ndimension: The dimension to match. Will be true if the location is in a\npredicate For instance, minecraft:overworld.\nlight: The light level to match. This should be a single int, or an object\ncontaining a min and max number provider to match a range.\nblock: The block to match. This should be an object containing the\nfollowing:\nblocks: A block ID or list of block IDs to match. For instance,\n[\"minecraft:mycelium\", \"minecraft:grass_block\"].\nstate: An object containing the block state properties to match. For\ninstance, {\"waterlogged\":\"true\", \"south\":\"tall\"}.\nnbt: An NBT string to match. Will be true if the block at the location\ncontains all of the specified NBT (ignoring other tags). For instance,\n\"{Items:[{id:\\\"minecraft:stick\\\",Count:1b}]}\".\nfluid: The fluid to match. This should be an object containing the\nfollowing:\nfluids: A fluid ID or list of fluid IDs to match. For instance,\n[\"minecraft:water\", \"minecraft:flowing_water\"].\nstate: An object containing the fluid state properties to match. For\ninstance, {\"level\":\"2\"}.\nsmokey: Checks if the location is within 5 blocks veritically of a campfire.\nThis should be a boolean.\ncan_see_sky: Checks if the the sky light level is the highest it could be.\nThis should be a boolean.\n\nmatch_tool\n\nmatch_tool matches the item used to perform an action. Contrary to what may\nseem intuitive, this can not be used to check the player's mainhand item in a\npredicate referenced in predicate= or execute if predicate - this is only\nfor loot tables and advancements.\n\nFields:\n\npredicate: An item matcher.\n\nrandom_chance\n\nrandom_chance will be true if a random decimal is less than the value in\nchance. For instance, 0.5 would be true 50% of the time, 0.25 would be\ntrue 25% of the time, etc.\n\nFields:\n\nchance: The chance of the predicate being true. This should be a float\nbetween 0 and 1.\n\nrandom_chance_with_enchanted_bonus\n\nrandom_chance_with_enchanted_bonus is similar to random_chance, but you can\nspecify a different random chance if the tool used has a certain enchantment.\nThis is used in loot tables and advancements.\n\nFields:\n\nunenchanted_chance: The chance of the predicate being true if the tool is\nnot enchanted. This should be a float between 0 and 1.\nenchanted_chance: The chance of the predicate being true if the tool is\nenchanted. This should be a float between 0 and 1.\nenchantment: The enchantment ID to check for. For instance,\nminecraft:fortune.\n\nsurvives_explosion\n\nsurvives_explosion will be true if the entity survived an explosion. This is\nused in loot tables. This predicate type has no other fields.\n\ntable_bonus\n\nEssentially, table_bonus is a more advanced version of\nrandom_chance_with_enchanted_bonus, as you can specify a different chance for\neach enchantment level\n\nFields:\n\nenchantment: The enchantment ID to check for. For instance,\nminecraft:fortune.\nchances: An array of chances for each enchantment level. The first item in\nthe array would be the chance for enchantment level 1, and so on.\n\ntime_check\n\ntime_check checks the current time.\n\nFields:\n\nvalue: The time to check, represented in game ticks. This should be a single\nint, or an object containing a min and max number provider to match a\nrange.\nperiod: If present, value will check for GAMETIME modulo . For\ninstance, setting period to 24000 (the amount of ticks in a day) would check\nfor the current daytime\n\nvalue_check\n\nvalue_check simply matches a value from a number provider against a range or\nconstant.\n\nFields:\n\nvalue: A number or a number provider to check against.\nrange: The range used to check value (will return true if value is\nwithin this range). This should be a single int, or an object containing a\nmin and max number provider to match a range.\n\nweather_check\n\nweather_check matches the current weather in the world. To check for sun, you\nwould need to set both fields to false.\n\nFields:\n\nraining: Checks if it is currently raining. This should be a boolean.\nthundering: Checks if it is currently thundering. This should be a boolean\n\nSpecial Conditions\n\nThese conditions are special as they are used in conjunction with one or more\nother conditions to alter the result of the predicate, often acting like logic\ngates.\n\nall_of or any_of\n\nall_of and any_of are self explanatory. all_of checks if all specified\npredicates are true, and any_of checks if any specified predicates are true.\n\nFields:\n\nterms: A list of predicates to check. This cannot be the ID of the current\npredicate.\n\ninverted\n\ninverted will invert the output of the predicate. If the predicate would\nreturn true, using this would make it return false, and vice versa.\n\nFields:\n\nterm: A predicate to check. This cannot be the ID of the current predicate.\n\nreference\n\nreference simply references another predicate file, as if you included the\npredicate in the current one. This is useful for reusing predicates across\nmultiple files.\n\nFields:\n\nname: A predicate ID to check. This cannot be the ID of the current\npredicate.","description":"Predicates are a type of file which can be called to check if a certain condition is true.","url":"/wiki/files/predicates/","tags":[]},{"title":"Functions","content":"Functions\n\nFunctions are files essentially containing a list of Minecraft commands. Function files end in .mcfunction, and are\nlocated in the data/ /function folder. Functions can be called (ran) using the function command. (See\n/function for more information)\n\nThe function folder can contain sub-folders for organisation. This changes\ntheir reference accordingly - for example, a function located at\ndata/ /function/sub_folder/my_func.mcfunction would be called using\nfunction :sub_folder/my_func.\n\nWhen a function is run, the commands within it are executed in order. If the\nreturn command is run, the function stops executing immediately and any\ncommands after the return are ignored.\n\nAny line in a function which starts with a # is a comment, and the game\nignores it. Any other line is interpreted as a command\n\nExample\n\nThis function will give every player an apple, then tell them to enjoy the\napple.\n\nGive a player the apple\ngive @a minecraft:apple\n\nTell them to enjoy the apple\nsay Enjoy the apple!\n\nMacro functions\n\nMacros can dynamically change part of a function by inserting NBT into it. Any\nfunction can define a macro within it. A macro is a command beginning with $.\nMacros can use a special syntax: $(). This will substitute for any\nvalue provided aswhen run.\n\nThe /function command can specify a NBT compound to use as the macro values.\nIn traditional programming, this is best represented as someFunction(foo, bar)\n\nExample\n\nIn this example, we write a function that gives the player a number of diamonds\nusing a macro.\n\nWhen called, $(count) will be replaced with some number, producing a valid command\n$give @s diamond $(count)\n\nfunction example:macro {count: 7}\n\nThis also works\ndata modify storage example:storage count set value 12\nfunction example:macro with storage example:storage","description":"Functions are files essentially containing a list of Minecraft commands. Function files end in `.mcfunction`, and are located in the `data/<namespace>/function` folder. Functions can be called (ran) using the `function` command. (See [/function](/wiki/command/function) for more information)","url":"/wiki/files/functions/","tags":[]},{"title":"Tags","content":"Tags\nRegistry tags, not to be confused with entity tags, are essentially lists of groups such as blocks,\nitems, entity types, etc. They use JSON format and are located in the data/ /tags/folder.\n\nSpecial tags\n\nMinecraft uses some tags internally for certain behaviours. These tags are\nlocated in the minecraft namespace. For example:\n\nany functions in the #minecraft:load function tag will be automatically run\nwhen a datapack is loaded\nthe #minecraft:minable/pickaxe block tag lists blocks which are mined faster\nusing a pickaxe.\n\nIn many cases, modifying these special tags allows you to configure certain\naspects of how Minecraft behaves.\n\nRegistries\n\nTags group various types in a specific registry (category), such as items,\nblocks, functions, game events, chat types, etc.\n\nThis list shows some of the possible registry types, as well as the path their\ntags should be put in.\n\n| Registry Types| Path| Example Value|\n| ----------------- | -------------------------------------------- | ------------------------------ |\n| Items| /tags/item| \"minecraft:apple\"|\n| Blocks| /tags/block| \"minecraft:grass_block\"|\n| Entity types| /tags/entity_type| \"minecraft:pig\"|\n| Functions| /tags/function| \"namespace:some_function\"|\n| Fluids| /tags/fluid| \"minecraft:water\"|\n| Game Events| /tags/game_event| \"minecraft:container_open\"|\n| Chat Types| /tags/chat_type| \"minecraft:say_command\"|\n| Damage Types| /tags/damage_type| \"minecraft:fly_into_wall\"|\n| Banner patterns| /tags/banner_pattern| \"minecraft:square_top_right\" |\n| Cat variants| /tags/cat_variant| \"minecraft:jellie\"|\n| Enchantments| /tags/enchantment| \"minecraft:sharpness\"|\n| Goat horns| /tags/instrument| \"minecraft:seek_goat_horn\"|\n| Paintings| /tags/painting_variant| \"minecraft:skull_and_roses\"|\n| Entity POI| /tags/point_of_interest_type| \"minecraft:cleric\"|\n| Biome| /tags/worldgen/biome| \"minecraft:plains\"|\n| Flat world preset | /tags/worldgen/flat_level_generator_preset | \"minecraft:classic_flat\"|\n| Structures| /tags/worldgen/structure| \"minecraft:village\"|\n| World preset| /tags/worldgen/world_preset| \"minecraft:large_biomes\"|\n\nJSON format\n\nFor information about the JSON format in general, see the\nJSON page.\n\nTag files follow a very simple format, with two fields.\n\nreplace: Can be true or false (defaults to false). If true, the tag\nwill overwrite other tags with the same path. If false, it will merge with\nthem.\nvalues: An array containing everything to group under this tag. Each element\ncan either be\nan id (e.g. \"minecraft:apple\")\nan object with an id field and a required field (e.g.\n{\"required\": false, \"id\":\"minecraft:stick\"}). If required is false,\nthe tag will still skip nonexistent ids.\n\n\n\nTags can also reference other tags. For example, if a tag file contains\n#minecraft:logs, it will also contain the entire contents of the\nminecraft:logs tag. A tag is represented by an ID beginning with a #. For\nmore information, refer to the\nresource locations\npage.\n\n\n\nExample\n\nHere is an example item tag file:\n\n{\n\"replace\": true,\n\"values\": [\n\"#minecraft:logs\",\n\"#minecraft:planks\",\n\"minecraft:chest\",\n\"minecraft:stick\"\n]\n}","description":"Registry tags, not to be confused with [entity tags](/wiki/command/tag), are essentially lists of groups such as blocks, items, entity types, etc. They use JSON format and are located in the `data/<namespace>/tags/<category>` folder.","url":"/wiki/files/tags/","tags":[]},{"title":"Advancements","content":"Advancements\n\nAdvancement files are used to create in-game advancements. These can have\ndisplay properties to make them visible to the player, like how vanilla\nadvancements work. In many function datapacks, we can use hidden custom\nadvancements to detect events (e.g player attacks entity) and then run a\nfunction.\n\nAdvancements can be stored in trees. This means that an advancement can have\nparent and children advancements. This tree format is good for showing\nprogression in different areas of the game, as well as allowing you to have\ncustom advancment tabs.\n\nAdvancement files are JSON files stored in the /data/ /advancement\nfolder.\n\nJSON Format\n\nFor information about the JSON format in general, see the\nJSON page.\n\nEach advancement is represented by a JSON object stored in the advancement JSON\nfile. The advancment JSON object can have the following fields:\n\ncriteria: An object containing the criteria/criterion that can trigger this\nadvancement. (See the Criteria section below)\nrequirements: This can optionally be used to specify more advanced rules as\nto which criteria trigger the advancement (for example, this can be used to\nspecfiy \"Advancement is given if (Criteria A OR Criteria B) AND (Criteria C OR\nCriteria D) is true\"). This should be a list of lists of criteria keys - the\nadvancement is given when at least one criteria from each list has been\nachieved.\ndisplay: If left out, this advancement is completely hidden from the player.\nOtherwise, this will control the style of the advancement, and where it is\ndisplayed to the player. It has the following keys:\nicon: An object defining the item used as the icon as the advancement.\nThis has a id field (the item ID) and components (an object with the\nitem components)\ntitle: A text component representing the title or name of the advancement\nthat is shown to the player\ndescription: A text component representing the description of the\nadvancement\nbackground: (Root advancement only) The path to the background texture of\nthe advancement tab\nframe: Used to specify the frame (or type) of advancement. This should be\neither \"task\" (default), \"challenge\", or \"goal\".\nshow_toast: If true, a pop-up will be shown when a player completes the\nadvancement. Defaults to true (if display exists).\nannounce_to_chat: If true, the advancement will be announced to chat when\nit is completed by a player. Defaults to true (if display exists)\nhidden: If true, the advancement will not show up in the advancements menu\nuntil it has been achieved by the player. Defaults to false.\nparent: The ID of this advancement's parent advancement. This should be set\nif your advancement is not just for internal event purposes. If this is left\nblank, it is considered to be a root advancement.\nrewards: An object which stores data about what should happen to the player\nwhen the advancement has been achieved. This can contain the following fields:\nfunction: The ID of the function to run as the player when they achieve\nthe advancement.\nloot: A list of loot table IDs to be given to the player when they achieve\nthe advancement.\nrecipes: A list of the recipe IDs to be unlocked by the player when they\nachieve the advancement\nexperience: The XP points to give to the player when they achieve the\nadvancement. This should be an integer\nsends_telemetry_event: (minecraft namespace only) Whether to send\ntelemetry info about this advancement to Mojang. Defaults to false.\n\ncriteria\n\nThe criteria object is an object containing the criteria needed to unlock this\nadvancement. This object should contain other objects - the key of which can be\nanything, as it serves as the criteria ID. If the requirements field is not\nused, the advancement will be achieved when all of the criteria have been\nachieved.\n\nEach criteria object contains a trigger and conditions fields. There are\nmany different triggers that can be used, the contents of conditions depends\non which trigger is used.\n\n\n\nThe player condition can exist with any advancement trigger (except\nminecraft:impossible). This condition can either be an object (an\nentity_properties predicate) or a list of other predicates (any predicate\ntype) to further match the player.\n\n\n\nYou can see all the advancement criteria using a generator such as\nmisode.github.io.\n\nUsing advancements to detect events\n\nBy specifying a function in the rewards section, and not including any\ndisplay information, you can make an advancement essentially just become an\nevent listener (something that will run a function when the player does\nsomething). In order for this to work multiple times, the function must revoke\nthe advancement from the player (using advancement revoke @s only ...), so\nthat it can be regained later.\n\nNote that the advanement will run the function as the player, but not at\nthe player.","description":"In a datapack, we can create advancements, which can additionally be used to detect events.","url":"/wiki/files/advancements/","tags":[]},{"title":"Recipes","content":"Recipes\n\nRecipes are files which define crafting recipes in-game. They can be used to add\nnew recipes, or overwrite existing ones.\nRecipes are JSON files located in the data/ /recipe folder.\n\nJSON format\n\nFor information about the JSON format in general, see the\nJSON page.\n\nSince recipe files represent a variety of different recipe types, the format can\nvary. However, there are some fields which appear in every recipe file.\n\ntype\n\nDetermines which type of recipe this is. Possible values:\n\n| Type| Description|\n| ------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| blasting| A recipe for a blast furnace|\n| campfire_cooking| A recipe for cooking items on a campfire|\n| crafting_shaped| A shaped crafting recipe in a crafting table. Ingredients must be placed in the correct pattern to craft|\n| crafting_shapeless| A shapeless recipe in a crafting table. Ingredients can be placed in any pattern to craft|\n| crafting_special_*| A crafting recipe handled using built-in logic, and not displayed in the recipe book. Only useful for disabling/enabling certain recipes |\n| crafting_decorated_pot | The recipe for crafting decorated pots. Also handled with built-in logic, but does show up in the recipe book|\n| crafting_transmute| A recipe to turn one item into another in a crafting table, while preserving its item components|\n| smelting| A recipe for a furnace|\n| smithing_transform| A recipe to upgrade an item in a smithing table|\n| smithing_trim| A recipe to add an armor trim to an item in a smithing table|\n| smoking| A recipe for a smoker|\n| stonecutting| A recipe for a stonecutter|\n\ncategory\n\nWhich category the recipe appears in the recipe book. If not provided, defaults\nto misc.\nPossible values: blocks, building, equipment, food, misc, redstone\n\ngroup\n\nAn identifier to group multiple recipes in the recipe book. For example, recipes\nto craft planks use this.\nAllowed in most recipe types, except: crafting_decorated_pot,\ncrafting_special_*, smithing_transform, smithing_trim\n\nCooking fields\n\nThese fields are present in blasting, campfire_cooking, smelting and\nsmoking recipes.\n\n| Field| Format| Default value| Description|\n| ------------- | --------------------------------- | -------------------------------------- | --------------------------------------------------- |\n| ingredient| An ingredient| required| The ingredient which gets cooked|\n| result| A single result | required| The result of cooking the ingredient|\n| experience| A number| 0| The amount of experience gained from this recipe|\n| cookingtime | An integer| 100, or 200 for smelting recipes | The number of ticks it takes to cook the ingredient |\n\n\n\nThe vanilla recipes range between 0.1 and 1 experience, and take 200 ticks (10\nseconds) for smelting, 100 ticks for blasting and smoking, and 600 ticks for\ncampfire cooking\n\n\n\ncrafting_shaped fields\n\nThese fields are present in shaped crafting recipes.\n\n| Field| Format| Description|\n| --------- | ----------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| pattern | An array of strings| The pattern for the crafting recipe. Represents rows of the crafting grid. Each row contains up to three characters, each representing an ingredient, spaces can be used to indicate an empty slot. All rows must be of the same length. |\n| key| An object| A map of characters to ingredients. Determines what the characters in pattern represent. Each key is the character which represents it, and the value being an ingredient.|\n| result| A counted result | The result of the recipe|\n\n\n\nIf the rows are less than three characters long, or there are fewer than three\nrows, the recipe can be moved around the crafting grid. Recipes with two or\nfewer rows and columns can be crafting in the 2x2 crafting grid in the\ninventory.\n\n\n\n\n\nThis can be a bit hard to understand from the description; it may be helpful to\nread the example to understand it better.\n\n\n\ncrafting_shapeless fields\n\nThese fields are present in shapeless crafting recipes.\n\n| Field| Format| Description|\n| ------------- | -------------------------------------- | ------------------------------------------ |\n| ingredients | An array of ingredients | The ingredients needed to craft the recipe |\n| result| A counted result| The result of the recipe|\n\ncrafting_special_* fields\n\nThe crafting_special_* recipes don't have extra fields, but there are many\npossible values of the type field which count as special crafting recipes.\nPossible special recipes:\n\n| Recipe Type| Description|\n| ------------------------------------- | --------------------------------------------------- |\n| crafting_special_armordye| The recipe for dyeing leather armor|\n| crafting_special_bannerduplicate| The recipe for copying banners|\n| crafting_special_bookcloning| The recipe for copying written books|\n| crafting_special_firework_rocket| The recipe for crafting firework rockets|\n| crafting_special_firework_star| The recipe for crafting firework stars|\n| crafting_special_firework_star_fade | The recipe for adding fade colors to firework stars |\n| crafting_special_mapcloning| The recipe for copying maps|\n| crafting_special_mapextending| The recipe for extending maps|\n| crafting_special_repairitem| The recipe for repairing items with durability|\n| crafting_special_shielddecoration| The recipe for adding banners to shields|\n| crafting_special_tippedarrow| The recipe for adding potion effects to arrows|\n\ncrafting_transmute fields\n\nThese fields are present in crafting transmute recipes.\n\n| Field| Format| Description|\n| ---------- | ----------------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| input| An ingredient| The item to be transmuted. This item's components will be preserved|\n| material | An ingredient| The item used to transmute the input|\n| result| A counted result | The id of the resulting item. This will copy the components of the input item if they weren't overwritten. |\n\n\n\nIf the rows are less than three characters long, or there are fewer than three\nrows, the recipe can be moved around the crafting grid. Recipes with two or\nfewer rows and columns can be crafting in the 2x2 crafting grid in the\ninventory.\n\n\n\n\n\nThis can be a bit hard to understand from the description; it may be helpful to\nread the example to understand it better.\n\n\n\nSmithing fields\n\nThese fields are present in smithing_transform and smithing_trim recipes.\n\n| Field| Format| Description|\n| ---------- | ----------------------------------- | ---------------------------------------------------------------------------------------- |\n| template | An ingredient| The item to be used as the template in the recipe|\n| base| An ingredient| The base item to be upgraded or trimmed|\n| addition | An ingredient| The item used to upgrade or trim the base|\n| pattern| A smithing trim pattern ID| The smithing trim pattern applied in the recipe, only present in smithing_trim recipes |\n| result| A counted result | The result of the recipe, only present in smithing_transform recipes|\n\nstonecutting\n\nThese fields are present in stonecutting recipes.\n\n| Field| Format| Description|\n| ------------ | ----------------------------------- | ----------------------------- |\n| ingredient | An ingredient| The ingredient for the recipe |\n| result| A counted result | The result of the recipe|\n\nCommon data structures\n\nThis is a list of common data structures used in different recipe formats.\n\nIngredient\n\nRepresents possible ingredients for a recipe. Can be an item's\nresource location, the hash-prefixed\nresource location of an item tag (e.g. #minecraft:logs), or an array of valid\nitem resource locations.\n\n\n\nUnfortunately, components cannot be detected for recipe ingredients\n\n\n\nSingle result\n\nRepresents a single item, the result of a recipe. An object containing:\n\n| Field| Format| Description|\n| ----------------------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| id| A string| The id of the resulting item|\n| components (optional) | An object | A map of component names to values, which add to or replace the components of the resulting item |\n\nCounted result\n\nRepresents the result of a recipe. A single result, with an\noptional count field, an integer specifying the count of the resulting item.\nIf not included, the count defaults to 1.\n\nExample\n\nThis file adds a shaped crafting recipe to craft bedrock out of beds and rock\n(stone).\n\nThis file should be placed in the data/ /recipe folder.\n\n\n\nminecraft:beds is an item tag provided by Minecraft\ncontaining all colors of beds.\n\n\n\n{\n\"type\": \"minecraft:crafting_shaped\",\n\"pattern\": [\n\"_\",\n\" X \",\n\"_\"\n],\n\"key\": {\n\"_\": \"#minecraft:beds\",\n\"X\": \"minecraft:stone\"\n},\n\"result\": {\n\"id\": \"minecraft:bedrock\"\n}\n}","description":"Recipes are files which define crafting recipes in-game.","url":"/wiki/files/recipes/","tags":[]},{"title":"All Commands List","content":"List of all commands\n\nThis is a list of all commands along with what they do basically, organised by\npermission level.\n\nSyntax\n\nWe use the following syntax to make it easier to understand which arguments are\nneeded.\n\n| Variable| Meaning|\n| ------------------------ | ---------------------------------------------------------------------------------- |\n|| An argument.|\n|]| An optional entry.|\n|| Pick one of these. This is required.|\n| [entryA│entryB│entryC] | Pick one of these. This is optional.|\n| ...| Some syntax is left out, you can find more about the command on its dedicated page |\n\nCommon Parameters\n\nParameters that show up commonly\n\n| Variable| Meaning|\n| ----------- | -------------------------------------------------------------------------- |\n| target(s) | A [Target Selector. |\n| range| A Range.|\n| time| Indicates time (1s = 1 second, 1t = 1 game tick)|\n\nList of commands by Permission Level\n\nPermission level 0\n\nThese commands can be run by any player, no matter their permission level.\n\n/help command] - Shows the help menu for commands\n/list [uuids] - Lists players on the server\n/random- Creates a random value (requires\nPermission Level 2+)\n/seed - Displays the world's seed, permission level 0 only in singleplayer\n/teammsg- Sends a message to all players in the same team of the\ncommand runner. (Alias /tm)\n/me- Displays: *in chat\n/msg- Sends a private message to a player. (Alias\n/tell and /w)\n/trigger [add|set - Triggers a scoreboard objective\n(see Scoreboards)\n\nPermission level 1\n\nThere are currently no commands with the permission level 1 in Java Edition.\n\nPermission level 2\n\nThese commands require a permission level same or bigger than 2 to run them.\n\n/advancement-\nGives, removes or checks players advancements\n/attribute get|base|modifier|reset ... - Can change or\nread attributes. See more on the\nMinecraft Wiki\n/bossbar list|add|remove|set|get] ... - Changes or creates bossbars\n/clear [] - Clears items from the players\ninventory\n/clone ... | from ...> -\nCopies blocks in an area from one place to another, or from one dimension to\nanother\n/damage [ |by-\nDamages selected entities/players.\n/data... - Changes block entity or entity NBT\ndata. See more on its dedicated page.\n/datapack disable |enable |list available|enabled]|create-\nEnables, disables or creates a datapack\n/defaultgamemode- Sets the default\ngamemode of a world\n/dialog |clear- Shows and hides\n[dialog screens from players\n/difficulty peaceful|easy|normal|hard] - Sets or gets the difficulty of a\nworld\n/effect |give|infinite]> -\nChanges the entity's active effects\n/enchant [ ] - Adds enchantments onto held\nitem. (Note that you can't enchant items with a level higher than what is\npossible in survival)\n/execute ... - Executes a different command (See more here:\n[/execute)\n/experience ... - Adds, removes or gets the\nplayers experience points. (ALIAS: /xp)\n/fill destroy|hollow|keep|outline|replace [filter]] -\nFills the defined region with selected blocks\n/fillbiome [replace [filter]] - Fills the\ndefined region with a specific biome\n/forceload add [ ]- Forces chunks to be\nloaded constantly\n/function |with |entity |storage [ ] -\nTriggers a [function\n/gamemode] - Changes or checks the player's gamemode\n/gamerule [ ] - Changes or checks a gamerule\n/give [ ] - Gives an item to the player\n/item |entity ... - Modifies\nor copies items from inventories of entities/blocks\n/kill [ ] - Kills selected entities\n/locate- Displays the coordinates or returns the\ndistance of the nearest biome, structure or point of interest.\n/loot |insert |spawn |replace |kill |mine ...> ... -\nSpawns or inserts the selected loot table into an inventory or the world\n/particle [] -\nSpawns a selected particle with specified parameters\n/place... - Places a structure, a\nfeature, a structure template or a template pool on a selected location\n/playsound [-\nPlays a specified sound to a player\n/random... - Rolls a random number\n/recipe- Gives or takes recipes from a\nplayer\n/reload - Reloads all datapacks in a world. (If there is an error in any of\nthe files, it won't reload it)\n/return |fail|run- Returns a number from a function, while\nalso stopping it\n/ride |dismount> - Make an entity ride or dismount\na different entity\n/rotate]>> -\nUsed to rotate an entity, works similarly to /teleport but doesn't dismount\nthe entity it's riding.\n/say- Sends a message into chat to all players\n/schedule [append|replace]|clear-\nSchedules a function or clears it. Note that this will not transfer over\nselectors\n/scoreboard... - Manages\n[scoreboard objectives and players\n/seed - Displays the world's seed, permission level 2 only in multiplayer.\n/setblock destroy|keep|replace] - Changes or replaces a\nspecified block with a different one\n/setworldspawn [- Sets the world's spawn\n/spawnpoint] - Changes the spawn point for a\nplayer\n/spectate [ ] - Makes a player spectate an entity, note that\nthe spectator has to be in spectator mode\n/spreadplayers [under ]-\nTeleport entities randomly across a specified area\n/stopsound [- Stops any playing sound\n/summon- Summons an entity\n/tag add |remove | list - Adds, removes or lists\nentities tags\n/team... - Modifies and creates\nteams\n/teleport] |facing [ ]>]> ... -\nTeleport entities to a specified location. (ALIAS: /tp)\n/tellraw- Sends a JSON message to players\n/time |query |set-\nControls or checks the time\n/title (times clear|reset|title |subtitle |actionbar ) -\nDisplays text on the player's screen\n/weather weather [ ] - Changes the weather\n/worldborder add|center|damage|get|set|warning ... - Controls the\nworldborder\n\nPermission level 3\n\nThese commands require a permission level same or bigger than 3 to run them.\n\n/ban [ ] - Adds the player's profile into the server's\nbanlist\n/ban-ip [ ] - Adds the player's IP address into the server's\nbanlist\n/banlist [ips|players] - Displays the server's banlist\n/debug- Starts or stops a debug\n/deop- Removes a player operator status\n/kick [ ] - Kicks a player off a server. (Note, a player in\nsingle player / the host of the world can't be kicked!)\n/op- Makes a player operator\n/pardon- Removes player's profile from the server's banlist\n/pardon-ip- Removes player's IP address from the server's banlist\n/tick |freeze|unfreeze|step [|stop]|sprint [|stop]> -\nControls or checks the tick rate of a world\n/transfer [- Transfers a player to a\ndifferent server\n/whitelist... - Modifies the server's\nwhitelist\n\nPermission level 4\n\nThese commands require a permission level same or bigger than 4 to run them.\n\n/jfr start|stop - Starts or stops JFR(Java FlightRecorder & other custom\nevents) profiling\n/perf- Captures info and metrics about the game for 10 seconds\n/publish] - Opens a singleplayer\nworld to your local network\n/save-all [ ] - Saves the server to a disk\n/save-on - Enables automatic server saves\n/save-off - Disables automatic server saves\n/setidletimeout- Used to set the time before idle players are\nkicked (If 0 - disabled)\n/stop - Stops the server\n/version - Sends the server's version info (the name, protocol version and\nthe resourcepack and datapack formats).\n\nList of commands by Server Type\n\nMultiplayer Only Commands\n\nThese commands can only be run only on a server.\n\n/ban [ ] - Adds the player's profile into the server's\nbanlist\n/ban-ip [ ] - Adds the player's IP address into the server's\nbanlist\n/banlist [ips|players] - Displays the server's banlist\n/deop- Removes a player operator status\n/op- Makes a player operator\n/pardon- Removes player's profile from the server's banlist\n/pardon-ip- Removes player's IP address from the server's banlist\n/perf- Captures info and metrics about the game for 10 seconds\n/save-all [ ] - Saves the server to a disk\n/save-on - Enables automatic server saves\n/save-off - Disables automatic server saves\n/setidletimeout- Used to set the time before idle players are\nkicked (If 0 - disabled)\n/stop - Stops the server\n/transfer [- Transfers a player to a\ndifferent server\n/whitelist... - Modifies the server's\nwhitelist\n\nSingleplayer Only Commands\n\nThis command can only be run in singleplayer, not on a server.\n\n/publish[ ] - Opens a singleplayer\nworld to your local network","description":null,"url":"/wiki/command/all/","tags":[]},{"title":"/execute","content":"/execute command\n\nThe execute command is used to execute other commands conditionally, or in a\ndifferent context. The execute command is made up of multiple subcommands, which\ncan be chained repeatedly and in any order to modify context in various ways.\n\nEach subcommand has its own syntax, and most allow/require another subcommand to\nfollow.\n\nContext\n\nEvery command is executed in a context. Various execute subcommands can modify\nthe context in which other commands are run. The context includes:\n\nPosition: The position at which the command is executed (the origin of\nrelative coordinates)\nAnchor: Either eyes or feet. Specifies the origin of local coordinates to\neither the eyes or feet of an entity.\nExecutor: The entity executing the command (which entity the @s selector\nrefers to)\nRotation: The rotation of the command\nDimension: The dimension in which the command is executed\n\nForking\n\nSome subcommands can split the command execution into multiple branches. This\nis called forking. This means any subcommands that follow will be executed\nmultiple times, once for each branch. Minecraft will finish executing all\nsubcommands in the first branch before moving on to the next.\n\nFor example, if there are two markers A and B, and the following command is run:\nexecute as @e[type=marker] run function example\nAnd the example function contained the following commands:\n\nsay first command\nsay second command\n\nThe chat output would look like this:\n\n[A] first command\n[A] second command\n[B] first command\n[B] second command\n\nSubcommands\n\n\n\nIn this documentation, ... represents another required subcommand, and [...]\ndenotes that another subcommand is optional.\n\n\n\nexecute align...\n\nThe align subcommand aligns the executing position to the specified axes\n(rounding down coordinates to integers).can be any subset of xyz, in\nany order.\n\nExamples:\n\nexecute align xz ...\nexecute align yxz ...\n\nexecute anchored (eyes|feet) ...\n\nChanges the execution anchor to the eyes or feet of the entity.\n\nExamples:\n\nexecute anchored eyes ...\n\n\n\nWhen the position is changed not relative to the player, it resets back to feet.\nYou can lock this though by using positioned ^ ^ ^ after it.\n\n\n\nexecute as...\n\nChanges the executor of the following subcommand to(Does not modify\nany other context such as location).\nIfrefers to multiple entities, the following subcommand gets\nexecuted once for each referenced entity, with that entity as the executor.\nIfrefers to no entities, the execute chain terminates and no further\nsubcommands are run.\n\nExamples:\n\nexecute as @a[distance=10..] ...\nexecute as @e[type=pig] ...\n\nexecute at...\n\nChanges the position and rotation of the following subcommand to that of\n(Executor remains the same).\nForking rules apply the same as execute as.\n\nExamples:\n\nexecute at @s ...\nexecute at @p ...\n\nexecute facing...\n\nChanges the rotation of the following subcommand to face.\ncan either be a set of coordinates, or\nentity (eyes|feet), which targets the eyes or feet of the given\nentity.\n\nExamples:\n\nexecute facing 0 0 0 ...\nexecute facing entity @e[type=marker,limit=1] feet\n\nexecute in...\n\nChanges the dimension of the following subcommand to.\nApplies dimension scaling, meaning coordinates are divided by 8 when\ntransferring from the overworld to the nether.\n\nExamples\n\nexecute in minecraft:nether ...\n\nexecute on...\n\nChanges executor to other entities based on their relation with the current\nexecutor. Same forking rules apply as execute as.\nPossible values forare:\n\nattacker - The most recent entity to damage the current entity in the last 5\nseconds.\ncontroller - The entity which is riding and in control of the current\nentity.\nleasher - The entity holding the the current entity on a lead.\norigin - The entity the current entity originated from, such as the player\nthat shot an arrow.\npassengers - All entities riding the current entity (not including entities\nriding the passengers).\ntarget - The entity the current entity is trying to attack (angry at).\nvehicle - The entity that the current entity is riding.\n\nExamples\n\nexecute on passengers ...\nexecute on target ...\n\nexecute positioned...\n\nChanges the position (but not rotation) of the following subcommand to\n . Also resets anchor.\ncan be a set of coordinates, as , or\nover .\npositioned as... is equivalent to at..., except that it\ndoesn't change rotation or dimension.\npositioned oversets the y coordinate of the position to be one\nabove the specified heightmap.\n\nExamples:\n\nexecute position0 -10 ...\nexecute positioned as @s ...\nexecute over world_surface ...\n\nexecute rotated...\n\nChanges the rotation of the following subcommand to.\ncan either be rotation coordinates, or as , which changes\nthe rotation to that of the specified entity. For rotated as , forking\nrules apply the same as as entity.\n\nExamples:\n\nexecute rotated ~10 0 ...\nexecute rotated as @e[tag=rotate] ...\n\nexecute summon...\n\nSummons the specified entity at the current position, and executes the following\nsubcommand as that entity.\nNote: You cannot specify NBT data for the summoned entity.\n\nExamples:\n\nexecute summon iron_golem ...\nexecute summon marker ...\n\nexecute run \n\nRuns the specified command with the current context. Takes no further\nsubcommands.\n\n\n\nThis is useless by itself, and should always be preceded by other subcommands.\n\n\n\nExamples:\n\nexecute run say hi\nexecute at @e[type=sheep] run setblock~ stone\n\nexecute store (result|success)...\n\nStores an integer value somewhere. If storing result, this numeric value is\ntaken from the output of the final subcommand (Either a run subcommand or a\ncondition). If storing success, the value is either 1 if the final\nsubcommand succeeds (condition passes or command successfully performs its\nfunction), or 0 otherwise.\n\ntarget can be one of the following:\n\nblock : Stores the value in the\nspecified path of the given block in the format specified by type (Any\nnumeric NBT type), and multiplied by scale. Note: Even if type is a\ndecimal type (float or double), the value is still rounded down.\nentity : Stores the value in the specified\npath of the target entity, the same way as block. entity must only refer\nto a single entity.\nstorage : Stores the value in the given\npath of the target storage in the same way as block and entity.\nscore : Stores the value for the target entity in\nthe provided scoreboard. target can refer to more than one entity.\nbossbar (value|max): Stores the value in a bossbar, changing either\nthe current value or the maximum value.\n\nExamples:\n\nexecute store result entity @s Pos[1] double 1.5 ...\nexecute store success score $foo my_objective ...\nexecute store result bossbar foo_bar value ...\n\nexecute (if|unless) [...]\n\nExecutes the following subcommand under a given condition. unless inverts the\ncondition, meaning the chain only continues if the condition not met.\n\nPossible values for condition:\n\nbiome : Checks whether a specific biome is at the given\nposition.\nblock : Checks whether the given position is a certain\nblock.\nblocks (all|masked): Compares two volumes of\nblocks: from start to end, and from destination such that the second\nvolume is the same dimensions as the first. If all is specified, it checks\nall blocks. If mask is specified, air blocks are ignored.\ndata (block|entity|storage) : Checks if the specified\npath matches the NBT data of target.\ndimension : Checks if the execution is in the specified\ndimension.\nentity : Checks whether target resolves to one or more\nentities.\nfunction : Runs the specified function and tests the return\nvalue. If the function did not run the return command, or if it returns\nzero, the condition is not met. Must be followed by another subcommand.\nitems (block|entity) : Checks if the given item\nmatches the specified slot of the target block or entity. item is in the\nformat[ ].\nloaded : Checks if the specified position is loaded.\npredicate : Checks whether a predicate succeeds.\nscore (matches | ):\nChecks whether a score is within a range (matches), or has a specified\ncomparison to another score. operator can be on of:=,\n>.\n\nExamples:\n\nexecute if biome~ minecraft:snowy_taiga ...\nexecute if block 16 -42 83 #minecraft:logs ...\nexecute if blocks10 10 10 0 64 0 all ...\nexecute if data storage example:store path{thing:1} ...\nexecute if dimension minecraft:the_end ...\nexecute if entity @e[tag=existent] ...\nexecute if function example:my_fn ...\nexecute if items entity @s weapon.mainhand #minecraft:swords[minecraft:custom_data={foo:\"bar\"}] ...\nexecute if loaded 0 0 0 ...\nexecute if predicate example:check ...\nexecute if score @s score = @r score ...","description":"The execute command is used to execute other commands conditionally, or in a different context. The execute command is made up of multiple subcommands, which can be chained repeatedly and in any order to modify context in various ways.","url":"/wiki/command/execute/","tags":[]},{"title":"/function","content":"/function command\n\nThis command runs any .mcfunction file when called. You can also pass in a NBT\ncompound or NBT source path if the function is a macro function. All functions\nare run independently and one after another - for example, if you run\nfunction1 and then function2, then function2 will only run once\nfunction1 has finished.\n\nSyntax\n\nfunction : : Runs the .mcfunction file at\ndata/ /function/ \nfunction : {key:value}: Runs the .mcfunction file\nat data/ /function/ , and uses the {key:value} if the\nfunction is a macro function.\nfunction : with (block |entity |storage ) :\nRuns the .mcfunction file at data/ /function/ , and\nuses the NBT source if the function is a macro function.\n\n\n\nYou can stop a function running in real-time using the return command.\n\n","description":"This command runs any `.mcfunction` file when called. You can also pass in a NBT compound or NBT source path if the function is a macro function. All functions are run independently and one after another - for example, if you run `function1` and then `function2`, then `function2` will only run once `function1` has finished.","url":"/wiki/command/function/","tags":[]},{"title":"/data","content":"/data command\nThe /data command is used to modify and fetch NBT data of blocks, entities and storages.\n\n\n\nPlayer data cannot be modified using commands. All subcommands fail when trying\nto modify player data.\n\n\n\nSubcommands\n\nget path\nGets the data from a data source, and a path, if specified. Multiplies the resulting value by scale, if specified.\nsource is a data source, path is an nbt path and scale is a number.\nIf scale is set, and the data at that path it not a number, the command fails.\n\nAfter fetching the NBT at the path, if it exists, it prints the data in SNBT format in the chat. Therefore, its main use is manually inspecting NBT data. However, it also returns the integer representation of the fetched data, so it can be used in combination with execute store or return run to convert NBT into an integer.\n\nExamples\n\ndata get entity @s SelectedItem.id data get block~ Items\n\nmerge \n\nMerges data with the given data source.\ntarget is a data source and nbt is an SNBT compound.\nThis command fails if the given entity or block does exist, or if the block is not a block entity and cannot hold NBT data. However, if the data source is a storage, and that storage does no exist yet, the storage is automatically created. \n\nExamples\n\ndata merge entity @ntype=creeper] {Fuse: 10s, ignited: true, ExplosionRadius: 8}\ndata merge storage example:data {a: 1, b: \"b\", c: [41b, 0b]}\n\nmodify \nModifies the NBT data at the specified path of the given data source. This gives more fine-grained control that data merge.\ntarget is the [data source to modify and path is an NBT path, the specific sub-path of that data source.\naction determines what kind of modification occurs. There are 5 possible actions, as below.\nsource determines the source of the data being used to modify the target. See source below.\n\nappend\nAppends an NBT value to a list or a typed array, making the value the last element.\nIf the specified path does not exist in the data source, it is created and initialized as a list containing the value just appended.\nThis is equivalent to data modify ... insert 0 ....\n\ninsert \nInserts an NBT value into a list or array at a specific index, shifting all proceeding elements to the right. Negative indices may be used to indicate inserting values from the end.\nIf the index specified would cause the inserted item to be further than one after the first or last element of the list, the command fails.\nInserting creates list if it doesn't exist in the same way as append.\n\nmerge\n\nMerges source into target at path. This is similar to\ndata merge, but allows modifying a sub-path of a data source, and allows\nmerging from more than just hardcoded NBT values.\n\nprepend\nPrepends an NBT value to a list or a typed array, making the value the first element.\nLists are created in the same wat as append.\nThis is equivalent to data modify ... insert -1 ....\n\nset\n\nSets the value of target at path, discarding any previously present value.\nThis will create keys in a compound if not present, but cannot be used to add\nelements to an array or list, only modify existing ones.\nset can create a chain of nested compounds if they don't already exist.\nFor example, if the storage example:main does not yet exist, after the\nfollowing command:\n\ndata modify storage example:main a.b.c.d set value 10\n\nThe example:main storage looks like this: {a: {b: {c: {d: 10}}}}.\n\nsource\n\nsource determines the value modifying target. It can be one of:\n\nvalue- Gets the value from an SNBT literal.\nfrom path] - Gets the data from the specified [data source and path.\nstring path end] - Gets the data from the specified [data source and ensures that it's a string. If start or end is specified, truncates the string using those values. start is inclusive, while end is exclusive. Both numbers are allowed to be negative, counting from the end of the string. For example, the indices 1 -1 remove one character from each end of the string, while 0 1 takes the first character.\n\nremove \nRemoves the NBT data from source at path. source is a data source and path is an NBT path.\nThis deletes compound keys, and removes array and list elements, shifting proceeding elements left. It cannot, however, be used to delete an entire storage using the special {} path; only single keys of the root storage.\n\n\n\nIf you would like to be able to remove an entire storage in one go, put all your\nNBT data in a sub-path of it, for example:\n\ndata modify storage example:main temp.a set value 1\ndata modify storage example:main temp.b set value 2\nRemoves both keys\ndata remove storage example:main temp\n\n\n\nData source\n\nThe place to get data from or store data to. One of:\nentity- The NBT of an entity.\nblock- The NBT of a block entity.\nstorage- The NBT from a data storage.\n\nData merging\n\nData merging is a process of merging two data values into one another.\nThere are two values: The left side and the right side. The left side is the\nbase of the operation, with the right being merged into the left.\n\nIf both sides of the operation are compounds, each key of the right compound is\nmerged into the matching key of the left compound. If the key does not exist in\nthe left compound, it is created and set to the value of the right.\n\nIf both sides are not a compound, the left is simply set to the right.","description":"The data command is used to modify and fetch NBT data of blocks, entities and storages.","url":"/wiki/command/data/","tags":[]},{"title":"/summon","content":"/summon command\n\nThe /summon command is used to summon an entity at a position, along with any\nentity NBT.\n\nSyntax\n\nThe syntax of the /summon command is as follows:\n\nsummon position\n\n : an ID of a minecraft entity. For example: minecraft:cow, marker, zombie. If the namespace\n(minecraft:) is omitted, it will default to the minecraft namespace.\nposition] (optional): the [coordinates at which the entity should be spawned.\n(Defaults to the current position).\nnbt data] (optional): a compound containing the NBT (in [SNBT format) which the entity should be\nspawned with. For example: {NoAI:1b}.\n\nExamples\n\nsummon minecraft:cow - Summons a cow at the current position.\nsummon minecraft:ender_dragon50 ~ - Summons an ender dragon 50 blocks\nabove the current position\nsummon minecraft:wither 29 372 121 - Summons a wither at the coordinates\nx=29, y=372, z=121\nsummon minecraft:zombie~ {NoAI:1b} - Summons a zombie at the current\nposition with the NoAI NBT, meaning it will not move around or attack\nplayers.\n\nAlternatives\n\nThe execute summoncommand can also be used to summon an entity. Using this\nexecute subcommand will summon an entity at the current position, and then run the specified\ncommand as the newly summoned entity.\n\nHowever, execute summon cannot provide any NBT to give the entity upon being\nspawned. You will have to edit the nbt in the command/function which is\nexecuted, which can be a bit tedious. An alternative to\nexecute summon minecraft:cow run function custom_function would be the\nfollowing:\n\nsummon minecraft:cow~ {Tags:[\"newly_summoned_cow\"]}\nexecute as @n[type=cow,tag=newly_summoned_cow] at @s run function custom_function\ntag @n[type=cow,tag=newly_summoned_cow] remove newly_summoned_cow","description":"The /summon command is used to summon an entity at a position, along with any entity NBT.","url":"/wiki/command/summon/","tags":[]},{"title":"JSON","content":"JSON Format\nJSON is a data storage type used by Minecraft Datapacks for files such as predicates and tags, as well as in Styled Text. JSON is a way of storing data, usually used in .json files but is also seen in .mcmeta files too.\n\nHow JSON works\n\nJSON stands for JavaScript Object Notation. It was originally created as a\nway of writing objects in Javascript. These days, JSON is used in almost every\nprogramming environment, datapacks included.\n\nJSON is a way of storing information so that both a computer and a human can\nunderstand it. It stores data as key-value pairs - this means that a key\n(such as name) can store any value (such as Aron Aronson). The code can ask\nfor name, and it will get the result Aron Aronson.\n\nA .json file usually is itself just a JSON object (aka a JSON dictionary). A\nJSON dictionary is like a real dictionary because it holds sets of key/value\npairs - just like how a dictionary consists of word/definition pairs. In a JSON\ndictionary, the key and value are separated by a colon (\"key\":value), and each\nkey/value pair is separated by a comma.\n\nExample JSON\n\n{\n\"name\": \"Aron Aronson\",\n\"age\": 83,\n\"alive\": true,\n\"family_members\": \"James Aronson\", \"Catherine Aronson\"],\n\"login_details\": {\n\"email\": \"aron.aronson@gmail.com\",\n\"password\": \"MyNameIsAron12345\"\n}\n}\n\nAn explanation of this file:\n\nEverything is contained within curly brackets {...}, which means that the\nwhole file is a JSON dictionary.\nThe first key/value pair is \"name\":\"Aron Aronson\". The key here is name,\nand it has a string (text) value: \"Aron Aronson\"\nThe second key/value pair is \"age\":83. The key here is age, and it has a\ninteger (whole number) value of 83. The number isn't \" signs, because\nif a value is in \" signs, it is considered to be text.\nThe third key/value pair is \"alive\":true. The key here is alive, and it\nhas a boolean (true/false) value of true.\nThe fourth key/value pair is \"family_members:[...]\". The key here is\nfamily_members, and it has a list value (indicated by the square\nbrackets []). This list has two string (text) values. The list does\nnot contain key/value pairs, just values.\nThe final key/value pair is \"login_details\":{...}. The key here is\nlogin_details, and it has a dictionary value. The dictionary itself\ncontains two key/value pairs.\n\nNote that the key in a key/value pair is contained within \" signs - don't\nconfuse this with the string data type seen in the first key/value pair. The key\nis always on the left of the colon, and is always in \" signs. The\nvalue is always on the right of the colon, and should only use \" signs if\nit is a text value.\n\nTypes of values\n\nYou can use the following data types for JSON values:\n\nString (e.g \"Hi! I am text\"): A string is plain text. Everything inside\nthe string should be contained within \" or ' signs. If you want to use one\nof those signs within the string without making the computer think the string\nhas ended, put a \\ before the character (e.g \"Dave said \\\"Hello\\\".\")\nInteger (e.g 42): An integer (often called an int) is a whole number.\nThis is also often used to store date and time values (seconds since\nJan 1 1970)\nFloat (e.g 12.5): A float (short for \"floating point number\") is any\ndecimal number. The decimal point needs to be a . symbol.\nBoolean (e.g true or false): A boolean is either true or false. In\nsome circumstances, these are just easier ways to write 1 or 0.\nList (e.g [123, \"hello\", 456, \"goodbye\"]): A list is an ordered\ncollection of values (not key/value pairs). List items should be contained\nwithin square brackets ([]) and separated with a comma. Confusingly, the\nfirst item in a list is \"item 0\", the second one is \"item 1\", etc.\nDictionary (e.g {\"name\":\"Aron\", \"age\":94}): A dictionary contains\nkey/value pairs, separated by commas. The key needs to be inside \" signs,\nand followed by a colon.\n\nJSON Paths\n\nA JSON path is basically the address of a specific value within a JSON\nstructure. Nested dictionaries (if the value of a key is a dictionary) are\nseparated by . signs, otherwise it's pretty straightforward how they work.\n\nIf we assume that root contains the entirety of the example file (remember\nthat the contents of the file itself is just a JSON dictionary), then the\nfollowing paths can be used:\n\nroot.name would return \"Aron Aronson\"\nroot.alive would return true\nroot.family_members[0] would return \"James Aronson\" (the first item in the\narray)\nroot.login_detiails.password would return \"MyNameIsAron12345\"\n\nIn datapacks, you will not use JSON paths often, but you will use\n[NBT paths, which are very similar.\n\n\n\nThe format for paths above is only the most commonly seen path format. Other\nlanguages, such as Python, use a different format, such as:\n\nroot\"login_details\"","description":"A rough guide to the JSON format used in Minecraft Datapacks (among other places)","url":"/wiki/info/json/","tags":[]},{"title":"Breaking Changes","content":"List of breaking changes\n\nThis is list of all breaking changes to datapacks (excluding resource packs).\nSpecial thanks to\nMisode's Technical Changelog and the\nMinecraft Wiki for the source of many of these.\n\n1.21.6\n\nOther\n\nIf you are using an item which renders bigger than its inventory size is (most\nlikely for a barrel/custom GUI), it will break with this version. You can\nchange the item model to behave like previously by changing the newly added\noversized_in_gui item model field in the resource pack.\nThe sound event id block.sand.wind has been renamed to\nblock.dry_grass.ambient\nAll JSON files (in worlds, packs, configuration, etc.) are now parsed in\nstrict mode\nUsers will now be prompted for confirmation before executing a command from\nthe run_command click action in books and chat if the command requires\npermissions higher than 0. This is not a breaking change, just a warning which\nshows to the player.\n\nItem Componenents\n\nThe painting/variant component no longer accepts inline variants\n\nEntity Data\n\nThe Particle field in the area_effect_cloud entity has been renamed to\ncustom_particle, and now always functions as an exact override for the\ndefault colored entity_effect particle\n\nTags\n\nRenamed #plays_ambient_desert_block_sounds block tag to\n#triggers_ambient_desert_sand_block_sounds\n\n1.21.5\n\nYou can also watch this video from Conure covering the breaking datapack\nchanges:\nWhy Your Datapack Broke in 1.21.5\n\nOther\n\nTrim pattern and trim material items are no longer specified in the trim\nregistries, but instead in the recipes and items respectively\n🛠️ To fix this:\n1. Trim Pattern - delete the field template_item from your trim pattern\nfile, and add a new field containing your trim pattern id into your\nsmithing trim pattern recipe. See the\nSmithing Trims guide\nfor an example.\n2. Trim Material - delete the field ingredient from your trim material\nfile, and add the\nprovides_trim_material\nitem component to your item. (E.g.\nbarrierprovides_trim_material='minecraft:iron']) See the\n[Smithing Trims guide\nfor an example.\nField background in advancement definition no longer contains textures/\nprefix and .png suffix\nWolf Variants\nIn the wold variants file, the fields angry_texture, tame_texture and\nwild_texture have been grouped in field assets and renamed to angry,\ntame and wild.\nAdded field spawn_conditions, which describes where the variant can spawn.\nSee more in the changelog under \"Spawn conditions\".\n\nData Types\n\nThe data format of Text Components was changed from JSON to\nSNBT.\nWith that, all the special formats and values were changed. You can read\nmore about it on the changelog.\nFor example, minecraft:custom_name=\"{\"text\":\\\"Renamed item\\\"}\" is now\nminecraft:custom_name={text:'Renamed item'}. Or the previous\n/tellraw @s \"\"text\":\"Hello world\"\" is now\n/tellraw @s {text:'Hello world'}\n\nTags\n\nRemoved #default_spawns and #full_moon_spawns in cat variant tags\nRenamed #dead_bush_may_place_on block tag to #dry_vegetation_may_place_on\n\nEntities & Entity Data\n\nThe potion entity type has been split into splash_potion and\nlingering_potion\n\nA lot of fields will no longer be preserved, or have been removed (You can see\nthem all on https://www.minecraft.net/en-us/article/minecraft-snapshot-25w07a)\nThe ArmorDropChances, HandDropChances, and body_armor_drop_chance fields\nhave been merged into a drop_chances field.\nThe format is a list of equipment_slot:value variables. E.g.\ndrop_chances:{chest:0.1,feet:1.0}\nAnd drop chances with a default value are no longer stored. The\ndrop_chances field is removed entirely if all defaults.\nThe ArmorItems, HandItems, and body_armor_item fields have been merged\ninto an equipment field\nThe format is a list of equipment_slot:item_stack variables. E.g.\nequipment:{chest:{id:'minecraft:diamond_chestplate'}}.\nThis affects all mobs and Armor Stands, but not players.\nThe format of saddles has been unified between mobs, becoming a new equipment\nslot, stored in the equipment.saddle field.\nThis is a pure rename from the previous SaddleItem in horse-like mobs. In\nstriders and pigs this replaces the old Saddle boolean.\nThe Saddle dropping on death is now affected by the drop_chances field.\nThe FallDistance field has been changed from float to double and is now\ncalled fall_distance\nThe armor and off-hand equipment of Players is now also stored in the\nequipment field _(although items written into the Inventory using armor and\noff-hand slot numbers still work)_\nPos, Motion, and Rotation values without the correct number of\ncomponents (3, 3, and 2 respectively) will now be fully discarded, instead of\nonly selecting the specified components\nThe SleepingX, SleepingY, and SleepingZ fields have been merged into a\nsingle sleeping_pos field (e.g. sleeping_pos: I;1,2,3])\nBlock States in the entity data of Arrows, Minecarts, Block Displays,\nEndermen, Falling Blocks, Primed TNT, or Piston Moving Blocks are no longer\nallowed to be specified as an empty object\n\nLots of entity and block entity data fields now have a new default value. Click to see them all\n\nEntity Data\n\ncreeper - Fuse defaults to 30; ExplosionRadius defaults to 3;\ntnt - block_state defaults to tnt; fuse defaults to 80;\nexplosion_power defaults to 4;\ngoat - HasLeftHorn and HasRightHorn fields default to true;\ninteraction - width and height fields default to 1;\nallay - CanDuplicate field removed (now controlled by\nDuplicationCooldown);\ncat - CollarColor defaults to 14 (red);\ndolphin - TreasurePosX, TreasurePosY, TreasurePosZ fields removed;\nMoistness defaults to 2400;\nfalling_block - BlockState defaults to sand; HurtEntities defaults to\nfalse (or true if BlockState is anvil); FallHurtAmount defaults to 0;\nFallHurtMax defaults to 40; DropItem defaults to true;\nfox - Trusted field defaults to empty;\nphantom - Size renamed to size; AX, AY, and AZ fields collected\ninto a single anchor_pos field;\nplayer - SpawnX, SpawnY, SpawnZ, SpawnAngle, SpawnDimension, and\nSpawnForced fields collected into a single respawn field;\nenteredNetherPosition renamed to entered_nether_pos;\nturtle - HomePosX, HomePosY, and HomePosZ fields collected into a\nsingle home_pos field; HasEgg renamed to has_egg;\nvex - LifeTicks renamed to life_ticks; BoundX, BoundY, and BoundZ\nfields collected into a single bound_pos field;\nwolf - CollarColor defaults to 14 (red);\narea_effect_cloud - Duration defaults to -1 (infinite);\nender_dragon - DragonDeathTime defaults to 0;\nfirework_rocket - ShotAtAngle defaults to false;\nghast - ExplosionPower defaults to 1;\nitem - Health defaults to 5; PickupDelay defaults to 0; Age defaults\nto 0;\nitem_frame and glow_item_frame - ItemDropChance defaults to 1.0;\nshulker - Color defaults to 16 (no color);\nskeleton - StrayConversionTime field removed;\nspectral_arrow - Duration defaults to 200;\nsnow_golem - Pumpkin defaults to true;\ntnt_minecart - fuse defaults to 80; explosion_power defaults to 4;\nexplosion_speed_factor defaults to 1;\ntrader_llama - DespawnDelay defaults to 47999;\nvillager - FoodLevel and Xp fields default to 0;\nwandering_trader - DespawnDelay defaults to 0;\nzombie - DrownedConversionTime field removed;\nzombie_villager - Xp defaults to 0;\narrow, spectral_arrow, trident - damage defaults to 2;\ndragon_fireball, wind_charge, breeze_wind_charge, wither_skull,\nsmall_fireball, and large_fireball - acceleration_power defaults to 0.1;\n\nsmall_fireball and large_fireball - ExplosionPower defaults to 1;\nblock_display, item_display, and text_display -\ninterpolation_duration, teleport_duration, and start_interpolation\nfields default to 0; view_range defaults to 1; shadow_radius defaults to\n0; shadow_strength defaults to 1; width and height fields default to 0;\n\nBlock Entity Data\n\ncampfire - CookingTimes and CookingTotalTimes fields removed;\nchiseled_bookshelf - last_interacted_slot defaults to -1;\nhopper - TransferCooldown defaults to -1;\njigsaw - name, target, and pool fields default to minecraft:empty;\nfinal_state defaults to minecraft:air;\nsculk_shrieker - warning_level defaults to 0;\nstructure_block - ignoreEntities and showboundingbox fields default to\ntrue; posY defaults to 1;\n\nCommands\n\nThe horse.saddle item slot has been renamed to saddle, and now supports\nany entity that can equip a Saddle.\nThe behavior of setblock and fill commands have changed in how they handle\nblock entity data:\nIf the block entity data is not specified, and the existing block has data,\nthe block entity data will be preserved\nIf the block entity data is specified, the block entity data will be set to\nthe specified value\nTo clear the block entity data explicitly, you must now specify the block\nentity data as {}\nThe operation is now successful if either the block state changed or the\nblock entity data changed\n\nItem Componenents\n\nEntities now have a set of components fro changing variants and other\napperance like stuff.\nMob buckets and paintings available in creative menu will now use new entity\nvariant components instead of\n[entity_data\ncomponent\nCustom tooltips for Bucket of Tropical Fish and Painting items are now based\non new components instead of\nbucket_entity_data\nand\nentity_data\nThe hide_additional_tooltip and hide_tooltip component were removed, and\nreplaced by the new\ntooltip_display\ncomponent. This means that all the items which used this will now need to be\nhidden using the new component.\nAll item components which had a show_in_tooltip field, had this field\nremoved. The old behaviours can be done using the new tooltip_display\ncomponent.\nIn the dyed\ncomponent, the color field now always uses its simplified form, with the rgb\nfield inlined to top-level (e.g. dyed_color={rgb:12345} →\ndyed_color=12345).\nIn the\ncan_place_on\nand can_break,\nthe predicates field has been inlined to top-level, and supports either a\nsingle element or list. (e.g.\ncan_place_on={predicates:{blocks:'stone'},{blocks:'dirt'}]} →\ncan_place_on=[{blocks:'stone'},{blocks:'dirt'}])\nThe\n[enchantments\nand\nstored_enchantments\ncomponents, will now always use their simplified form, with the levels field\ninlined to top-level (e.g. enchantments={levels:{sharpness:2}} →\nenchantments={sharpness:2})\n\nRecipes\n\nThe base ingredient field is no longer optional in the\nsmithing_transform recipe type.\nThe base, template, and addition ingredient fields are no longer\noptional in the smithing_trim recipe\ntype.\nAdded a new field pattern in the\nsmithing_trim recipe type.\n\nPredicates\n\nSome entity sub-predicates have been removed and replaced by a combination of\ncomponents predicate and variant entity components\nThese include: axolotl, fox, mooshroom, rabbit, horse, llama,\nvillager, parrot, salmon, tropical fish, painting, cat, frog,\nwolf, pig\nField color has been removed from minecraft:sheep sub-predicate\nThe stepping_on entity predicate can now only evaluate to true if the entity\nis on ground\n\n1.21.4\n\nYou can also watch this video from Conure covering the breaking datapack\nchanges:\nWhy Your Datapack Broke in 1.21.4\n\nItem Components\n\nField model in\nequippable\ncomponent has been renamed to asset_id.\nThe dyed\ncomponent now tint's based on the model, not item ID.\nThe\ncustom_model_data\ncomponent has new fields floats, flags, strings, colors.\nItem blocks with\nblock_entity_data\ncomponent will now set block entity data only if id tag matches type of placed\nblock entity\n\nRenames\n\nThe TNTFuse field of TNT Minecarts has been renamed to fuse\nChanged some Furnace, Smoker and Blast Furnace data. From camelCase to\nsnake_case.\nRenamed CookTime to cooking_time_spent\nRenamed CookTimeTotal to cooking_total_time\nRenamed BurnTime to lit_time_remaining\n\nOther\n\nRemoved #tall_flowers block tag. And also removed the #flowers and\n#tall_flowers item tags.\nThe trail particle has a new required field: duration - Indicates, in\nticks, for how long the particles should travel to its destination.\n🎨 The item model resource pack format got completely changed, now allowing\nfor tinting, layered, conditional, and much more!\n\n1.21.2\n\nYou can also watch this video from Conure covering the breaking datapack\nchanges:\nWhy Your Datapack Broke in 1.21.2\n\nItem Components\n\nThe food item\ncomponent no longer automatically allows for consumption of food, and now only\nholds the data relating to it (meaning nutrition, saturation and\ncan_always_eat are the only fields left in the component)\n🛠️ To fix this, just add the\nconsumable\ncomponent: consumable={}. This component is very customizable, you can\nread about it\nhere.\nThe lock has been\nchanged into an item predicate, with a format of lock={ITEM_PREDICATE}\n🛠️ The previous lock=\"MyKey\" would now look like\nlock={components:{\"minecraft:custom_name\":\"'MyKey'\"}}\nThe fire_resistant component has been renamed to\ndamage_resistant,\nwith a new field\ntypes - A # damage type tag. Items in entity form or worn by players\nwith this component will be resistant to the damage types included in the\ntag.\n\nLoot Tables\n\nThe /loot command now returns an error when trying to drop from block\nwithout loot table (like air)\nThe special loot table empty has been removed.\nSheep now always use a single loot table entities/sheep, but wool drops are\nstill defined in sub-tables in entities/sheep/ \n\nOther\n\nAttribute IDs now don't have the generic., player. or zombie. prefixes\nanymore (generic.scale → scale).\nboat and chest_boat entity types have been split into separate types, one\nper variant (Type=oak → minecraft:oak_boat,...)\nWith that the minecraft:boat entity sub-predicate has been removed.\nThe previous Lock field of containers has been renamed to lock and is now\nan item predicate.\nYou now cannot ride Leash Knots, Lighting Bolts and Fishing Bobbers with\n/ride command.\nThe killed_by_crossbow advancement was renamed to killed_by_arrow, and\nwill now trigger whenever an arrow kills an entity, not just when fired from a\ncrossbow.\nRenamed effect type damage_item to change_item_damage, which now also\nsupports negative amounts.\nRemoved liquid carvers and changed biome format (the carvers field is now\njust a list of carvers)\n\n1.21\n\nYou can also watch this video from Conure covering the breaking datapack\nchanges:\nWhy Your Datapack Broke in 1.21\n\nGeneral Renames\n\nAll folders which previously had plural names (except tags) now have\nsingular names. A list of all changed folders can be found below:\nstructures → structure\nadvancements → advancement\nrecipes → recipe\nloot_tables → loot_table\npredicates → predicate\nitem_modifiers → item_modifier\nfunctions → function\ntags/functions → tags/function\ntags/items → tags/item\ntags/blocks → tags/block\ntags/entity_types → tags/entity_type\ntags/fluids → tags/fluid\ntags/game_events → tags/game_event\nThe uuid and name arguments have been replaced with a singular namespaced\nid argument.\n🛠️ For example: attribute ... modifier add 0.5 add_value\nwould now look like\nattribute ... modifier add 0.5 add_value\n\nEntity NBT\n\nEntity attribute format has changed:\nAttributes → attributes\nName → id\nBase → base\nModifiers → modifiers _(Now stores modifiers in the same format as\nmodifiers in the\nminecraft:attribute_modifiers\nitem component)_\nUUID → uuid\nName → id\nAmount → amount\nOperation → operation _(This is now a named constant instead of an\nint)_\nadd_value - now a string, previously 0\nadd_multiplied_base - now a string, previously 1\nadd_multiplied_total - now a string, previously 2\n🛠️ For example:\nsummon ... {Attributes:{Name:\"generic.scale\",Base:2,Modifiers:[{UUID:[I;1,0,0,0],Name:\"example_modifier\",Amount:1,Operation:0}]}]}\nwould now look like\nsummon ... {attributes:[{id:\"generic.scale\",base:2,modifiers:[{id:\"tutorial:example_modifier\",amount:1,operation:\"add_value\"}]}]}\nReplaced the power NBT tag with an acceleration_power tag. This controls\nthe projectile's acceleration (and maximum speed).\nThis applies to: dragon_fireball, large_fireball, small_fireball,\nfireball, breeze_wind_charge, wind_charge, wither_skull.\nThe field ShotFromCrossbow from projectile NBT has been removed. A new\nweapon field has been added to replace this feature.\n🛠️ For example: @e[type=arrow,nbt={ShotFromCrossbow:1b}] would now look\nlike @e[type=arrow,nbt={weapon:{id:\"minecraft:crossbow\"}}]\n\nTags\n\nRemoved the #minecraft:music_discs item tag\n\nPredicates\n\nSome predicate fields have been renamed:\nkiller → attacker\ndirect_killer → direct_attacker\nkiller_player → attacking_player\nThe random_chance_with_looting has been renamed (because it's now controlled\nby enchantments) to random_chance_with_enchanted_bonus. The fields were\nupdated accordingly:\nThe looting_multiplier field has been removed\nThe chance field has been removed.\nenchantment - is a new field containing the namespaced:id of the\nEnchantment that grants the bonus chance\nenchanted_chance is a new field for the chance for an enchanted item. A\nlevel-based value.\nunenchanted_chance - is a new field specifying the chance for an\nunenchanted item.\nIf you are testing for an enchantment on your item, the field enchantment →\nenchantments. Can be either an Enchantment, a list of Enchantments or an\n#Enchantment Tag.\n\nItem Modifiers\n\nThe looting_enchant field has been replaced by enchanted_count_increase.\nThis has a new field enchantment (specifies which enchantment).\nUnder enchant_randomly the field enchantments is now called options.\nUnder enchant_with_levels the field treasure was removed.\nUnder copy_name the field killer → attacking_entity and killer_player\n→ last_damage_player\n\n[1.20.2\n\nEntity effects in NBT now use namespaced IDs instead of numbers.\nThe structure for entity effects in NBT has been changed from PascalCase to\nsnake_case.\nFor mob effect instances:\nId → id\nAmbient → ambient\nAmplifier → amplifier\nDuration → duration\nShowParticles → show_particles\nShowIcon → show_icon\nHiddenEffect → hidden_effect\nFactorCalculationData → factor_calculation_data\nFor others:\nCustomPotionEffects → custom_potion_effects (potion, lingering_potion,\nsplash_potion, tipped_arrow, arrow)\nEffects → effects (suspicious_stew, area_effect_cloud)\nEffectId → id` (suspicious_stew)\nEffectDuration → duration (suspicious_stew)\nEffectId and EffectDuration → stew_effects (mooshroom)\nActiveEffects → active_effects (player, armor_stand, mobs)\nPrimary → primary_effect (beacon)\nSecondary → secondary_effect (beacon)","description":"A list of breaking changes to datapacks.","url":"/wiki/info/breaking-changes/","tags":[]},{"title":"NBT","content":"NBT\n\nNBT (Named Binary Tags) is a structured (key/value) data format used by\nMinecraft to store data about entities, items, blocks, structures, player data,\nworldgen, and more. You can use it to store custom data in items and NBT\nstorages.\n\nSNBT Format\n\nSNBT (Stringified Named Binary Tags) format is a JSON-like tree structure used\nin datapack development to manipulate the NBT data of an entity. SNBT is a\nhuman-readable version of NBT (Named Binary Tags), which is a format used by\nMinecraft to store data. NBT is used to store data about entities, items,\nblocks, structures, game saves, and more.\n\nSNBT consists of key/value pairs, which are represented as key:value.\nThese are contained with compounds, marked with curly brackets ({}).\nCompounds can contain multiple key/value pairs, which are separated with commas,\nlike so: key:value,key:value,key:value\n\nAn example SNBT structure looks like:\n{name:\"Silabear\",age:102,friends:[\"Flynecraft\",\"Aandeel\",\"Cobblestone\"],socials:{discord:\"silabear\"}}\n\nNBT paths\n\nNBT paths are used to reference a specific location within an NBT structure.\nThey are used in commands like /data get and /data modify to access or\nmodify NBT data.\n\nNBT paths are made up of a series of keys, separated by dots (.). Square\nbrackets ([]) can be used to access items in an array, either by index\narray[0] or by object value (array[{age:102}])\n\nImagine the following NBT structure:\n\n{\nroot: {\nversion: 1,\ntitle: \"Targets\",\npeople: [\n{name: \"Silabear\", age: 102},\n{name: \"Aandeel\", age: 100}\n]\n}\n}\n\nThe following are examples of NBT paths:\n\nroot.version: would give the value 1.\nroot.title: would give the value \"Targets\".\nroot.people[0]: would give the value {name: \"Silabear\", age: 102}.\nroot.people[0].name: would give the value \"Silabear\".\nroot.people[{name:\"Aandeel\"}]: would give the value\n{name: \"Aandeel\", age: 100}.\nroot.people[{name:\"Aandeel\"}].age: would give the value 100.\n\nNBT storages\n\nStorages allow you to store NBT data in a world without binding it to a physical\nobject (item, entity, block), but rather storing it under a namespaced ID (e.g\nexample:main). Storages are stored globally per world, and can only be\naccessed with /data. Storages don't need to be initialized beforehand, unlike\nscoreboards.\n\nUnlike entity and block NBT, storages have no fixed structure, and can contain\nwhichever arbitrary keys are added to it.\n\nStorage example\n\nStorages are defined when a /data command modifies them. Unlike scoreboards,\nstorages do not need to be \"created\" - the only code needed to initialize a\nstorage is a /data modify or /data merge command to that storage, for\nexample:\n\ndata merge storage example:main {number: 1, message: \"Hello!\"}\ndata modify storage example:main other_number set from storage example:main number\ndata modify storage example:main compound.array append value 42\n\nThe example:main storage would now contain the following data:\n\n{\nnumber: 1,\nmessage: \"Hello!\",\nother_number: 1,\ncompound: {\narray: [42]\n}\n}\n\nData Types\n\nThere are a few data types you can use to represent different types of data,\nincluding whole numbers, decimal numbers, string, text, booleans, and more.\n\nStrings\n\nStrings can store any text value, or more technically, any sequence of unicode\ncharacters.\n\nFormat: Strings are stored within either double or single quotes. For\nstrings containing standard characters (A-Z, a-z, 0-9, -,_,+,.), the quotes\nare optional (as long as the text starts with a letter), but recommended.\n\"\" or ' ' or\n\nExample: name:\"Silabear\", name:'Cobblestone', name:Aandeel\n\nWhole Numbers\n\nShort, Int, and Long data types all represent integers (whole\nnumbers).\n\nByte is an 8 bit integer, it can be any value from 0 to 255\nShort is a 16 bit integer, it can be any value from -32,768 to 32,767\nInt is a 32 bit integer, it can be any value from -2,147,483,648 to\n2,147,483,647\nLong is a 64 bit integer, it can be any value from\n-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\n\nFormat: By default, numbers are stored as integers. To store a number in the other formats, you need to use the appropriate suffix. For shorts, ints, and longs, the suffixes are s, i, and l respectively.\n\nThe suffix can be extended with u or s to say whether it is unsigned (only a\npositive number) or signed (can be positive or negative) - for example, 402ub.\n\nIt is also possible to write using E notation (e.g 1.2E3 would be 1200),\nhexadecimals (e.g 0xBC would be 188), and binary (e.g 0b110 would be 6)\n\nExample: count:1234s, bigNumber:1200000,\nreallyBigNumber:12123023687234L, byte:112b\n\nDecimal Numbers\n\nFloat and Double data types both represent decimal numbers.\n\nFloat is a signed 32 bit floating point number, it can be any value from\n-3.4028235E38 to 3.4028235E38. It is precise to 7 decimal places.\nDouble is a signed 64 bit floating point number, it can be any value from\n-1.7976931348623157E308 to 1.7976931348623157E308. It is precise to 15\ndecimal places.\n\nFormat: By default, decimal numbers are stored as doubles. To store a number\nin the other formats, you need to use the appropriate suffix. For floats, the\nsuffix is f. For doubles, the suffix is d.\n\nExample: pi:3.1415926535d, e:2.718281828459045d, phi:1.6180f\n\nBytes or Booleans\n\nIn older versions of Minecraft, booleans were stored as bytes with 0b\nrepresenting false and 1b representing true. In newer versions, booleans\nwere introduced. Essentially, booleans represent the old 0b and 1b with a\nmore descriptive name. It's recommended to use booleans instead of bytes\nwhenever possible, as they are more readable.\n\nLists/Arrays\n\nLists, or number arrays are used to store multiple values. Lists can store\ndifferent types of values, whereas number arrays can only store the same type of\nnumber. In practicality, you often do not need to think about the difference\n\nFormat: They are defined using square brackets ([]), with the values\nseparated by commas. Number arrays can be prefixed with the type of number the\narray is going to store and a semicolon (for instance, a list starting with\n[B; will only store bytes)\n\nExample: [\"Silabear\", 15, true, 242], [B;1b,2B,true,false],\n[\"Kanokarob\", \"LadyEternal\", \"lionlance\", \"thederdiscohund\", \"theblackswitch\"],\n[L;1l,2l,3l,4l,5l]\n\nValidator\n\nBelow is a validator for SNBT. It will validate the input and show you if it is\nvalid or not.","description":"NBT is Minecraft's way of storing internal data, such as item data, entity data, and block data. In datapacks, we can use it to store data in custom data storages.","url":"/wiki/nbt-scoreboards/nbt/","tags":[]},{"title":"Scoreboards","content":"Scoreboards\n\nScoreboards are a key/value system for storing numbers bound to a player in\nMinecraft. On a scoreboard objective, each player can have a score, which is an\ninteger value. This player does not need to exist - fake players can be used\nto store a number without attaching it to a player but rather an arbitrary name.\n\nYou can modify objectives with the /scoreboard or /execute store commands.\nSome objectives can automatically change based on player statistics.\n\nScoreboard objectives can also be optionally displayed on the sidebar, under a\nplayer's name, and/or in the tab list - although only one objective can be shown\nin each slot at a time.\n\nTypes of scoreboard objectives\n\nThere are three main types of scoreboard objectives in Minecraft.\n\nDummy objectives\n\nThese are objectives which can only be modified with commands, like a \"blank\"\nscoreboard which you can modify however you want. They are useful for storing\narbitrary numbers, or tracking custom values within your datapack.\n\nYou can create this scoreboard with the command:\n/scoreboard objectives add objective_name dummy. For a better example, take a\nlook at the following function:\n\nscoreboard objectives add intelligence dummy\nscoreboard players set @a intelligence 100\nexecute store result score Silabear intelligence run data get entity Silabear Health\n\nThis would create the following scoreboard:\n\n| Player| intelligence |\n| -------- | -------------- |\n| Player1| 100|\n| Player2| 100|\n| Silabear | 20|\n\nYou can also put fake players on a dummy objective. These work just like\nnormal players on an objective, except they don't exist. You can specify a fake\nplayer by using a special character such as a #, $, ., etc. before the\nname. For example:\n\nscoreboard players set #max intelligence 150\n\nCriteria-based objectives\n\nThese are read-only objectives which are automatically updated based on player\nstatistics. They are usually used to track player events or progress. For\nexample, the criteria minecraft.custom:minecraft.sneak_time will store the\namount of ticks a player has been sneaking on the objective.\n\nscoreboard objectives add sneaking_duration minecraft.custom:minecraft.sneak_time\n\nAfter sneaking for one second, the objective will look like this:\n\n| Player| sneaking_duration |\n| ------- | ------------------- |\n| Player1 | 20|\n\nTrigger objectives:\n\nThese are objectives which allow the player to manually set their score using\nthe /trigger command. This is especially useful for creating chat UIs, as it\nis the closest thing we have to creating \"custom commands\" with datapacks. Any\nplayer can run /trigger, regardless of their operator status.\n\nA player may only run /trigger if that trigger objective has been enabled for\nthat user. Once a user has used /trigger on an objective, they cannot use it\nagain until it is re-enabled.\n\nscoreboard objectives add option trigger\nscoreboard players enable @a option\n\nPlayers will now be able to use the /trigger command to modify their score on\nthe option objective.\n\n/trigger option will set the player's score to 1.\n/trigger option set 5 will set the player's score to 5.\n/trigger option add 3 will add 3 to the player's score.\n\n\n\nThere is also a way to disable a scoreboard objective for players, so that they\ncannot trigger it until it is re-enabled:\n\nscoreboard players reset @a option\n\n","description":"Scoreboards are a way of storing numerical data attributed to a player or entity in a Minecraft Datapack.","url":"/wiki/nbt-scoreboards/scoreboards/","tags":[]},{"title":"Custom World Generation","content":"Custom World Generation\n\nCustom World Generation is an experimental feature, allowing a data pack to\ngenerate custom features, biomes, or dimensions, primarily by way of a series of\nJSON files rather than by using commands.\n\nThis guide goes over how to create every step of a custom dimension, which\nitself comprises all of the following. If you only want to achieve one or some\nof these things, you can generally skip to those respective sections.\n\nModifying and defining dimension settings\nGenerating terrain\nCreating biomes\nArranging biomes\nCreating features (ores, trees, etc.)\nMany sub-tasks related to the above\n\nAt the same time, this documentation will express some of the major limitations\nthat come with Custom World Generation. There are many aspects of worldgen that\nwe will go over here in brief, but that could fill entire guides of their own to\nexplore in detail. Many of the tasks involved in creating Custom World\nGeneration can be extremely time-intensive and require a lot of trial and error.\n\nWhat is Custom World Generation?\n\nCustom Worldgen can take the form of anything from a completely separate\ndimension, an override of vanilla dimensions or biomes, like the Overworld at\nlarge or Swamps in particular, or individual features that are placed via\ncommands. The following are all things that Custom World Generation can include,\nirrespective of difficulty.\n\nCustom Terrain\nCustom Dimension Settings, such as:\nUltrawarm\nPiglin zombification\nRespawn Anchors vs Beds\nLight level\nDaylight cycle (on/off)\netc.\nCustom Biomes (Surface and Cave)\nNatural features (Trees, ores, flowers, etc.)\nCustom colors and ambient particles\nCustom Biome layout (including of vanilla biomes)\n\nCustom Structures, and changes related to structures, are also a sub-feature of\nCustom World Generation. We already have documentation for creating Custom\nStructures, which you can find\nhere.\n\nFolder Structure\n\nTo begin creating a Custom Dimension, there are a few folders you should create\nin a data pack. If you’re unfamiliar with the general structure of a data pack,\nyou should check out our Data Pack Starter Guide.\n\nIn your namespace folder, you will create the following folders, organized as\nsuch:\n\n/\n├── dimension/\n├── dimension_type/\n└── worldgen/\n├── biome/\n├── configured_carver/\n├── configured_feature/\n├── density_function/\n├── noise/\n├── noise_settings/\n└── placed_feature/\n\nYou may not need all of these folders depending on the degree of configurability\nyou want or the scope of your project, so which folders are needed or optional\nfor any particular task will be listed at the top of each section.\n\nBecause Custom World Generation requires so many different JSON files, many with\na variety of required vs. optional fields, it is strongly recommended that you\ngenerate most or all of these files using\nMisode’s generators. Furthermore, frequent\nreference to the wiki pages for\ncustom dimensions and their respective subcategories will likely be necessary,\nif only to determine what type of data some fields are expecting, when Misode or\nthis guide do not specify.\n\n\n\nSome popular VSCode extensions may falsely inform you that certain files you\nreference don’t exist or are in the wrong folder, when in fact they are,\ndepending on the version you are working in. This is most common for\nconfigured_features, but be on the lookout for this behavior elsewhere.\n\n\n\nDimension Type\n\nFolders: dimension_type\n\nWhen creating a new dimension, or modifying an existing one, it’s recommended to\nstart with the Dimension Type. The Dimension Type is what defines the very broad\ndetails about the dimension, such as whether water evaporates instantly like the\nNether (Ultrawarm), whether Beds and/or Respawn Anchors work or explode, and\nwhat light level Hostile Mobs need to spawn. Most of these fields are self\nexplanatory, and most of them are required.\n\ndimension_type/overworld.json\n\n{\n\"ambient_light\": 0.0,\n\"bed_works\": true,\n\"coordinate_scale\": 1.0,\n\"effects\": \"minecraft:overworld\",\n\"has_ceiling\": false,\n\"has_raids\": true,\n\"has_skylight\": true,\n\"height\": 384,\n\"infiniburn\": \"#minecraft:infiniburn_overworld\",\n\"logical_height\": 384,\n\"min_y\": -64,\n\"monster_spawn_block_light_limit\": 0,\n\"monster_spawn_light_level\": {\n\"type\": \"minecraft:uniform\",\n\"max_inclusive\": 7,\n\"min_inclusive\": 0\n},\n\"natural\": true,\n\"piglin_safe\": false,\n\"respawn_anchor_works\": false,\n\"ultrawarm\": false\n}\n\nTo create this, simply add a .json file to the dimension_type folder, and set\nthe name to that of the dimension you are creating/modifying. Like all file\nnames, it must have no capital letters, and no special characters except\nunderscores. Then generate the list of fields with\nMisode.\n\nNote that some fields, like “has ceiling”, don’t do what you would expect – this\nfield doesn’t actually give the dimension a physical ceiling, that’s handled in\nthe terrain. Similarly, “Effects” pretty much just changes the skybox and\ndetermines whether the time affects the light level.\n\nNoise Settings\n\nFolders: noise_settings\nOptional Folders: density_function, noise\n\nThe Noise Settings are one of the largest files you will create. This single\nfile per dimension controls all of the following:\n\nWhat base block the dimension’s terrain is made of (Stone, Netherrack, etc.)\nWhat base fluid is used for the sea level (Water, Lava, etc. Does not need to\nbe a fluid)\nSome global settings, such as:\nWhether “Creatures” (passive mobs) spawn during chunk generation\nBiome noise parameters that the worldspawn is allowed to be set in during\nworld creation\nWhether large ore veins generate, and their general size and shape via\nDensity Functions. Only applies to Copper and Iron veins\nWhether aquifers generate. Not configurable beyond true/false. If false,\nmost caves below sea level will be filled with the base fluid.\nNoise Router (The shape of the terrain, which is determined by a few further\nfields)\nSurface Rules (What blocks the surface is made up of, typically broken down by\nbiome)\n\nNote that the sea level also determines the level that caves become filled with\nLava, so a higher sea level will also raise the cave Lava level, and a deeper\nworld with a default sea level will result in all caves being filled with lava\nbelow the same point (about Y=-50).\n\nNoise Router (Terrain)\n\nThe Noise Router is responsible for most factors relating to the terrain, which\nis to say, whether a given block is air/fluid or the default_block, before\nsurface_rules or biome features are added. In addition, the Noise Router\nincludes several fields that don’t directly influence the terrain, but may\napproximate it for use in making biome distribution conform to the terrain.\n\nThe Noise Router contains several fields. All of these fields are density\nfunctions, which can be defined in-line or referenced from the density_function\nfolder. These are essentially formulas of variable length and complexity, that\nuse a variety of functions to determine a value between 0 and 1 for every\ncoordinate. For density functions that affect terrain, this determines whether\nthe block is air/fluid (respecting sea level), or the default_block,\nrespectively.\n\nLet’s look at what each of these density functions are responsible for.\n\nbarrier, fluid_level_floodedness, fluid_level_spread\n\nThese all relate to some facet of Aquifer generation, if they are enabled.\n\nlava\n\nUsed to determine whether an aquifer is lava or not. Does not affect the lava\nthat floods the bottom of the world.\n\nvein_toggle, vein_ridged, vein_gap\n\nUsed to control the shape, density, and rarity of both Iron and Copper Large Ore\nVeins. Cannot change what these blocks are made of, but whether the vein is\nCopper or Iron is based on the vein_toggle noise range.\n\ntemperature, vegetation\n\nCorrespond to the “temperature,” and “humidity,” parameters in the dimension’s\nbiome source, respectively. Ostensibly create the noise maps that biomes are\nplaced relative to. These density functions don’t affect terrain at all.\n\ncontinents, erosion, depth, ridges\n\nCorrespond to the “continentalness,” “erosion,” “depth”, and \"weirdness\"\nparameters in the dimension’s biome source, respectively. Like the temperature\nand vegetation density functions, whatever is put in these fields will not\ndirectly affect terrain, and ostensibly just create noise maps for the biome\nsource to use. However, in the vanilla overworld, these fields are used to\nreference separate density function files that also get referenced elsewhere, to\ninform the terrain. This means that unlike the temperate and vegetation density\nfunctions, these correspond to certain parts of the terrain.\n\nFor example, high erosion parameter values match up with where the terrain is\nmore flat, because of how it gets referenced by other density functions that\nimpact terrain.\n\n\n\nTemperature and vegetation are also all capable of behaving more like\ncontinents, erosion, and depth, but it’s generally not necessary to have so many\nparameters that conform to terrain, and can in fact make biome distribution\nharder and more time consuming.\n\n\n\ninitial_density_without_jaggedness\n\nUsed for aquifers and surface_rules, in order to more accurately determine where\nthe surface of the world is so that neither can generate above that surface.\nTypically, will be similar to the final_density, but with the surface slightly\nlowered, and with noise caves unaccounted for. Similar to the above few\nfunctions, it does not affect terrain at all.\n\nfinal_density\n\nThis is the density function that actually creates the bulk of the terrain. As\nsuch, it’s often the largest and most complex part of the noise_settings file,\nbarring surface_rules. It controls not only the surface, including hills,\nmountains, valleys, and oceans, but also the large noise caves and noodle caves\nintroduced in the Caves and Cliffs update. And, as alluded to above, you still\nneed at least the continents and erosion density functions to align with the\ngeneral shape of this density function if you plan to have ocean biomes generate\nonly where the terrain dips below sea level, or mountain biomes generate only\nwhere the terrain spikes up to look like mountains.\n\nIn the\nvanilla Overworld,\nthe final_density is split into two distinct parts: The part that handles the\nshape of the surface, including mountains, hills, rivers, and oceans; and the\npart that handles the large noise caves underground. These are separated by an\nin-line range_choice density function.\n\nDensity functions are very complex, and being very math-heavy, difficult to dive\ninto and learn about; an in-depth understanding of them and how to apply them is\noutside the scope of this guide. Generally, a lot of trial and error is\nrequired, and there are minimal resources for getting particularly good at\napplying them. These are primarily\nthe wiki page which lists them all\nand what they do to the inputs/arguments,\nthis brief tutorial\nwritten by Misode and now hosted on the wiki, which explains how the Final\nDensity affects the terrain, and provides some basic steps to manipulate it, and\nof course\nMisode’s generator to help\nvisualize individual density functions or chains of them. However, as a brief\nintroduction, this guide will attempt to describe, roughly, how the vanilla\noverworld's final_density applies important density functions to shape the\nworld's surface.\n\nsloped_cheese\n\nUsed as the input in the aforementioned range_choice density function to\ndistinguish between the surface and underground (for noise caves), as well as\nthe main density function that gets applied to the surface. It multiplies the\ndepth and the jaggedness density functions with the factor density function,\ncombining the various shapes they create into one coherent surface shape.\n\nfactor\n\nContains a complex spline that functionally combines the continents, erosion,\nand ridges_folded density functions. These three on their own are ostensibly\nnoise maps like temperature and vegetation, but this spline translates them into\nterrain. Continents is used to create a transition between high and low terrain,\nwith erosion added to flatten the terrain, and ridges_folded (which just\nreferences ridges with some multipliers) to carve rivers or raise peaks on\nmountains.\n\ndepth\n\nCreates a gradient from the surface of the world down, where the surface and\neverything above it is assigned a value of 0, and ascends towards 1 as the world\nheight decreases. It gets the coordinates of the surface by referencing the\noffset density function.\n\noffset\n\nSimilar to factor, and uses the continents, erosion, and ridges_folded density\nfunctions in a similar way to create a shape similar to the terrain's surface,\nbut slightly offset so that the depth density function doesn't start the\ngradient until a little below the surface (generally).\n\njaggedness\n\nSimilar to factor, and uses the continents, erosion, and ridges_folded density\nfunctions in a similar way to create a more jagged version of the surface shape.\nThis gets diluted some due to being combined with both offset and factor higher\nup the chain, but results in some hills populating flatter areas, which also\nhelps to break up otherwise smooth or flat mountains so they look more natural\nand rolling.\n\nSurface Rules\n\nSurface Rules are what add the surface layers to terrain. This is\nhighly-configurable, but at its most basic level, it’s what decides that the\nground in Forests is made up of Grass Blocks and Dirt, and that Deserts have\nSand and Sandstone. Surface Rules can also allow for different blocks to make up\nthe ground depending on height, steepness, or even based on random noise.\n\nNotably, the Surface Rule also places the Bedrock on the bottom (or top) of the\nworld, and handles the transition from Stone to Deepslate at Y=0. This means\nboth of these features can be edited or removed, and in fact it’s fairly easy to\ndo so compared to handling the actual surface.\n\nCreating surface rules is relatively easy. You’ll start with something like this\nin your Noise Settings:\n\n{\n\"surface_rule\": {\n\"type\": \"minecraft:sequence\",\n\"sequence\": ]\n}\n}\n\nInside the sequence brackets, you can add yet more objects. There are four\ndifferent types:\n\nSequence: Allows you to add a new nested list. Generally, it’s good\npractice to nest sequences inside of a condition that will apply to multiple\nchild conditions or blocks.\nBlock: Defines the block that gets placed. Usually used at the end of a\nseries of conditions.\nBandlands: Not a typo. Just places the hardcoded Badlands terracotta\npattern, and doesn’t have any additional fields.\nCondition: This is the most prominent part of Surface Rules. There are\nmultiple kinds of conditions, including biome, Y level, steep, and more.\nRegardless of the condition you select, it will always have the additional\nfield “then run”, which just accepts another object type from the above list.\n\nYou may find yourself using combinations of conditions, with or without\nsequences, to get a satisfying surface. This guide won't go over every surface\nrule condition, but here are some common ones and how they are often used.\n\nabove_preliminary_surface\n\nUses the initial_density_without_jaggedness density function to determine where\nthe surface of the world is. Not using this would just mean that the surface\nrule would apply in noise caves as well. If you’re not using an\ninitial_density_without_jaggedness density function, there’s no other real harm\nin choosing not to use this condition.\n\nstone_depth\n\nThis condition finds the blocks that are actually on the surface via heightmap,\nignoring water, and works even if there was no preliminary surface condition\nused. This is one of the most common conditions, in that every dimension will\nuse it, but it is also a fairly resource-intensive condition, and the one most\nlikely to cause chunk generation lag. It’s best to use it minimally, as high up\nin the Surface Rule as you can. Oftentimes, you will need at least two of these:\nOne for the top surface, and one for the secondary surface.\n\nwater\n\nCan be used to have its child conditions apply based on the fluid level at that\nlocation, including not being in fluid. The vanilla Overworld surface rule uses\nthis a lot, and it’s a great way to alleviate the impact of an earlier\nstone_depth condition.\n\nbiome\n\nSpecifies which biome(s) to apply the rest of the rule to.\n\ny_above\n\nCauses the rest of the rule to only apply to blocks above the specified Y value.\nYou can add an optional multiplier for this value, or choose to add the\nstone_depth from previous conditions to this calculation.\n\nIt’s best to look at how the Overworld’s surface rule uses combinations of\nconditions to produce a surface of, for example, Grass Blocks with 2-4 layers of\nDirt underneath. The vanilla Overworld Surface Rule is not as extreme as the\nvanilla Overworld Dimension file (up next), but it is a little more lengthy and\nsophisticated than can reasonably be pasted here.\n[Misode’s generator has a\nfeature to view the vanilla Overworld Noise Settings as a preset, which includes\nthe Surface Rule; this may be useful to get a more user-friendly view of how the\nconditions fit together.\n\nDimension\n\nFolders: dimension\n\nThe Dimension file is where you reference both the Dimension Type and Noise\nSettings you would like this dimension to use by their namespaced ID. The name\nof this file is also what will become the namespaced ID of this dimension for\ncommands such as /execute in, regardless of the names of the noise_settings or\ndimension_type files referenced. Lastly, this is where you will list all of the\nbiomes you want to appear in the world, using parameters to define which biomes\ncan appear where on several noise maps.\n\nBiome Source\n\nBesides Terrain, the Biome Source is where you may find yourself spending the\nmost time. It is highly configurable, and has the potential to integrate with\nthe Continents and Erosion density functions defined in the Noise Router to help\nplace biomes in a way that appears to conform to the terrain (Mountain biomes on\nelevated terrain, Plains biomes on flatter terrain, etc.). Biome Layout is much\nmore approachable than terrain in terms of configurability, but making them work\nhand-in-hand in this way can be time consuming.\n\nTo put things in perspective, you may have noticed above that the vanilla\nOverworld’s Dimension file is over 200,000 lines long. Every biome has dozens of\nrepeat entries, each with slightly different parameters to get the biome\ndistribution and terrain conformity just right. This is because the six primary\nparameters (temperature, humidity, continentalness, erosion, and depth)\nbasically work to create a 6-dimension noise map. Making a biome source that\nplaces biomes according to terrain by hand is borderline impossible, and indeed,\nthis file gets generated by the game using a system similar to\nSnowcapped, a tool by jacobsjo that uses\ngrids to simplify the visualization of a 6D grid.\n\nThe Nether is far easier to work with and add new biomes to, as those biomes do\nnot conform to the terrain, and each vanilla biome has only one entry.\n\nThe End’s biome source is hardcoded; this is because Mojang needs to ensure that\nthe central End Island is always the default “minecraft:the_end” biome, which\ncannot be guaranteed with current tools. However, if you don’t mind making the\ncentral End Island a different biome, you can approach a custom biome layout\nsimilarly to how you would the Nether.\n\nFor a custom dimension, the complexity is up to you. If you aim to have your\nbiomes conform to terrain, then you may end up with a biome layout of comparable\ncomplexity and time commitment to the vanilla Overworld’s. If not, then it’s\njust a matter of determining which biomes you do or do not want to appear next\nto each other, and then setting the parameters appropriately.\n\nEach entry in the “biomes” list should look something like this:\n\n{\n\"biome\": \"minecraft:plains\",\n\"parameters\": {\n\"temperature\": -0.45, -0.15],\n\"humidity\": [-1, -0.35],\n\"continentalness\": [-0.11, 0.3],\n\"erosion\": [-0.7799, -0.375],\n\"weirdness\": [-1, -0.9333],\n\"depth\": 0,\n\"offset\": 0\n}\n}\n\nMore biomes can be added by including more entries in the “biomes” list. It can\nand often may include repeats. Each entry must also contain all of the\nparameters listed above. Unless otherwise specified, all of these parameters can\neither be a single constant, or a list of two constants, which serves as a min\nand max range of values. These must be in order from min to max; failure to do\nso will cause the data pack to not validate.\n\ntemperature, humidity\n\nThese are named completely arbitrarily, and have no bearing on the actual\ntemperature or humidity of the biome that impacts gameplay in any way. You can\nmake both a “desert” and “snowy” biome have a temperature of 0, and all it will\nmean is that they will be placed near each other (unless other parameters forbid\nthis). These parameters just refer to different noise maps that are available.\nThese should each be a value between -1.0 and 1.0. The closer a value is to 0,\nthe more frequently that biome will appear, or the larger.\n\ndepth\n\nUsed exclusively for cave biomes, and is otherwise 0. Positive values cause that\nbiome to be placed deeper in the world, and the area above it to be filled with\nother biomes of lower depth values that meet the other parameters of that space.\nIn the vanilla depth density function, a depth of 1.0 corresponds to\napproximately 128 blocks below the surface, but this can vary if you've changed\nthe Final Density or the depth density function in your Noise Router.\n\noffset\n\nHelps to limit the relative size of the biome. Accepts a value between 0 and\n1.0, and must be a single constant, not a list. Larger values reduce the size of\nthe biome, and allow biomes of neighboring parameter values to fill the space.\nThis can also result in the biome becoming rarer, if it was already small enough\nthat a positive offset causes some of its placements to disappear.\n\nweirdness\n\nThis parameter corresponds to the ridges density function, which is responsible\nfor rivers and mountain peaks. Values closer to 0 tend to correspond to rivers,\nand values further from 0 tend to correspond to peaks, before dipping back to\nmore level terrain. The vanilla overworld also uses this parameter to place\n\"variant\" biomes like Bamboo Jungles or Pale Gardens, which otherwise might\nshare similar parameters to their base biomes (Jungles and Dark Forests)\n\ncontinentalness, erosion\n\nThese are the two parameters that influence a biome’s placement on the density\nfunctions of the same names used for Terrain. In the vanilla Overworld, only\nthese values will affect biome position relative to the shape of the terrain.\nFor the vanilla Overworld:\n\nHigh continentalness corresponds to inlands terrain.\nLow continentalness corresponds to ocean terrain.\nHigh erosion corresponds to flat terrain.\nLow erosion corresponds to jagged terrain.\n\nThe above rules may not necessarily hold true if you have a Final Density that\ndiffers from the vanilla Overworld.\n\nThe best way to view and manipulate the biome source and how it may look in the\nworld is with [Misode’s generator.\nHowever, it may not show completely accurate biome placement if you are taking\nadvantage of continentalness and/or erosion.\n\nBiomes\n\nFolders: biome\nOptional Folders: configured_carver, placed_feature,\nconfigured_feature\n\nThis is where the most configurability and excitement, and least limitations,\ncomes into play. Biomes are really just designated areas that can have the\nfollowing things defined:\n\nPrecipitation (True/False)\nTemperature\nUsed to determine rain or snow if Precipitation is true\nAlso influences natural grass and foliage coloration, along with Downfall\nOverride colors for grass, foliage, sky, fog, water, and water fog\nFor grass and foliage, this color is added to the color determined by\nTemperature and Downfall, which references the respective colormaps in the\nResource Pack.\nParticles, if any (such as in many Nether biomes)\nMusic and ambient sounds\nCave and canyon (ravine) types\nNaturally spawning mobs\nFeatures\n\nNot all of these need to be defined, but they all need to be present, even if\nempty. As always, it’s best to use\nMisode’s generator to ensure all\nrequired fields are accounted for. It also has useful tools for selecting\ncolors, where appropriate.\n\n\n\nIf you are modifying a vanilla biome (or a biome from another mod or data pack),\nyour biome will necessarily be incompatible with any other data packs that\nmodify that biome, too. This means you can’t, for example, add more Diamonds to\nthe vanilla Swamp biome, and then also include Terralith -- you would need to\ninstead use Terralith’s Swamp biome as a base and add more diamonds to that, if\nyou want to use both in the same world.\n\n\n\nNaturally Spawning Mobs\n\nCalled “Spawners” (not confusing at all), this is what decides what mobs will\nspawn in this biome, at what rarities and in what quantities.\n\n\n\nThis does not dictate those mobs’ spawning conditions–for the most part, we\ncan’t change that. Passive Mobs will always need Grass Blocks and light to\nspawn, and Hostile Mobs will still need a low enough light level as defined in\nthe Dimension Type. Some mobs, like Sniffers and Camels, don’t have as strict\nspawning conditions because they don’t spawn naturally in vanilla. This means\nthey can spawn anywhere in the biome, even if it doesn’t make sense.\n\n\n\n{\n\"spawners\": {\n\"ambient\": \n{\n\"type\": \"minecraft:bat\",\n\"maxCount\": 8,\n\"minCount\": 8,\n\"weight\": 10\n}\n],\n\"axolotls\": [],\n\"creature\": [\n{\n\"type\": \"minecraft:sheep\",\n\"maxCount\": 4,\n\"minCount\": 4,\n\"weight\": 12\n},\n{\n\"type\": \"minecraft:pig\",\n\"maxCount\": 4,\n\"minCount\": 4,\n\"weight\": 10\n},\n{\n\"type\": \"minecraft:chicken\",\n\"maxCount\": 4,\n\"minCount\": 4,\n\"weight\": 10\n},\n{\n\"type\": \"minecraft:cow\",\n\"maxCount\": 4,\n\"minCount\": 4,\n\"weight\": 8\n},\n{\n\"type\": \"minecraft:horse\",\n\"maxCount\": 6,\n\"minCount\": 2,\n\"weight\": 5\n},\n{\n\"type\": \"minecraft:donkey\",\n\"maxCount\": 3,\n\"minCount\": 1,\n\"weight\": 1\n}\n],\n\"misc\": [],\n\"monster\": [\n{\n\"type\": \"minecraft:spider\",\n\"maxCount\": 4,\n\"minCount\": 4,\n\"weight\": 100\n},\n{\n\"type\": \"minecraft:zombie\",\n\"maxCount\": 4,\n\"minCount\": 4,\n\"weight\": 95\n}\n]\n}\n}\n\nSpawners are defined by first opening up a list of one of several categories,\nsuch as Monster, Creature, Water Ambient, or Axolotl. You can make mobs spawn in\nwhatever category you want, but if you put it in the wrong category than it\nbelongs (generally, Creature for passive mobs, Monster for hostile mobs, etc.),\nthey may either fail to spawn entirely, or overspawn and exceed the mobcap. For\nthis reason, it is advised that you only spawn mobs in their correct category;\nif you don’t know which it belongs to, refer to a vanilla biome that spawns that\nmob and see where it’s placed.\n\nAn individual mob spawner entry includes the mob type, its weight (which works\njust like loot tables) and a min and max count. These latter values determine\nhow many mobs will spawn within a group as one successful spawn attempt of that\nmob type. The min must be greater than 0.\n\nSpawn Costs\n\nSpawn Costs are an optional field within the biome file, and are used to limit\nthe frequency of spawns around mobs of a certain type, within that biome only.\nIn vanilla, this is used to limit the number of Endermen that appear in Warped\nForests, and Skeletons that appear in Soul Sand Valleys.\n\n{\n\"spawn_costs\": {\n\"minecraft:enderman\": {\n\"charge\": 1.0,\n\"energy_budget\": 0.12\n}\n}\n}\n\nA Spawn Cost for an individual mob consists of an energy_budget, and a charge,\nwhich are both float values. These are a little hard to explain, but\nessentially, the “charge” is used to calculate an individual mob’s contribution\nto the overall “energy budget” shared by all mobs of that type in the biome. If\nthe value calculated from that charge would exceed that energy budget, it fails\nto spawn. This is very simplified, and indeed somewhat unintuitive, as the\ncharge will generally be higher than the energy budget.\n\nIf you’d like to learn more about how this works, see the wiki entry relating to\nit [here.\n\nCarvers\n\nThis is where the legacy caves and ravines are defined for the biome. They are\nsplit into two steps: air and liquid, which behave as you would expect; either\nproducing regular air caves, or flooded caves.\n\nYou can define custom caves or canyons with a configured_carver, including\ndefining what types of blocks the cave will be allowed to replace (which is why\nit’s called a carver), their frequency, size, and other values. To explore this\nfully, it’s recommended to mess with the various fields using\nMisode’s generator.\n\nFeatures\n\nFeatures are the real meat of a biome. These are everything that actually fills\nup the biome and gives it character beyond the terrain and surface. Trees,\nflowers, ores, geodes, granite deposits, and sometimes small structures like\nDesert Wells are all features. There is a lot you can do here, but the options\naren’t limitless.\n\nFor one, there’s the issue of performance. Larger and more common features make\nloading new chunks slower, as do features that have hyper-specific location\nrequirements to spawn.\n\nFor two, some specific shapes are harder to achieve, and some common features\naren’t as configurable as others. Trees are some of the most configurable\nfeatures in the game, able to use any block or combination of blocks for their\ntrunks, leaves, roots, and more, and can be used to make elaborate shapes and\nfeatures that don’t even look like trees. Conversely, the coral reefs in Warm\nOceans are easy to replicate and adjust the frequency and location of, but their\nshapes and the blocks they’re made of cannot be changed at all.\n\nAs such, it’s often better to have some broad strokes for the “feel” or\natmosphere you want for a biome in mind, rather than planning everything down to\nthe shape, as flexibility may be necessary.\n\n{\n\"features\": \n[],\n[\"minecraft:lake_lava_underground\", \"minecraft:lake_lava_surface\"],\n[\"minecraft:amethyst_geode\"],\n[\"minecraft:monster_room\", \"minecraft:monster_room_deep\"],\n[],\n[],\n[\n\"minecraft:ore_dirt\",\n\"minecraft:ore_gravel\",\n\"minecraft:ore_granite_upper\",\n\"minecraft:ore_granite_lower\",\n\"minecraft:ore_diorite_upper\",\n\"minecraft:ore_diorite_lower\",\n\"minecraft:ore_andesite_upper\",\n\"minecraft:ore_andesite_lower\",\n\"minecraft:ore_tuff\",\n\"minecraft:ore_coal_upper\",\n\"minecraft:ore_coal_lower\",\n\"minecraft:ore_iron_upper\",\n\"minecraft:ore_iron_middle\",\n\"minecraft:ore_iron_small\",\n\"minecraft:ore_gold\",\n\"minecraft:ore_gold_lower\",\n\"minecraft:ore_redstone\",\n\"minecraft:ore_redstone_lower\",\n\"minecraft:ore_diamond\",\n\"minecraft:ore_diamond_medium\",\n\"minecraft:ore_diamond_large\",\n\"minecraft:ore_diamond_buried\",\n\"minecraft:ore_lapis\",\n\"minecraft:ore_lapis_buried\",\n\"minecraft:ore_copper\",\n\"minecraft:underwater_magma\",\n\"minecraft:disk_sand\",\n\"minecraft:disk_clay\",\n\"minecraft:disk_gravel\"\n],\n[],\n[\"minecraft:spring_water\", \"minecraft:spring_lava\"],\n[\n\"minecraft:glow_lichen\",\n\"minecraft:patch_tall_grass_2\",\n\"minecraft:patch_bush\",\n\"minecraft:trees_plains\",\n\"minecraft:flower_plains\",\n\"minecraft:patch_grass_plain\",\n\"minecraft:brown_mushroom_normal\",\n\"minecraft:red_mushroom_normal\",\n\"minecraft:patch_pumpkin\",\n\"minecraft:patch_sugar_cane\",\n\"minecraft:patch_firefly_bush_near_water\"\n],\n[\"minecraft:freeze_top_layer\"]\n]\n}\n\nBest practice is to have the “features” section of your biome consist of 11\nlists (defined with square brackets: [ ]), called “steps”, but you can have any\nnumber of steps, fewer or greater. Generally, features will be placed in order\nbased on which step they appear in, from top to bottom. So, if you want to place\nTree features with leaves made of Stone, and then place Ore features that get\nplaced in the stone, you would put those features in separate steps, with the\nOre feature in a later step from the Tree.\n\nOther parts of the game refer to these steps by name, representative of the\norder they generate in, specifically for things like Custom Structure Generation\nto reference which step of generation those should appear in. However, the names\nthemselves are arbitrary and just reflect which steps vanilla chooses to put its\nfeatures in; any feature type can go in any step. For interest’s sake, these\ndesignations are, in order from first step to last:\n\nRAW_GENERATION: Where End biomes place the small circular endstone\nislands\nLAKES: Where Overworld biomes place lava lakes, and used to place water\nlakes\nLOCAL_MODIFICATIONS: Where Overworld Biomes place Amethyst Geodes, and\nthe Frozen Ocean biome places Icebergs\nUNDERGROUND_STRUCTURES: Where Overworld Biomes place Dungeons and Fossils\nSURFACE_STRUCTURES: Where the Desert biome places Desert Wells\nSTRONGHOLDS: No vanilla biomes place features here, but you can and it’ll\nwork fine\nUNDERGROUND_ORES: Where all Overworld biomes place ores (which includes\nactual ore blocks, as well as the blobs of Dirt, Gravel, and Stone variants),\nas well as discs that generate on the floor underwater\nUNDERGROUND_DECORATION: Where all Nether biomes place ores (which\nincludes actual ore blocks, as well as the blobs of Gravel and Blackstone),\nand where Overworld mountain biomes place blobs of Infested Stone\nFLUID_SPRINGS: Where all Overworld and Nether biomes place water and/or\nlava springs (individual fluid blocks that may or may not spill out of walls\nor ceilings)\nVEGETAL_DECORATION: Where all biomes place features such as trees,\nflowers, cacti, Huge Fungi, Chorus Plants and similar features\nTOP_LAYER_MODIFICATION: Where all Overworld biomes place a feature that\ncauses snow or ice to cover the top blocks if the temperature is\nsufficiently low at that altitude\n\nNote that there are some exceptions to generation order. For example, Deltas\nwill generally spawn after everything else regardless of which step they’re\nplaced in. Conversely, Lakes often spawn before other features, even if they are\nin a later step.\n\n\n\nIf you have two or more features that appear in one step together (regardless of\nwhich step it is) in multiple biomes, they must always be in the same order, or\nthe game will throw an error and fail to load (this is called a feature order\ncycle error). For the same reason, you can't repeat a feature in the same step,\neven one after the other, if that feature is used in a different biome.\n\n\n\nFeatures are themselves composed of two other file types: placed_features, and\nconfigured_features. A configured_feature defines what type of feature it is,\nphysically, such as an ore or a tree. The placed_feature determines under what\nconditions it spawns, such as in or on what blocks, at what Y level, or other\nfactors. The placed_feature is what the biome file references.\n\nTechnically, the configured_feature can be defined in-line in the\nplaced_feature, however it’s good practice to separate these files. This allows\neasier delineation when creating and editing -- as some configured_feature types\ninclude in-line placements like a placed_feature -- and also makes it easier to\nreuse a configured_feature in multiple placed_features.\n\nConfigured Features\n\nThere are many configured_feature types, each with different required fields.\nListing each in detail would be unhelpful, outside the scope of this guide, and\na duplication of efforts --\n[the wiki serves as a great\nreference to become familiar with the available feature types. As always,\nutilizing Misode to keep track of\nrequired fields is highly recommended. Furthermore, if you do have an idea of a\nvanilla feature that looks similar to what you want to create, referencing it or\nstarting from it as a base, and then modifying it, is a completely valid\nstrategy.\n\nInstead, what this section of the guide will go over is point out which features\nare best for what purpose, and which features are surprisingly difficult to work\nwith, primarily as this knowledge may help keep you from becoming frustrated\nthat you can’t figure out how to do something that is, in fact, not possible.\n\n{\n\"type\": \"minecraft:tree\",\n\"config\": {\n\"decorators\": ],\n\"dirt_provider\": {\n\"type\": \"minecraft:simple_state_provider\",\n\"state\": {\n\"Name\": \"minecraft:dirt\"\n}\n},\n\"foliage_placer\": {\n\"type\": \"minecraft:blob_foliage_placer\",\n\"height\": 3,\n\"offset\": 0,\n\"radius\": 2\n},\n\"foliage_provider\": {\n\"type\": \"minecraft:simple_state_provider\",\n\"state\": {\n\"Name\": \"minecraft:oak_leaves\",\n\"Properties\": {\n\"distance\": \"7\",\n\"persistent\": \"false\",\n\"waterlogged\": \"false\"\n}\n}\n},\n\"force_dirt\": false,\n\"ignore_vines\": true,\n\"minimum_size\": {\n\"type\": \"minecraft:two_layers_feature_size\",\n\"limit\": 1,\n\"lower_size\": 0,\n\"upper_size\": 1\n},\n\"trunk_placer\": {\n\"type\": \"minecraft:straight_trunk_placer\",\n\"base_height\": 4,\n\"height_rand_a\": 2,\n\"height_rand_b\": 0\n},\n\"trunk_provider\": {\n\"type\": \"minecraft:simple_state_provider\",\n\"state\": {\n\"Name\": \"minecraft:oak_log\",\n\"Properties\": {\n\"axis\": \"y\"\n}\n}\n}\n}\n}\n\nAs mentioned above, some configured_features, like trees, offer a lot of control\nand flexibility. Trees have several different shapes to choose from for their\ntrunks and leaves, as well as optional roots (such as what Mangroves have),\noptions for decorations on any face of leaves, and can accept one or multiple\ndifferent blocks to make up each of these facets.\n\nThe Ore feature type does not have quite as many fields, but still presents a\ngood deal of configurability. Making a new ore configured_feature entails\ndetermining what the block being placed is (the state) and what blocks it tries\nto get placed in (the target), which can be a block tag. As you can see in the\nbelow example for Coal, you can also list multiple state and target pairs in one\nfeature, which vanilla uses to place the appropriate Deepslate variant if the\nblock it gets placed in is a Deepslate or Tuff Block rather than Stone or a\nstone variant.\n\n{\n\"type\": \"minecraft:ore\",\n\"config\": {\n\"discard_chance_on_air_exposure\": 0.0,\n\"size\": 17,\n\"targets\": [\n{\n\"state\": {\n\"Name\": \"minecraft:coal_ore\"\n},\n\"target\": {\n\"predicate_type\": \"minecraft:tag_match\",\n\"tag\": \"minecraft:stone_ore_replaceables\"\n}\n},\n{\n\"state\": {\n\"Name\": \"minecraft:deepslate_coal_ore\"\n},\n\"target\": {\n\"predicate_type\": \"minecraft:tag_match\",\n\"tag\": \"minecraft:deepslate_ore_replaceables\"\n}\n}\n]\n}\n}\n\nThe size is self-explanatory but is not indicative of the actual quantity of the\nstate blocks that will be placed. More info on that relationship can be found on\nthe [wiki.\nDiscard_chance_on_air_exposure is a chance between 0.0 and 1.0 to intentionally\nfail to spawn the feature if it touches air, such as in a cave. This is used in\nvanilla for so-called “buried” ore features like Iron and Diamonds, to encourage\nother forms of mining than just caving.\n\nThe Ore feature type is also what is used for the blobs of dirt, gravel,\ngranite, tuff, and other blocks in the Overworld.\n\nMoving into feature types that are not configurable and what you can do about\nit. End Islands, Basalt Pillars, Ice Spikes, Glowstone Blobs, and Coral Claws\nare all examples of features that have no configuration at all, meaning their\nshape and block palette is hardcoded. You can still change how they get placed\nwith a placed_feature later, but you can’t change what these features physically\nare.\n\nFor cases like these where you may want to make use of those specific shapes,\nbut can’t recreate them with other features (End Islands are a good example),\nyou can create features to replace those blocks with other blocks in a later\nstep. A good feature to use for this is geodes, because they can define a list\nof blocks that they are not able to replace, which can include all blocks except\nthe desired replaceables.\n\nThis just allows you to replace a target block with a state block in a\n3D-diamond with a defined radius. It unfortunately doesn’t support block tags.\nIt also has a maximum radius of 12, so you may need a higher quantity of them\nusing your placed_feauture later to get consistent coverage.\n\nPlaced Features\n\nA placed_feature typically references a configured_feature, and determines how\nit gets placed in the world. For some features, like Trees, they will obey\nwherever your placements happen to define as valid. For other features, like Ice\nSpikes, they need to adhere to hardcoded conditions of the feature type, which\nare not always obvious. Ice Spikes for example can only spawn on Snow Blocks,\nregardless of what the placed_feature says.\n\nAs with the previous section, this guide will not go over every type of\nplacement that can be included, nor every field they contain. These are all\ncovered in detail on the wiki, and\ngenerating them can be aided using\nMisode.\n\nHowever, there are a handful of placement types that are used extremely\ncommonly, and so we will go over what those are, how to use them, and when they\nmay not be needed.\n\n{\n\"type\": \"minecraft:ore\",\n\"config\": {\n\"discard_chance_on_air_exposure\": 0.0,\n\"size\": 10,\n\"targets\": [\n{\n\"state\": {\n\"Name\": \"minecraft:copper_ore\"\n},\n\"target\": {\n\"predicate_type\": \"minecraft:tag_match\",\n\"tag\": \"minecraft:stone_ore_replaceables\"\n}\n},\n{\n\"state\": {\n\"Name\": \"minecraft:deepslate_copper_ore\"\n},\n\"target\": {\n\"predicate_type\": \"minecraft:tag_match\",\n\"tag\": \"minecraft:deepslate_ore_replaceables\"\n}\n}\n]\n}\n}\n\nGenerally, placements are calculated in order from first to last. For some\nplacement types, this is irrelevant, while for others, being listed before or\nafter another placement can dramatically alter the spawning behavior. The\nfollowing placement types are the most commonly used; a majority of\nplaced_features will use some combination of these placements:\n\ncount\n\nThe number of spawn attempts this feature will make per chunk. Accepts a\nconstant, or other number providers like uniform or trapezoid. If excluded, the\nplaced_feature will make only 1 spawn attempt per chunk.\n\ncount_on_every_layer\n\nAn alternative to count. A little hard to explain, but essentially includes some\nrandom X and Z distribution, and Y distribution based on layers of air or fluid.\n\nrarity_filter\n\nAccepts a positive integer. Essentially divides any previous count-type\nplacements by this value. For example, a rarity of 1 will cause no change, a\nrarity of 2 will make the feature half as common, a rarity of 5 will make it 5\ntimes less common, etc. If no count-type placement was specified before this\nplacement, the count is assumed to be 1.\n\nin_square\n\nThis is used to include some random distribution within the chunk. Without this\nplacement, all of the spawn attempts would be made at the chunk’s 0x, 0z\ncoordinate. If you are using count_on_every_layer, you do not need to use\nin_square.\n\nheight_range\n\nDetermines the height this feature will try to spawn in. Accepts a constant, or\nother number providers like uniform or trapezoid. Whether using a constant or a\nnumber provider, each value must also be defined as “absolute” (this exact Y\nlevel), “above_bottom” (this many blocks above the lowest Y level of this\ndimension) or “below_top” (this many blocks below the highest Y level of this\ndimension, always a positive number). This allows some flexibility for\nsituations such as if the height of the dimension may change or is unknown.\n\nheightmap\n\nAccepts one of a few different heightmaps, including MOTION_BLOCKING,\nOCEAN_FLOOR, and WORLD_SURFACE_WG. This causes the feature to attempt to spawn\nat the highest block in the chosen X and Z coordinate, according to the selected\nheightmap. Unsurprisingly, this can cause undesired behavior if the dimension\nhas a roof, like the Nether.\n\nbiome\n\nDoesn’t have any other fields. Ensures that this feature won’t be allowed to\nspawn if the spawn attempt would be inside a biome that does not contain this\nplaced_feature in its listed features. Without it, if a chunk contains two\nbiomes, the feature would be allowed to “bleed” into the neighboring biome, even\nif it doesn’t belong there, as long as all other conditions are met (for\nexample, a Desert’s Cactus feature spawning in an adjacent Beach biome).\n\nblock_predicate_filter\n\nCan be used to apply one or more conditions based on nearby blocks, including\nthe block that has been selected for the spawn attempt. This can include details\nlike if the block below is solid or in a block tag, whether it has a sturdy\nface, or is a valid location for a sapling or mushroom to be placed.\n\nOne of the most important things to keep in mind when creating placed_features\nin particular is performance. More than anything else in worldgen, the\nplaced_features are going to have the greatest impact on the speed of your chunk\ngeneration. Features that have a high count, or hyper-specific\nblock_predicate_filters, can cause chunks to load more slowly. Similarly,\nincluding a height range for a feature that includes a lot of space that the\nfeature can’t spawn in can impact this chunk generation, as all of those failed\nspawn attempts still have to be calculated.","description":"This guide goes over how to create every step of a custom dimension, which includes custom biomes, terrain, and features.","url":"/wiki/worldgen/custom-worldgen/","tags":[]},{"title":"Item Components","content":"Item Components\n\nItem components are data structures which can be applied to items in Minecraft to give them special attributes, such as\na name, lore, being able to be eaten, etc. Each item has specific item components by default - for example, all food\nitems will have the minecraft:consumable component, which makes the item edible.\n\nA command such as /give or /item can be used to create an item which has\nadditional item components, or remove item components from any item.\n\nYou can check out all the components and their data structure on the Minecraft\nWiki: https://minecraft.wiki/w/Data_component_format#List_of_components","description":"Item components are data structures which can be applied to items in Minecraft to give them special attributes, such as a name, lore, being able to be eaten, etc.","url":"/wiki/concepts/item-components/","tags":[]},{"title":"Target Selectors","content":"Target Selectors\n\nTarget Selectors are used as an argument in commands to select entities and\nplayers in the world. We use target selectors to find players or mobs and do\nthings to them. Many commands need to be given a target selector as an argument,\nor otherwise require being executed as an entity.\n\nAll target selectors start with an @ symbol, followed by a base selector (see\nthe table below), and optionally any other criteria which will narrow down the\nselection further.\n\nExample: tellraw @adistance=..10] \"You're within 10 blocks of me\". The\ntarget selector is @a[distance=..10], and tells the game to only send the\nmessage to players within 10 blocks.\n\nBase target selectors\n\nIn Java Edition, there are 6 base target selectors:\n\n| Target Selector | Description|\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| @e| All Entities - By itself, this selector will select every single entity which is currently loaded in the world|\n| @s| This Entity - This selector will select the entity which is currently running the command. For example, if I run a command as @s, then it will run the commands as me. |\n| @a| All Players - This selects all currently online players. (All players are always loaded in the world).|\n| @r| Random Player - This selects one random player.|\n| @p| Nearest Player - This selects the nearest player to the position this command is ran from.|\n| @n| Nearest Entity - This selects the nearest entity (player or non-player) to the position this command is ran from.|\n\n\n\n@e only selects entities in a loaded chunk. If an entity exists but is not\ncurrently being loaded, it will not select that entity.\n\n\n\nAdditional arguments\n\nTarget selectors can (and usually are) followed by additional arguments to\nfilter the selection even more to only find the entities that you want. Target\nselector arguments are contained within square brackets after the base selector\n(@e[...]) and are written as\n[ :, =,...]\n\nExample: In our previous example (@a[distance=..10]), we use the argument\ndistance=..10 to specify that we only want to target entities which are less\nthan 10 blocks away.\n\n\n\nMost target selectors can be inverted by using =! meaning it will only select\nentities who do not match the argument. (E.g. @e[type=!minecraft:creeper] will\nselect every entity that is NOT a creeper)\n\n\n\n| Argument| Example| Description|\n| ------------------ | ---------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| type| @e[type=minecraft:pig]| Filters to only include entities of a certain type or entity_type tag. Valid with @e, @s and @n. type can be any entity ID or entity_type tag.|\n| name| @e[name=Aron]| Filters to include entities with a specific name. name is a string - it cannot be JSON text.|\n| distance| @e[distance=6]| Filters to include entities within a certain distance or range. .. is used to represent \"greater/less than\" operations - for example, ..6 means less than 6 and, 8.. means more than 8.|\n| nbt| @a[nbt={SelectedItem:{id:\"minecraft:stone\"}}]| Filters to include entities with specific [NBT data. NBT data will be partially matched - as long as the specified data exists on the entity, it doesn't matter what other data it has.|\n| sort and limit | @elimit=1,sort=nearest]| These two arguments are often used together to find entities based on ordering. For example, limit=5,sort=furthest selects the 5 entities which are furthest away from the current position.|\n| x/y/z| @e[x=10,y=9,z=-5,distance=..5]| Specifies a starting position to work from; affecting distance, dx/dy/dz, and sort/limit. If left blank, it defaults to~.|\n| dx/dy/dz| @e[x=10,y=13,z=87,dx=10,dy=20,dz=5]| Creates a selection area (cuboid) which will only select entities if part of their hit box is within the area. The current position or x/y/z is used as the position of the cuboid's corner, where the coordinates are the smallest. If at least one of the dx/dy/dz values are set, the others default to 0 if not set. The checked area is always 1 block bigger in the positive direction than specified, so the smallest checkable area is a 1x1x1 cube with all values at 0. |\n| tag| @a[tag=CustomTag]| Selects entities with a specified tag added with the /tag command or Tags[] NBT. No entities have tags by default - tags can only be added by the datapack or by commands.|\n| team| @a[team=red]| Selects entities in a specific team.|\n| scores| @e[scores={foo=10}]| Selects entities based on their value on a scoreboard. Like distance, you can use .. to specify ranges.|\n| predicate| @e[predicate=namespace:my_predicate]| Selects entities based on whether they pass a custom predicate check.|\n| gamemode| @a[gamemode=creative]| Selects players in a specific game mode.|\n| advancements| @a[advancements={minecraft:story/follow_ender_eye=true}] | Selects players based on whether they have unlocked a specific advancement.|\n| level| @a[level=10]| Selects players based on their current XP level (not amount of points).|\n\nMore information about the arguments:\n\ntype argument\n\nThe type=argument will filter the selection to only include\nentities of a certain type, or those in an entity_type tag.\n\nmust be a valid entity ID or entity_type tag ID. This argument\ncan only be used with @e, @s or @n.\n\nExamples:\n\n@e[type=minecraft:pig]: Selects all pigs\n@e[type=#minecraft:aquatic]: Selects all aquatic animals\n\nname argument\n\nThe name=argument will filter the selection to only include\nentities who have a specific name.\n\nis a simple string. This can not be a text component but\nname=Freddie would still match a styled name like\n{\"text\":\"Freddie\",\"color\":\"blue\"} or similar.\n\nExamples:\n\n@e[name=Aaron]: Selects all entities named Aaron\n@e[name=\"Aaron Aaronson\"]: Selects entities named Aaron Aaronson\n\n\n\nNote that names with more than one word need to be surrounded by quotes.\n\n\n\ndistance argument\n\nThe distance=argument will filter the selection to only\ninclude entities who are within a distance range.\n\ncan either be a value (such as 7) or a range (such as ..8\nor 21..)\n\nExamples:\n\n@e[distance=6]: Selects all entities which are exactly 6 blocks away from\nthe execution position.\n@e[distance=..20]: Selects all entities within 20 blocks of the execution\nposition.\n@e[distance=3..]: Selects all entities that are more than 3 blocks away from\nthe execution position.\n@e[distance=12..15]: Selects all entities between 12 and 15 (inclusive)\nblocks from the execution position.\n\nnbt argument\n\nThe nbt= argument will filter the selection to only include entities\nwhich have or do not have specific NBT data.\n\n`` is an [NBT compound. The entity must match everything within the compound.\n\nExamples:\n\n@anbt={SelectedItem:{id:\"minecraft:stone\"}}]: Selects all players who are\nholding stone\n@e[type=minecraft:arrow,nbt={inGround:1b}]: Selects all arrow entities who\nare in a block.\n\nsort and limit arguments\n\nThe sort=,limit=will limit the amount of possible entities\nit will select and will select entities based on the priority defined in\n .\n\ncan be one of the following:\n\narbitrary: sort in entity load order, which is arbitrary\nnearest: sort in increasing order of distance\nfurthest: sort in decreasing order of distance\nrandom: sort randomly (default type for @r)\n\ncan be any integer.\n\nExamples:\n\n@e[limit=1,sort=nearest]: Selects the nearest entity to the position of\nexecution\n@e[limit=5,sort=furthest]: Selects the furthest 5 entities from the position\nof execution.\n@e[limit=7,sort=random,type=minecraft:cow]: Selects 7 random cows..\n\nx/y/z arguments\n\nThe x/y/z=arguments do not directly change the selection, but are\nused alongside other arguments to specify a starting position to work from.\n\nThis argument(s) will affect the arguments distance, dx/dy/dz and\nsort/limit.\n\nExamples:\n\n@e[x=10,y=9,z=-5,distance=..5]: Selects all entities less than 5 blocks away\nfrom the position X=10/Y=9/Z=-5\n\ndx/dy/dz arguments\n\nThe dx/dy/dz arguments will create a cuboid that is at least 1x1x1 blocks big\nand the given value will increase the size of the cuboid in that direction by\nthe given value in blocks.\n\nAny entity fully or partially inside the cuboid will be selected.\n\nYou can mix and match dx, dz, and dz however you want. To create the\ncuboid at least 1 of the three has to be there.\n\n\n\nThe generated cuboid does not snap to the block grid\n\n\n\n\n\nThe base cuboid that gets generated with dx/dz/dz=0 will always stretch from the\ncommand origin to positive x/y/z\n\n\n\nExamples:\n\n@e[x=10,y=13,z=87,dx=10,dy=20,dz=5]: Selects any entities if any part of\ntheir hit box is within the cuboid w=11,h=21,l=6 starting from the position\nx=10,y=13,z=87\n@e[x=7,y=3,z=9,dx=0,dy=0,dz=0]: Selects any entities if their hit box\noverlaps with the block at x=7,y=3,z=9\n\ntag argument\n\nThe tag=argument will select entities which have the specified tag.\nis any tag string (no spaces).\n\nEntities do not naturally have tags - these are separate from entity_type tags\nsuch as that used in the type argument. Instead, these select entities based\non the [tags added with the /tag command or Tags[] NBT.\n\nExamples:\n\n@a[tag=CustomTag]: Selects all players with the tag CustomTag\n@e[tag=!ignore]: Selects all entities which do not have the ignore tag.\n\nteam argument\n\nThe team=argument will select entities which are in a specific\nteam. Since entities can only be in one team at a time, you cannot use team=\nmore than once, however you can duplicate negated team arguments (team=!).\n\nis any tag string (no spaces).\n\nExamples:\n\n@a[team=red]: Selects all players in the red team\n@e[team=Bears]: Selects all entities in the Bears team\n@e[team=!blue]: Selects all entities which are not in the blue team\n\nscores argument\n\nThe scores={ =,...} argument will select entities based on\ntheir value on a scoreboard.\n\nis a scoreboard objective which must exist already.can\nbe either an integer or a range.\n\nExamples:\n\n@e[scores={foo=10}]: Selects all entities with a score of exactly 10 on\nthe foo scoreboard.\n@e[scores={foo=5,bar=7}]: Selects all entities with a score of exactly 5\non the foo scoreboard and exactly 7 on the bar scoreboard.\n@e[scores={foo=8..}]: Selects all entities with a score of 8 or more on\nthe foo scoreboard.\n\npredicate argument\n\nThe predicate=argument will select entities based on whether they\npass a predicate check.is a predicate ID.\n\nExamples:\n\n@e[predicate=namespace:my_predicate]: Selects all entities who pass the\npredicate in data/namespace/predicates/my_predicate.\n@e[predicate=!namespace:another_predicate]: Selects all entities who fail\nthe predicate in data/namespace/predicates/another_predicate.json\n\ngamemode argument\n\nThe gamemode=(survival|creative|adventure|spectator) argument will select\nplayers who are in a specific game mode.\n\nExamples:\n\n@a[gamemode=creative]: Selects all players in creative mode\n\nadvancements argument\n\nThe advancements={ =(true/false)} argument will select\nplayers based on whether they've unlocked an advancement.\nis an advancement ID.\n\nExamples:\n\n@a[advancements={minecraft:story/follow_ender_eye=true}]: Selects all\nplayers who have unlocked the follow_ender_eye advancement.\n@a[advancements={minecraft:story/follow_ender_eye=false}]: Selects all\nplayers who have not unlocked the follow_ender_eye advancement.\n\nadvancements argument\n\nThe advancements={ =(true/false)} argument will select\nplayers based on whether they've unlocked an advancement.\nis an advancement ID.\n\nExamples:\n\n@a[advancements={minecraft:story/follow_ender_eye=true}]: Selects all\nplayers who have unlocked the follow_ender_eye advancement.\n@a[advancements={minecraft:story/follow_ender_eye=false}]: Selects all\nplayers who have not unlocked the follow_ender_eye advancement.\n\nlevel argument\n\nThe level=argument selects players based on their current XP level\n(not amount of points).\n\ncan be an integer or range.\n\nExamples:\n\n@a[level=10]: Selects all players who have an XP level of exactly 10.\n@a[level=4..]: Selects all players who have an XP level of 4 or more.\n\nx_rotation argument\n\nThe x_rotation=argument selects players based on their vertical\nrotation (pitch).\n\ncan be a floating point value or float range from -90 to 90\n\nExamples:\n\n@a[x_rotation=0..90]: Selects all players who are looking below the horizon\nor directly at the horizon.\n@a[x_rotation=90]: Selects all players who are looking straight down.\n\ny_rotation argument\n\nThe y_rotation=argument selects players based on their horizontal\nrotation (yaw).\n\ncan be a floating point value or float range from -180 to 180\n\nExamples:\n\n@a[y_rotation=-180]: Selects all players who are facing exactly due north.\n@a[y_rotation=-180..-90]: Selects all players who are looking between north\nand east or exactly north or east.","description":"Target Selectors are used as an argument in commands to select entities and players in the world. We use target selectors to find players or mobs and do things to them.","url":"/wiki/concepts/target-selectors/","tags":[]},{"title":"Styled Text","content":"Styled Text\n\nStyled text (bold, underline, colours, etc) is represented as NBT based\nstructures, called \"text components\". A text component is a way to format styled\ntext in Minecraft commands, and is used in many places such as /tellraw,\n/title, and more.\n\nInstead of just using standard text (for example \"Hello World\"), we can use\ntext components to format the text in a variety of ways, including colours, text\neffects, click events, hover events, language-based text, accessing NBT data,\nand more.\n\nFor more information about the NBT format in general, see the\nNBT page.\n\nFormat\n\nA text component is formatted as either an object\n({text:\"Hello World\",color:\"red\"}), or an array of objects\n({text:\"Hello\"},{text:\"World\"}]). An object could just be a normal string\n([\"Hello\", \"World\"] and \"Hello World\" are both valid text components).\n\nIf the text component is an array, then all the objects inherit the style from\nthe first object. For instance, if the first object in an array is styled to be\nred, then all the other objects in the array will also be red unless specified\notherwise.\n\nContent sources\n\nThe actual text of a text component can be either static text or from a source\nsuch as NBT or scoreboard. Every object requires one of the following:\n\ntext:\"\": A simple string of text.\nscore:{name:\"\",objective:\"\"}: The score of a player in an\nobjective. In some cases, name can be set to \"*\", which will access the\nscore of the player viewing the text.\nNBT: This will display the value of an NBT tag. If nbt is used in a text\ncomponent, then one of storage, entity, or block is also required. The\nfollowing properties should be used:\nnbt:\"\": The path to the NBT value. This is required - it should be a\nstring value following the NBT path format.\nstorage:\"\": The storage to get the NBT value from.\nentity:\"\": The entity to get the NBT value from.\nblock:\" \": The block to get the NBT value from.\ninterpret:(true/false): If true, then the NBT value's text will be parsed\nand interpreted as a text component. Defaults to false.\nselector:\"\": The name of a player or entity.\ntranslate:\"\": A translation key from language files defined in a\nresource pack. This will display the value of the key in the player's selected\nlanguage.\nwith: This can also optionally be used to insert arguments into the\ntranslation key. This should be an array of text components.\nfallback: This can also optionally be used to specify what to display if\nthe translation is not found. If this is not specified, the key itself will\nbe displayed if the translation is not found. This should be a string value.\nkeybind:\"\": The key which a player has bound to a keybind. (For\nexample, key.jump would show the text Space, assuming the player has not\nchanged the keybind).\n\nExample: This text component will display the value of the path\nShopData.Name in the NBT storage minecraft:xyz:\n\n{ \"nbt\": \"ShopData.Name\", \"storage\": \"minecraft:xyz\" }\n\nStyle properties\n\nThe following properties can be used in a text component to change the style\nof the text:\n\ncolor: The colour of the text. This can be one of the 16 standard colours\n(e.g \"red\", \"light_purple\", etc.), or a hex colour code (e.g \"#ff0000\").\nbold: Whether the text is bold. This can be true or false.\nitalic: Whether the text is italic. This can be true or false.\nunderlined: Whether the text is underlined. This can be true or false.\nstrikethrough: Whether the text is strikethrough. This can be true or\nfalse.\nobfuscated: Whether the text is obfuscated. Obfuscated text applies a\nspecial glitch effect to the text. This can be true or false.\n\nExample: This text will be \"Hello World\", in red, bold, and strikethrough:\n\n{ \"text\": \"Hello World\", \"color\": \"red\", \"bold\": true, \"strikethrough\": true }\n\nInteractivity properties\n\nThe following properties can be used in a text component to add\ninteractivity to the text:\n\ninsertion: Can be used to specify text to be inserted into the chat when the\ntext is shift-clicked. This should be a string value.\nclick_event: Can be used to specify an action to be performed when the text\nis clicked. This should be an object with the following properties:\naction: The action to be performed. This can be one of the following:\n\"open_url\": Opens the url in the field url in the player's web\nbrowser.\n\"run_command\": Runs the command in the field command (the player needs\npermission to run the commands, and this excludes commands like /say or\n/tell which make the player send something to chat).\n\"suggest_command\": Opens and inserts the contents of command into the\nplayer's chat box.\n\"copy_to_clipboard\": Copies the contents of the field value to the\nclipboard.\n\"change_page\": (books only) Changes the page of the book to the page\nspecified in the field page.\nurl or command or value or page: These fields should be added to\nclick_event alongside action depending on which action you use.\nhover_event: Can be used to specify what happens when a player hovers over\nthe text. This should be an object with the following properties\naction: The action to be performed. This can be one of the following:\n\"show_text\": Shows the text in the field value in a tooltip by the\nplayer's mouse.\n\"show_entity\": Shows the entity based on the fields uuid and id in a\ntooltip by the player's mouse.\n\"show_item\": Shows the item based on the fields id and components in\na tooltip by the player's mouse.\nvalue or uuid + id or id + components: These fields should be\nadded to hover_event alongside action depending on which action you use.\n\nExample: This text will be \"Click me\", in blue, and when clicked, it will\nrun the command /say Hello:\n\n{\n\"text\": \"Click me\",\n\"click_event\": { \"action\": \"run_command\", \"command\": \"/say Hello\" }\n}\n\nOther\n\nextra: This property can be used to add another component after, which\ninherits all the styles and interactivity from the parent object.\nseparator: If the text source returns multiple values (e.g. multiple\nentities with the selector source, or multiple NBT values with the nbt\nsource), this can be used to specify the separator between the values. This\nshould be a string value.\n\nText component generators\nWriting text components manually is tedious - there are numerous generators which can be used to quickly create text components. We recommend [our Minecraft Text Generator which has an easy UI, cool features like gradient creators, and is updated for modern versions.\n\nWriting text components manually is tedious - there are numerous generators\nwhich can be used to quickly create text components. We reccomend\nour Minecraft Text Generator which has an easy\nUI, cool features like gradient creators, and is updated for modern versions.\n\nIf you are a more advanced datapacker and want full control over the output,\nthese let you create text components one component at a time, with support for\nmore advanced features\n\nMisode\nMinecraftJSON.com","description":"Styled text in Minecraft commands is done through an NBT text format.","url":"/wiki/concepts/text/","tags":[]},{"title":"Coordinates","content":"Coordinates\n\nCoordinates in Minecraft are represented by an x, y, and z value. They are\nused to represent positions of entities, blocks, particles, sounds and more. In\ncommands, they are represented as simply x y z, where x, y, and z are\ndecimal numbers representing the coordinates on each axis.\n\nBlock coordinates are locked to the grid and are unique - there can only be one\nblock per set of coordinates. Block coordinates are whole numbers, for example\nyou can have a block at 123 86 94 but not 123.7 86.2 94.6. Entities are not\nlocked to the grid - they can be at decimal positions (and usually are).\n\nx.0 y.0 z.0 represents the bottom left corner of a block, not the centre. The\ncentre of a block would be represented by the coordinates x.5 y.5 z.5.\n\n\n\nEvery command and function in Minecraft is always executed at a position. This\nis usually the world spawn. You can change this using the commands \"execute at\"\nor \"execute positioned\".\n\n\n\nExamples\n\n/setblock 123 86 94 minecraft:pink_concrete: In this setblock command, we\ntell the game to put a pink concrete block at the coordinates 123 86 94.\n/tp @s 66.2 98 45.7: This command would teleport the current entity to the\nexact coordinates 66.2 98 45.7\n\nRelative Coordinates\n\nUsing the symbols ~ and ^, we can reference coordinates relative to the\ncurrent coordinates (for example, you can get the position\n7 blocks above the current position).\n\n represents the current position on any axis. For example, 1276 would\nteleport me to x=12 z=76 but keep y as the current position. The\ncoordinates~ would represent the position of the command - this is useful\nto do something at the current position such as placing a block or summoning an\nentity.\n\nThe ~ symbol can be followed by a number to include an offset to the current\nposition. For example,12 ~ would represent the current position offset by\n10 blocks on the y-axis (or in simpler terms: the position 10 blocks above the\ncurrent position). This can also be a negative number.\n\nSimilarly ^ represents a relative position, taking into account the current\nrotation too. The most common use for this is to get a position in front of the\ndirection of rotation. For example, you can use ^ ^ ^5 to get the position 5\nblocks in front of the current position in whatever direction the command or\nentity is rotated.\n\n^3 ^ ^ represents a vector 3 blocks perpendicular of the head (sway)\n^ ^3 ^ represents a vector 3 blocks \"above\" of the head (heave)\n^ ^ ^3 represents a vector 3 blocks in front of the head (surge)","description":"Coordinates in Minecraft are represented by an `x`, `y`, and `z` value. They are used to represent positions of entities, blocks, particles, sounds and more. In commands, they are represented as simply `x y z`, where `x`, `y`, and `z` are decimal numbers representing the coordinates on each axis.","url":"/wiki/concepts/coordinates/","tags":[]},{"title":"Ranges","content":"Ranges\n\nA range specifies a set of values between two numbers. Ranges are used in some\ncommands (such as execute) and selectors to specify a set of values to compare\nagainst.\n\nFor example, the distance= selector accepts a range to select entities within\na certain distance from the player. The range distance=..10 selects entities\nwithin 10 blocks of the player.\n\nGreater than (x >= 10)\n\nTo specify a range of numbers such as \"x or greater\", we can use the min..\nsyntax. The following range represents \"10 or greater\". Note that this range\nincludes 10.\n\n10..\n\nLess than (`x","description":"A range specifies a set of values between two numbers.","url":"/wiki/concepts/ranges/","tags":[]},{"title":"Resource Locations","content":"Resource Locations\n\nA resource location is a way of referencing a resource in a datapack (or\nresourcepack), such as a function.\n\nExample\n\nThis is an example of a resource location for a function:\n\n/function my_namespace:some_folder/my_function\n\nThis resource location would try and access the function\n/data/my_namespace/function/some_folder/my_function.mcfunction. Notice how we\ndon't need to specify the function folder in the resource location, as it is\nimplied by the /function command.\n\nResource locations for tags\n\nTo reference a tag (ie the function tag #minecraft:load), you can use the #\nsymbol before the tag name. For example:\n\n/function #minecraft:load\n\nThis resource location would try and access the tag\n/data/minecraft/tags/function/load.json. In this case, all functions in the\ntag would be ran.\n\nDefault namespace\n\nIf the namespace (my_namespace, before the colon) is left out, it will default\nto the minecraft namespace.\n\n/function some_folder/my_function\n\nThis resource location would try and access\n/data/minecraft/function/some_folder/my_function.mcfunction.\n\nAllowed characters\n\nA file name (and resource location) can only contain lowercase letters (a-z),\nnumbers (0-9), underscores (_), dashes (-) and periods (.). In a\nresource location, / can be used to separate folders.","description":"A resource location is a kind of identified used in Minecraft to point to a certain piece of data, such as a function, item, or storage.","url":"/wiki/concepts/resource-locations/","tags":[]},{"title":"Commands","content":"Commands\n\nCommands are the basic building blocks of most datapacks. Each command is a\nsimple instruction which can tell the game to do something. Most datapacks are\nmade primarily of functions - functions are just lists\nof commands ran in order.\n\nThere are too many commands for this wiki to go over each one individually.\nHowever, important commands can be found in the Command Reference section of\nthe sidebar.\n\nCommand Context\n\nProgramming Minecraft command is unique. Commands are always run with context -\nthis means commands always have a position (in a dimension), rotation, and\nexecutor entity. Functions inherit context from their caller, so if you run a\nfunction in chat, all the commands in the function will have the same context as\nif you ran them in chat.\n\nFunctions ran by the game, for instance tick, load, and scheduled functions,\nwill have the follwing context:\n\nthe executor is the game server. If you use @s in a command, it will not\nrefer to any entity.\nthe position of the command is the world spawn\nthe rotation of the command is 0, 0\n\nIf you run a command in chat, then:\n\nyou are the executor entity. If you use @s in a command, it refers to you.\nthe position and rotation of the command are where you are standing and\nlooking. If you use~ in a command, it refers to where your position.\n\nThe /execute command will change the context of a command. For instance, this\ncommand would change the executor to the player Silabear, and the position of\nthe command to 123 456 789:\n\nexecute as Silabear positioned 123 456 789 run say Hello!","description":"Commands tell the game to do things. [Functions](/wiki/files/functions) are files which are made up of many commands. They form the basic building blocks for any function datapack.","url":"/wiki/concepts/commands/","tags":[]},{"title":"Page Formatting","content":"Page Formatting\n\nLast Updated: 1-31-2025\n\nThis section goes over how we format wiki pages. We like to be consistent, so\nplease read through this section carefully and use these features to your\nadvantage:\n\nBasic Writing Guidelines\n\nWhen writing for the wiki, write in a way that is easy to understand and easy\nfor beginners to understand. Put yourself in the viewer's shoes. _What\nconfused you when you first learned about the topic? What new terms did you\nlearn?_ Avoid using technical terms without explaining them or point to a\nresource that explains them.\n\nDocumentation and tutorials are a great way to learn, but sometimes you don't\nneed to read every part of a page to understand it. When writing for the wiki,\nwrite in a way that makes it easy to scan and understand quickly. Some\nrecommendations are using white space to your advantage to break your page into\neasily digestible chunks.\n\nWhen learning a concept, it is helpful to have concrete examples that people can\nrefer to instead of just using a concept. This will help wiki-goers understand\nthe concept better and make it easier to remember.\n\nWriting Style\n\nThe datapacking community is a diverse group of people with different\nbackgrounds; many people don't speak English as their first language!\n\nWhen writing, try to follow these guidelines:\n\nUse the active voice. For example, instead of\nThe pig is teleported by the command, write\nThe command teleported the pig.\nDon't use unnecessary adverbs or adjectives\nTry not to use the words: _obvious, simple, basic, easy, actual, just,\nclear,_ and however\nExplicitly reference what you are explaining\nUse 's for indicating possession\nUse the Oxford comma\n\nTechnical information\n\nAll content on the website (except a few small exceptions) are made using a\ntechnology called mdsvex. This technology enables people like you to insert\nMarkdown with svelte components.\n\nIt is recommended to know what the proper way to format Markdown is in order to\nstay consistent and prevent confusion.\n\nThe front matter title is the same as the title in the sidebar and the title\non the page (heading 1 or single #)\nUse bold and italics sparingly and only when emphasis is needed\nUse headings to break up the page into sections\nCode blocks are used to show code snippets or commands\nAdmonitions are used to show important information\nunrelated to the content of the page\nTables are used to show large amounts of data\n\nEach page is made of 3 parts:\n\nfront matter (metadata about the page such as title, description, tags,\nversion, etc.)\ncontent (the actual content of the page)\ncomponents (custom components that allow for interactivity or other features\nnot able to be reproduced with markdown)\n\nEach is crucial to making the page look and feel how it does.\n\nFrontmatter\n\nWe try to keep the front matter as minimal as possible, but it is still\nrequired. Without it, the page will not display correctly on search engines or\nother sites. The front matter for this page looks like this:\n\ntitle: \"Site Development\" description: \"This page is meant to be an introduction\nto formatting a page for the wiki. In it is multiple examples which you can\nexamine raw in the site source code.\"\nversion: 1.21.5\n\nFront matter is denoted with triple hyphens (---) at the top of the page and\nthe end of the front matter.\n\nThe title should be the same as the title in the sidebar in order to reduce\nconfusion.\nThe description should be a short summary of the content of the page in\norder to show people what all is covered in the article.\nThe version should be set to the latest version that the page has been and\nworks in. If the page works in 1.21.4 but not in 1.21.5 or later, this should\nbe set to 1.21.4.\n\nCustom Elements\n\nOur markdown system adds unlimited customizability to the way we format our\npages. As of the time of writing, we have the following features:\n\nAdmonitions\nCode Titles\nMCFunction Formatting (Thanks Snave!)\nHighlighting\n\nAdmonitions are a way to warnings, info or tips, or other important information\nto your page.\n\n\n\nThis is an example of an info box.\n\n\n\n\n\nThis is an example of an info box.\n\n\n\nCode blocks are a way to format code in your page. These code blocks come with\nthe option to add a title to the code block for clarity. The Datapack Wiki\nsupports syntax highlighting for MCFunction which are used for code samples\nwhenever possible.\n\nfunction example() {\nconsole.log(\"Hello World!\");\n}\n\nHighlighting is a way to highlight specific text. It isn't commonly used, but\nexists.\n\nHighlighted Text like this.\n\nStandardized Elements\n\nThe wiki uses a few elements that are standardized across the entire wiki. Right\nnow this only consists of command syntax. You can find the command syntax we use\nin the commands page.","description":"This page is an introduction to formatting page content, and details about how the wiki handles formatting.","url":"/contribute/formatting/","tags":[]},{"title":"Git Practices","content":"Git Practices\n\nLast Updated: 12-13-2024\n\nThis page is an introduction to how we use Git in the\nwiki repository. In order to keep the\nwiki consistent and reputable, we have a few rules that we follow.\n\nGit provides a lot of features that are great for collaboration, and we try to\nuse them as much as possible.\n\n\n\nThis guide assumes you already have experience using Git before.\n\n\n\nForking and PRs\n\nForks are a great way to work on the wiki without introducing unfinished pages,\nchanges, etc. to main. You can click the\n\"Fork\" button in the top right\ncorner of the repository to create a fork of the repository. This will create a\ncomplete copy of the repository that you can work on.\n\nOnce you have forked the repository, you can clone it to your local machine.\n\nWhen it comes time to merge your changes, you can create a pull request, and a\nwiki contributor will review your contribution.\n\nBranches\n\nBranches are useful additions to help separate features in your fork. We use\nkebab-case for branch names meaning the branch name should be all lowercase\nwith hyphens to separate words. For example, if you are working on a page called\n\"Adding New Features\", the branch name should be adding-new-features.\n\nWe do not recommend you use branches for the main repository, even if you have\npermissions to. Branches in the repository are mainly for upcoming Minecraft\nversions or huge upcoming reworks, if you believe you have a reason to add a\nbranch to the main repository, let a wiki admin know.\n\nCommit Messages\n\nCommit messages are a great way to keep track of what changes have been made to\nthe wiki. Summarize the changes in the commit message and use the imperative\nmood.\n\nFor example, if you are adding a new page called \"Adding New Features\", the\ncommit message should be Add new page for adding new features. If you are\nfixing a typo on a page, the commit message could be\nFix typo in page about adding new features.\n\nOptionally, you can add a short description of the changes in the commit\nmessage. This is not required, but it is recommended.\n\nMerging\n\nWhenever you start working on a new branch or features, pull the latest changes\nfrom the main branch. This will ensure that you have the most up-to-date\nchanges.\n\nYou will likely run into an issue with the search.json file, which is used to\ngenerate the search index. This file is generated automatically and should not\nbe manually edited. A solution to this is to remove the search.json file and\noptionally run the search index generation script. This will regenerate the file\nand you can commit it.\n\nnode run ./gen_search_indexes_node.js\n\nOR\n\nbun ./gen_search_indexes.js\n\nOther Important Information\n\nMake a description of your changes in your PR.\nReviewers: Proofread changes before approving them.\nReviewers: It's not required, but it's recommended the changes follow American\nEnglish for consistency sake.","description":"This page is an introduction to our Git practices a page for the wiki.","url":"/contribute/git-practices/","tags":[]},{"title":"Resources","content":"Resources\n\nListed here are links to credible and reliable places and libraries to aid in\ncommand/datapack support and creation.\n\n\n\nThis wiki is run by Datapack Hub. We aren't responsible for the content on\nexternal sites or Discord Servers, so proceed with caution. However, they're all\nsafe to use and have amazingly useful content and tools for creating Minecraft\nDatapacks.\n\n\n\nCommunities\n\nDiscord\nDatapack Hub - Get help with\nMinecraft Datapacks, resource packs, commands and more.\nWebsite\nSmithed - A general (but non-help) datapack\ncommunity for sharing projects.\nDiscord\nMinecraft Commands - Get help with\nJava datapacks/commands or Bedrock addons.\nDiscord\nShaderLABS - Get help with vanilla\nshaders.\nDiscord\nBlockbench - Support for the\nBlockbench (3D model editor) app.\nDiscord\nFabricMC - Get help with Fabric\nand Fabric mods.\nDiscord\nMinecraft - Discuss Minecraft\ngenerally with people from around the world.\nDiscord\nAnimated Java - Support for\nthe Animated Java Blockbench plugin.\nDiscord\nDataworld (French) - A French discord\nserver for help with datapacks.\nDiscord\nAnthill\n(Russian) - A russian-speaking discord server for help with datapacks,\nresource packs and commands.\n\nGenerators\n\nWebsite\nMCStacker - Generate commands such as\n/summon, /give, and more.\nWebsite\nMisode - Generate files such as\nadvancements, predicates, recipes, worldgen, and more.\nWebsite\nTheDestruc7i0n Recipe\nGenerator - Generate simple recipes.\nWebsite\nMinecraft JSON - Generate JSON Text.\nWebsite\nBlock Display Engine - Create models with\ndisplay entities and export as commands.\nWebsite\nhaselkern's\nArmorStand - Generate summon commands for armor stands in any pose.\nWebsite\nDatapack Hub's Text Editor -\nCreate /tellraw commands and text components (JSON text) for Minecraft Java\nEdition with our easy-to-use, modern online tool!\n\nTools\n\nTool\nEasy Map\nUpdater - A toolset for automatically updating Minecraft maps (including\ndatapacks) to the latest version.\nTool\nWeld - The fastest data and resource\npack merger in the west.\n\nTemplates/Reference\n\nWebsite\nMinecraft Wiki - A detailed technical\nwiki covering all Minecraft mechanics.\nWebsite\nMisode's MCMeta - A GitHub\nrepository with every vanilla file (compiled by Misode).\nWebsite\ninventivetalent's Minecraft assets -\nWebsite with every vanilla file.\nWebsite\nCCCode's version-diff -\nShows all the differences in vanilla files between two versions.\nWebsite\nMisode's\nTick Order - A detailed sequence of events that occur during a Minecraft\nserver tick.\n\nTutorials/Content Creation\n\nYouTube\nCloud Wolf - Datapack\ntutorials, especially advanced concepts.\nYouTube\nSlicedlime - Covers all the\ntechnical changes in recent snapshots.\nYouTube\nConure - Small, but\ninformative datapack tutorials.\nYouTube\nLegitimoose - Easy to\nunderstand datapack and command tutorials.\nPMC Guide\nStructure\nGeneration Guide\nPMC Guide\nWorld\nGeneration Guide\nWebsite\nMCC's FAQs -\nA list of common questions along with tutorials for answers.\n\nLibraries\n\nLibrary\nTagLib - A curated\nlist of useful tag files.\nLibrary\nSmithed (Libraries) - A\ncollection of useful technical and compatibility libraries.\nLibrary\nPlayer Motion -\nAllows manipulating player's motion.\nLibrary\nBlockstate - Extracts\nthe BlockState data of any block at given position.\nLibrary\nBookshelf - A\nuser-friendly modular library datapack with lots of useful modules.\nLibrary\nIris - A raycasting library\nwith micrometric precision and taking into account individual block\ngeometries.\nLibrary\nAjjGUI - A Data-Driven GUI\nlibrary.\nLibrary\nMcfunction\nLogger - A library for logging things to the server console.\nLibrary\nMoxvallix's Library - The\nultimate Minecraft Datapack Library, constantly updated with new helpful\nfunctions.\n\nMods\n\nMod\nDatamancer - A tool for\ndatapack devs with several features, such as function profiling &\nbenchmarking, marker goggles, datapack autoreloading and more.\nMod\nDatapack debugger -\nSet breakpoints in the functions to \"freeze\" the game when the breakpoint is\nreached.\nMod\nBetter Suggestions -\nProvides more/better suggestions for Minecraft commands.\nMod\nNBT Autocomplete -\nAdds suggestions for NBT tags in commands.","description":"Listed here are links to credible and reliable places to aid in command support and creation.","url":"/resources/","tags":[]}]