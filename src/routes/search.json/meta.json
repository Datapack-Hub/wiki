[{"title":"Home","content":"\nWelcome to the Datapack Hub Wiki!\n\nTODO?\n\nHere, you'll find everything you need to know about creating, and mastering datapacks!\n\nWhat are Datapacks?\n\nDatapacks are similar to mods, but they are vanilla, TODO:\n\nWith datapack you can:\n\nAdd and modify custom recipes,\nModify existing or create new loot tables,\nAdd new advancements,\nCreate unique structures,\nAnd much more!\n\nReady to learn? Click here to get started.\n\nJoin the community!\n\nHave questions, ideas, or datapack creations you want to share? Join the Datapack Hub Discord server to connect with other datapackers!\n","tags":[],"versions":"latest","url":"/"},{"title":"Functions","content":"\nThis page is validated and up to date with Minecraft Java: 1.20.6\n\nFunctions\nFunctions are files essentially containing a list of Minecraft commands. Function files end in .mcfunction, and are located in the data//functions folder. Functions can be called (ran) using the function command. (See /function for more information)\n\nThe functions folder can contain sub-folders for organisation. This changes their reference accordingly - for example, a function located at data//functions/sub_folder/my_func.mcfunction would be called using function :sub_folder/my_func.\n\nWhen a function is run, the commands within it are executed in order. If the return command is run, the function stops executing immediately and any commands after the return are ignored.\n\nAny line in a function which starts with a # is a comment, and the game ignores it. Any other line is interpreted as a command\n\nExample\nThis function will give every player an apple, then tell them to enjoy the apple.\nGive a player the apple\ngive @a minecraft:apple\n\nTell them to enjoy the apple\nsay Enjoy the apple!\n\nMacro functions\nMacros can dynamically change part of a function by inserting NBT into it. Any function can define a macro within it. A macro is a command beginning with $. Macros can use a special syntax: $(). This will substitute for any value provided as `` when run.\n\nThe /function command can specify a NBT compound to use as the macro values. In traditional programming, this is best represented as someFunction(foo, bar)\n\nExample\nIn this example, we write a function that gives the player a number of diamonds using a macro.\ndata/example/functions/macro.mcfunction\n\nWhen called, $(count) will be replaced with some number, producing a valid command\n$give @s diamond $(count)\n\ndata/example/functions/give.mcfunction\nfunction example:macro {count: 7}\n\nThis also works\ndata modify storage example:storage count set value 12\nfunction example:macro with storage example:storage\n","tags":[],"versions":"latest","url":"/files/functions/"},{"title":"Tags","content":"\nThis page is validated and up to date with Minecraft Java: 1.20.6\n\nTags\nRegistry tags, not to be confused with entity tags, are essentially lists of groups such as blocks, items, entity types, etc. They use JSON format and are located in the data//tags/ folder.\n\nSpecial tags\nMinecraft uses some tags internally for certain behaviours. These tags are located in the minecraft namespace. For example:\nany functions in the #minecraft:load function tag will be automatically run when a datapack is loaded\nthe #minecraft:minable/pickaxe block tag lists blocks which are mined faster using a pickaxe.\n\nIn many cases, modifying these special tags allows you to configure certain aspects of how Minecraft behaves.\n\nRegistries\nTags group various types in a specific registry (category).\n\nThis list shows all of the possible registry types, as well as the path their tags should be put in.\nItems (/tags/items)\nBlocks (/tags/blocks)\nEntity types (/tags/entity_types)\nFunctions (/tags/functions)\nFluids (/tags/fluids)\nGame Events (/tags/game_events)\nChat Types (/tags/chat_type)\nDamage Types (/tags/damage_type)\nBanner patterns (/tags/banner_patterns)\nCat variants (/tags/cat_variant)\nEnchantments (/tags/enchantment)\nGoat horns (/tags/instrument)\nPaintings (/tags/painting_variant)\nEntity POI (/tags/point_of_interest_type)\nBiome (/tags/worldgen/biome)\nFlat world preset (/tags/worldgen/flat_level_generator_preset)\nStructures (/tags/worldgen/structure)\nWorld preset (/tags/worldgen/world_preset)\n\nJSON format\nTags have a very simple format, with two fields.\n\nreplace\nreplace is a boolean field which decides whether the tag should replace other tags with the same path, or merge with them. For example, if \"replace\": true is added to the tick.json function tag, only the tick functions in that datapack would load, as it would replace all other defined tick tags. If replace is false, it will merge with any values in tick.json within other packs.\nreplace is an optional field, and if not specified will default to false.\n\nvalues\nValues (values) is an array containing everything to group under this tag. Each element is a string, containing either the ID of the entry (such as minecraft:diamond_block), or the ID of another tag, beginning with a # (such as #minecraft:logs).\n\nExample\nHere is an example tag, located in data/example/tags/items/wood.json (example is the namespace being used).\n\n#minecraft:logs and #minecraft:planks are two item tags provided by Minecraft.\n\n\n{\n  \"replace\": true,\n  \"values\": [\n    \"#minecraft:logs\",\n    \"#minecraft:planks\",\n    \"minecraft:chest\",\n    \"minecraft:stick\"\n  ]\n}\n","tags":[],"versions":"latest","url":"/files/tags/"},{"title":"Credits","content":"\nCredits\nThe Datapack Wiki is brought to you by Datapack Hub in collaboration with Aandeel.\n\nManagers\nSilabear (web dev)\nCobblestone (web dev)\nAandeel (original idea + editing)\n\nEditorial Team\nGears\n\nContributors\nWant to be on this list? Anyone can contribute to our GitHub!\n","tags":[],"versions":"latest","url":"/credits/"},{"title":"/function","content":"\n This page is up to date and validated for the Minecraft version: 1.20.4\n\n/function command\nThis command runs any .mcfunction file when called. You can also pass in a NBT compound or NBT source path if the function is a macro function. All functions are run independently and one after another - for example, if you run function1 and then function2, then function2 will only run once function1 has finished.\n\nSyntax\nfunction :**: Runs the .mcfunction file at data//functions/\nfunction : {key:value}**: Runs the .mcfunction file at data//functions/, and uses the {key:value} if the function is a macro function.\n`function : with (block |entity |storage )","tags":[],"versions":"latest","url":"/command/function/"},{"title":"/execute","content":"\n This page is up to date and validated for the Minecraft version: 1.20.6\n\n/execute command\nThe execute command is used to execute other commands conditionally, or in a different context. The execute command is made up of multiple subcommands, which can be chained repeatedly and in any order to modify context in various ways.\n\nEach subcommand has its own syntax, and most allow/require another subcommand to follow.\n\nContext\nEvery command is executed in a context. Various execute subcommands can modify the context in which other commands are run.\nThe context includes:\nPosition: The position at which the command is executed (the origin of relative coordinates)\nAnchor: Either eyes or feet. Specifies the origin of local coordinates to either the eyes or feet of an entity.\nExecutor: The entity executing the command (which entity the @s selector refers to)\nRotation: The rotation of the command\nDimension: The dimension in which the command is executed\n\nForking\nSome commands cause a fork. That is, the following chain of subcommands get executed more than once. When a command is forked, it executes the fork as a whole, then proceeds to the next fork.\n\nFor example, if there are two markers A and B, and the following command is run: execute as @e[type=marker] run function example\nAnd the example function contained the following commands:\nsay first command\nsay second command\nThe chat output would look like this:\n[A] first command\n[A] second command\n[B] first command\n[B] second command\n\nSubcommands\n\nIn this documentation, ... represents another required subcommand, and [...] denotes that another subcommand is optional.\n\nexecute align  ...\nThe align  subcommand aligns the executing position to the specified axes (rounding down coordinates to integers). ` can be any subset of xyz`, in any order.\n\nExamples:\nexecute align xz ...\nexecute align yxz ...\n\nexecute anchored (eyes|feet) ...\nChanges the execution anchor to the eyes or feet of the entity.\n\nExamples:\nexecute anchored eyes ...\n\nexecute as  ...\nChanges the executor of the following subcommand to `` (Does not modify any other context such as location).\nIf `` refers to multiple entities, the following subcommand gets executed once for each referenced entity, with that entity as the executor.\nIf `` refers to no entities, the execute chain terminates and no further subcommands are run.\n\nExamples:\nexecute as @a[distance=10..] ...\nexecute as @e[type=pig] ...\n\nexecute at  ...\nChanges the position and rotation of the following subcommand to that of `` (Executor remains the same).\nForking rules apply the same as execute as.\n\nExamples:\nexecute at @s ...\nexecute at @p ...\n\nexecute facing  ...\nChanges the rotation of the following subcommand to face ``.\n` can either be a set of coordinates, or entity  (eyes|feet)`, which targets the eyes or feet of the given entity.\n\nExamples:\nexecute facing 0 0 0 ...\nexecute facing entity @e[type=marker,limit=1] feet\n\nexecute in  ...\nChanges the dimension of the following subcommand to ``.\nApplies dimension scaling, meaning coordinates are divided by 8 when transferring from the overworld to the nether.\n\nExamples\nexecute in minecraft:nether ...\n\nexecute on  ...\nChanges executor to other entities based on their relation with the current executor. Same forking rules apply as execute as.\nPossible values for `` are:\nattacker - The most recent entity to damage the current entity in the last 5 seconds.\ncontroller - The entity which is riding and in control of the current entity.\nleasher - The entity holding the the current entity on a lead.\norigin - The entity the current entity originated from, such as the player that shot an arrow.\npassengers - All entities riding the current entity (not including entities riding the passengers).\ntarget - The entity the current entity is trying to attack (angry at).\nvehicle - The entity that the current entity is riding.\n\nExamples\nexecute on passengers ...\nexecute on target ...\n\nexecute positioned  ...\nChanges the position (but not rotation) of the following subcommand to ``. Also resets anchor.\n` can be a set of coordinates, as , or over `.\npositioned as  ... is equivalent to at  ..., except that it doesn't change rotation or dimension.\npositioned over  sets the y coordinate of the position to be one above the specified heightmap.\n\nExamples:\nexecute position  0 -10 ...\nexecute positioned as @s ...\nexecute over world_surface ...\n\nexecute rotated  ...\nChanges the rotation of the following subcommand to ``.\n` can either be rotation coordinates, or as , which changes the rotation to that of the specified entity. For rotated as , forking rules apply the same as as entity`.\n\nExamples:\nexecute rotated ~10 0 ...\nexecute rotated as @e[tag=rotate] ...\n\nexecute summon  ...\nSummons the specified entity at the current position, and executes the following subcommand as that entity.\nNote: You cannot specify NBT data for the summoned entity.\n\nExamples:\nexecute summon iron_golem ...\nexecute summon marker ...\n\nexecute run \nRuns the specified command with the current context. Takes no further subcommands.\n\nThis is useless by itself, and should always be preceded by other subcommands.\n\nExamples:\nexecute run say hi\nexecute at @e[type=sheep] run setblock   ~ stone\n\nexecute store (result|success)  ...\nStores an integer value somewhere. If storing result, this numeric value is taken from the output of the final subcommand (Either a run subcommand or a condition). If storing success, the value is either 1 if the final subcommand succeeds (condition passes or command successfully performs its function), or 0 otherwise.\n\ntarget can be one of the following:\n`block","tags":[],"versions":"latest","url":"/command/execute/"},{"title":"Getting Started","content":"\nThis page is validated and up to date with Minecraft Java: 1.20.6\n\nGetting Started\nIf you're new to datapacks, you're at the right place. Looking around, getting into datapack creation might seem confusing, but once you've grasped the basics, you'll be off to a good start.\n\nThis Getting Started Page explains step-by-step, how to set up the file structure for a datapack, prominently for the use of .mcfunction files.\n\nWhat is a Datapack?\n\nIn hindsight a Datapack is a collection of .json files, and .mcfunction files, that provides a way to further customise the Minecraft Experience. Datapacks can be used to override or add new:\n  Advancements\n  Dimensions\n  Functions\n  Loot Tables\n  Predicates\n  Item Modifiers\n  Recipes\n  Structures\n  Tags\n  Damage Types\n  World Generation Settings\n  Biomes\n  Enchantments [1.21+]\n\nTools required for this tutorial\nYou will need a reliable text-editor, we recommend: Visual Studio Code with the Data-Pack Helper Plus (Extension) in conjunction with the language-mcfunction (Extension). (These extensions will aid in command syntax when making .mcfunction files).\n\nSetting up the base\nTo start, in the selected world save folder of your choice, go to the world's datapack folder located here: .minecraft/saves/(world)/datapacks\nIn this directory, create a new folder. You can name this anything you want.\n\nThe pack.mcmeta file:\nEnter the folder, and create a new file with the name and extension: pack.mcmeta. This is what Minecraft reads to identify the datapack.\nInside the pack.mcmeta file you'll need to paste these lines of code:\n{\n\t\"pack\": {\n\t\t\"pack_format\": 41,\n\t\t\"description\": \"(Fill this with your datapack's description.)\"\n\t}\n}\n\nPlease note that the pack_format number can change depending on future Minecraft Updates. 41 is the current major release datapack format number for 1.20.6.\n\nSave the pack.mcmeta file and in the same directory, create a new folder called data.\nInside the new data folder create 2 new folders. One named: minecraft and another named whatever you wish. The name you choose for this folder will impact the way you execute functions in future. Keep it simple, but unique to your project. If another datapack uses a similar name, then there will be compatibility issues. This folder that you create is called your namespace.\n\ntick and load .json files:\nThe tick.json file basically tells the game which .mcfunction file (we'll make this later) to run in an infinite loop, or rather 20 times every second\nThe load.json file basically tells the game which .mcfunction file to run when the datapack loads. This is useful to set up all of our data.\n\nInside the new minecraft folder create another folder named tags, and inside that another folder named functions, in this we'll be allocating our load and tick json files.\n\nCreate a new file called load.json, and inside paste this code:\n{\n\t\"values\": [\n\t\t\":load\"\n\t]\n}\n\n\nIn the same folder create another new file called tick.json, and inside paste this code:\n{\n\t\"values\": [\n\t\t\":tick\"\n\t]\n}\nIn both above examples, make sure to replace &lt;namespace&gt; with your namespace which you created in Step 6.\n\nWorking with .mcfunction files:\n\nBack to the data folder, go into your namespace folder, and create a folder within named: functions. This functions folder is where all of your .mcfunction files will be held.\nCreate a new file and name it tick.mcfunction, and another named load.mcfunction (These are the two functions which we specified in tick.json and load.json in Step 7.)\n\nFinal File Structure:\n\n.minecraft/saves/(world)/datapacks\n    └(your-datapack-name)\n      ├pack.mcmeta\n      └(data)\n        ├(minecraft)\n        |  └(tags)\n        |    └(functions)\n        |      ├load.json\n        |      └tick.json\n        └(foo)\n           └(functions)\n             ├load.mcfunction\n             └tick.mcfunction\n\nTo test that the datapack works, in the load.mcfunction file, type say hello new datapack. Save it and in-game, type the command /reload, If everything is setup correctly, the Say command should execute.\n\nPlease note, that .mcfunction files do NOT use the / prefix for commands. Adding a / will cause the datapack to not load, until it is removed from all commands that contain the prefix.\n","tags":[],"versions":"latest","url":"/getting-started/"},{"title":"Commands","content":"\nThis page is validated and up to date with Minecraft Java: 1.20.6\n\nCommands\nCommands tell the game to do things. Functions are files which are made up of many commands. They form the basic building blocks for any function datapack.\n\nCommand Syntax\nVariable | Meaning\n|---------\n `` | An argument.\n [entry] | An optional entry.\n [entryA|entryB|entryC] | Pick one of these. This is optional.\n (entryA|entryB|entryC) | Pick one of these. This is required\n ... | Some syntax is left out, you can find more about the command on its dedicated page\n\nEvery command &amp; what it does\nPermission level 2+\nThese commands require a permission level same or bigger than 2 to run them.\n/advancement grant|revoke  everything|only|from|through|until (|) - Gives, removes or checks player advancements\n/attribute   get|base|modifier ... - Can change or read attributes\n/bossbar list|add|remove|set|get [] ... - Changes and creates bossbars\n/clear [] [] [] - Clears items from the players inventory\n/clone   ... OR /clone from    ... - Copies blocks in an area from one place to another\n/damage   [] [at ]|[by ] [from ] - Damages selected entities\n/data get|merge|modify|remove ... - Changes block entity or entity NBT data (See more here: Data)\n   Data get: `/data get (block |entity |storage ) [","tags":[],"versions":"latest","url":"/basics/commands/"},{"title":"Target Selectors","content":"\nThis page is validated and up to date with Minecraft Java: 1.20.4\n\nTarget Selectors\nTarget Selectors are used as an argument in commands to select entities and players in the world. We use target selectors to find players or mobs and do things to them.\n\nExample: tellraw @a[distance=..10] \"You're within 10 blocks of me\". The target selector is @a[distance=..10], and tells the game to only send the message to players within 10 blocks.\n\nBase target selectors\nIn Java Edition, there are 5 base target selectors:\n\n@e**: @e selects all entities, no matter what type or where they are.\n@a*: @a selects all players. *This is equivalent to @e[type=player]\n@s**: @s selects the current entity who is running the command or function.\n@p*: @p selects the nearest player to the position of execution. *This is equivalent to @e[type=player,limit=1,sort=nearest]\n@r*: @r selects a random player. *This is equivalent to @e[type=player,limit=1,sort=random]\n\n@e only selects entities in a loaded chunk. If an entity exists but is not currently being loaded, it will not select that entity.\n\nAdditional arguments\nTarget selectors can (and usually are) followed by additional arguments to filter the selection even more to only find the entities that you want. Target selector arguments are contained within square brackets after the base selector (@e[...]) and are written as [:,=,...]\n\nExample: In our previous example (@a[distance=..10]), we use the argument distance=..10 to specify that we only want to target entities which are less than 10 blocks away.\n\nMost target selectors can be inverted by using =! meaning it will only select entities who do not match the argument. (E.g. @e[type=!minecraft:creeper] will select every entity that is NOT a creeper)\n\ntype argument\nThe type= argument will filter the selection to only include entities of a certain type, or those in an entity_type tag.\n\n` must be a valid entity ID or entity_type tag ID. This argument can only be used with @e or @s`.\n\nExamples:\n@e[type=minecraft:pig]: Selects all pigs\n@e[type=#minecraft:aquatic]: Selects all aquatic animals\n\nname argument\nThe name= argument will filter the selection to only include entities who have a specific name.\n\n`` is a string (it cannot be a JSON text component).\n\nExamples:\n@e[name=Aron]: Selects all entities named Aron\n@e[name=\"Aron Aronson\"]: Selects entities named Aron Aaronson\n\ndistance argument\nThe distance= argument will filter the selection to only include entities who are within a distance range.\n\n` can either be a value (such as 7) or a range (such as ..8 or 21..`)\n\nExamples:\n@e[distance=6]: Selects all entities which are exactly 6 blocks away from the execution position.\n@e[distance=..20]: Selects all entities within 20 blocks of the execution position.\n@e[distance=3..]: Selects all entities that are more than 3 blocks away from the execution position.\n@e[distance=12..15]: Selects all entities between 12 and 15 (inclusive) blocks from the execution position.\n\nnbt argument\nThe nbt= argument will filter the selection to only include entities which have or do not have specific NBT data.\n\n`` is an NBT compound. The entity must match everything within the compound.\n\nExamples:\n@a[nbt={SelectedItem:{id:\"minecraft:stone\"}}]: Selects all players who are holding stone\n@e[type=minecraft:arrow,nbt={inGround:1b}]: Selects all arrow entities who are in a block.\n\nsort and limit arguments\nThe sort=,limit= will limit the amount of possible entities it will select and will select entities based on the priority defined in ``.\n\n`` can be one of the following:\narbitrary: does not sort in any guaranteed order\nnearest: sort in increasing order of distance\nfurthest: sort in decreasing order of distance\nrandom: sort randomly (default type for @r)\n\n`` can be any integer.\n\nExamples:\n@e[limit=1,sort=nearest]: Selects the nearest entity to the position of execution\n@e[limit=5,sort=furthest]: Selects the furthest 5 entities from the position of execution.\n@e[limit=7,sort=random,type=minecraft:cow]: Selects 7 random cows..\n\nx/y/z arguments\nThe x/y/z= arguments do not directly change the selection, but are used alongside other arguments to specify a starting position to work from.\n\nThis argument(s) will affect the arguments distance, dx/dy/dz and sort/limit.\n\nExamples:\n@e[x=10,y=9,z=-5,distance=..5]: Selects all entities less than 5 blocks away from the position X=10/Y=9/Z=-5\n\ndx/dy/dz arguments\nThe dx/dy/dz= arguments will select any entities if their hitbox is partially inside a cuboid defined by the `s of dx (width), dy (height), and dz (length). ` can be any number.\n\nThe dx/y/z arguments create a cuboid of width dx, height dy, and length dz, starting from the point of execution OR the coordinates defined by the x/y/z arguments, and will only select entities if their hitbox partially or fully intersects with the cuboid.\n\nIf dx/dy/dz is set to 0, then it will select any entities if their hitbox contains the point of execution OR the coordinates defined by the x/y/z arguments.\n\nExamples:\n@e[x=10,y=13,z=87,dx=10,dy=20,dz=5]: Selects any entities if any part of their hitbox is within the cuboid w=10,h=20,l=5 starting from the position x=10,y=13,z-87\n@e[x=7,y=3,z=9,dx=0,dy=0,dz=0]: Selects any entities if their hitbox contains the point x=7,y=3,z=9\n\ntag argument\nThe tag= argument will select entities which have the specified tag. `` is any tag string (no spaces).\n\nEntities do not naturally have tags - these are separate from entity_type tags such as that used in the type argument. Instead, these select entities based on the tags added with the /tag command or Tags[] NBT.\n\nExamples:\n@a[tag=CustomTag]: Selects all players with the tag CustomTag\n@e[tag=!ignore]: Selects all entities which do not have the ignore tag.\n\nteam argument\nThe team= argument will select entities which are in a specific team. Since entities can only be in one team at a time, you cannot use team= more than once, however you can duplicate negated team arguments (team=!).\n\n`` is any tag string (no spaces).\n\nExamples:\n@a[team=red]: Selects all players in the red team\n@e[team=Bears]: Selects all entities in the Bears team\n@e[team=!blue]: Selects all entities which are not in the blue team\n\nscores argument\nThe scores={=,...} argument will select entities based on their value on a scoreboard.\n\n` is a scoreboard objective which must exist already. ` can be either an integer or a range.\n\nExamples:\n@e[scores={foo=10}]: Selects all entities with a score of exactly 10 on the foo scoreboard.\n@e[scores={foo=5,bar=7}]: Selects all entities with a score of exactly 5 on the foo scoreboard and exactly 7 on the bar scoreboard.\n@e[scores={foo=8..}]: Selects all entities with a score of 8 or more on the foo scoreboard.\n\npredicate argument\nThe predicate= argument will select players based on whether they pass a predicate check. `` is a predicate ID.\n\nExamples:\n@e[predicate=namespace:my_predicate]: Selects all entities who pass the predicate in /data/namespace/predicates/my_predicate.- - @e[predicate=!namespace:another_predicate]: Selects all entities who fail the predicate in /data/namespace/predicates/another_predicate.json`\n\ngamemode argument\nThe gamemode=(survival|creative|adventure|spectator) argument will select players who are in a specific game mode.\n\nExamples:\n@a[gamemode=creative]: Selects all players in creative mode\n\nadvancements argument\nThe advancements={=(true/false)} argument will select players based on whether they've unlocked an advancement. `` is an advancement ID.\n\nExamples:\n@a[advancements={minecraft:story/follow_ender_eye=true}]: Selects all players who have unlocked the follow_ender_eye advancement.\n@a[advancements={minecraft:story/follow_ender_eye=false}]: Selects all players who have not unlocked the follow_ender_eye advancement.\n\nadvancements argument\nThe advancements={=(true/false)} argument will select players based on whether they've unlocked an advancement. `` is an advancement ID.\n\nExamples:\n@a[advancements={minecraft:story/follow_ender_eye=true}]: Selects all players who have unlocked the follow_ender_eye advancement.\n@a[advancements={minecraft:story/follow_ender_eye=false}]: Selects all players who have not unlocked the follow_ender_eye advancement.\n\nlevel argument\nThe level= argument selects players based on their current XP level (not amount of points).\n\n`` can be an integer or range.\n\nExamples:\n@a[level=10]: Selects all players who have an XP level of exactly 10.\n@a[level=4..]: Selects all players who have an XP level of 4 or more.\n\nTODO x_rotation and y_rotation\n","tags":[],"versions":"latest","url":"/basics/target_selectors/"},{"title":"MissingNo.","content":"Welcome to the site guide page\n\nThis page is meant to be an introduction to developing a page for the wiki. In it is multiple examples which you can examine raw in the site source code.\n\nBasic formatting\n\nAll content on the website (other than navbar, sidebar and things that are not the actual wiki pages) are made using a technology called mdsvex. This technology enables people like you to insert markdown with svelte components.\n\nEach page is made of 3 parts:\n\nfront matter (metadata about the page such as title)\ncontent (the actual content of the page)\ncomponents (custom components that allow for interactivity or other non text content)\n\nEach is crucial to making the page look and feel how it does.\n\nFormatting Examples\n\nTesting?\n\nHeading 1\nParagraph text under heading 1\n\nHeading 2\nParagraph text under heading 2\n\nHeading 3\nParagraph text under heading 3\n\n\nI have some code for you. Here's some more:\n\n{\n    \"this.is\":\"cool!\"\n}\n\nI am a very important piece of information. Please don't ignore me. I'm only smol.\n\nThe stuff in this box is probably very important.\n\nYou can do this really cool thing. It'll make your life a lot better!\n\nThis guide is updated to the version:\nThis page is validated and up to date with Minecraft Java: 1.20.6\n\nThe latest pack format is\n\nContributing\n\nWe prefer that you clone the repo first, then submit a pull request if you wish to contribute to the page, we are fine with you signing the page to prove you made it, but we believe in less is more, so don't clog up space for a self promo plug.\n","tags":[],"versions":"latest","url":"/site-dev/"},{"title":"Resources","content":"Resources\nListed here are links to credible and reliable places to aid in command support and creation.\n\nDatapack Hub\nDiscord https://discord.datapackhub.net\nPlanetMinecraft\n\nMCStacker\n\n&gt; Website https://mcstacker.net/\n&gt;\n&gt; Discord https://discord.gg/WCb6GNf/\n\nData Pack Generators\n\n&gt; Website https://misode.github.io/\n\n","tags":[],"versions":"latest","url":"/resources/"},{"title":"Home","content":"\nSNBT Format\nSNBT (Stringified Named Binary Tags) format is a JSON-like tree structure used in datapack development to manipulate the NBT data of an entity. SNBT is a human-readable version of NBT (Named Binary Tags), which is a format used by Minecraft to store data. NBT is used to store data about entities, items, blocks, structures, game saves, and more.+\n\nSNBT consists of key/value pairs, which are represented as key:value. These are contained with compounds, marked with curly brackets ({}). Compounds can contain multiple key/value pairs, which are separated with commas, like so: key:value,key:value,key:value\n\nAn example SNBT structure looks like: {name:\"Silabear\",age:102,friends:[\"Flynecraft\",\"Aandeel\",\"Cobblestone\"],socials:{discord:\"silabear\",twitch:\"silabearr\"}}\n\nData Types\nSNBT has a few data types you can use to represent different types of data, including whole numbers, decimal numbers, string, text, booleans, and more.\n\nStrings\nStrings can store any text value, or more technically, any sequence of unicode characters.\n\nFormat: Strings are stored within either double or single quotes. For strings containing standard characters (A-Z, a-z, 0-9, -,_,+,.), the quotes are optional, but recommended. `\"","tags":[],"versions":"latest","url":"/nbt/snbt/"}]