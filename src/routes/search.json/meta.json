[{"title":"Home","content":"\nHeading 1\nParagraph text under heading 1\n\nHeading 2\nParagraph text under heading 2\n\nHeading 3\nParagraph text under heading 3\n\nI have some code for you. Here's some more:\n\n{\n    \"this.is\":\"cool!\"\n}\n\nI am a very important piece of information. Please dont ignore me. I'm only smol.\n\nThe stuff in this box is probably very important.\n\nYou can do this really cool thing. It'll make your life a lot better!\n\nThe latest pack format is","tags":[],"versions":"latest","url":"/"},{"title":"Getting Started","content":"\nThis page is validated and up to date with Minecraft Java: 1.20.4\n\nGetting Started\nIf you're new to datapacks, you're at the right place. Looking around, getting into datapack creation might seem confusing, but once you've grasped the basics, you'll be off to a good start.\n\nThis Getting Started Page explains step-by-step, how to set up the file structure for a datapack, prominently for the use of .mcfunction files.\n\nWhat is a Datapack?\n\nIn hindsight a Datapack is a collection of .json files, and .mcfunction files, that provides a way to further customise the Minecraft Experience.\nDatapacks can be used to override or add new:\n  Advancements\n  Dimensions\n  Functions\n  Loot Tables\n  Predicates\n  Item Modifiers\n  Recipies\n  Structures\n  Tags\n  Damage Types\n  World Generation Settings\n  Biomes\n\nWhat will you need to make a Datapack?\n\nA reliable text-editor, we recommend: Visual Studio Code with the Data-Pack Helper Plus (Extention) in conjunction with the language-mcfunction (Extension). [These extensions will aid in command syntax when making .mcfunction files].\n\nHow to set up the base of the Datapack:\n\nTo start, in the selected world save folder of your choice, go to the world's datapack folder located here: .minecraft/saves/(world)/datapacks\nIn this directory, create a new folder. You can name this anything you want.\n\nThe pack.mcmeta file:\n\nEnter the folder, and create a new file with the name and extention: pack.mcmeta, this is what Minecraft Reads to identify the file as a datapack.\nInside the pack.mcmeta file you'll need to paste these lines of code:\n{\n\t\"pack\": {\n\t\t\"pack_format\": 26,\n\t\t\"description\": \"(Fill this with your datapack's description.)\"\n\t}\n}\n\nPlease note that the pack_format number can change depending on future Minecraft Updates. 26 is the current major release datapack format number for 1.20.4.\n\nSave the pack.mcmeta file and in the same directory, create a new file named: data.\nInside the new data folder create 2 new folders. One named: minecraft and another named whater you wish. The name you choose for this folder will impact the way you execute functions in future. So keep it short and simple. examples: main or map. This is the folder where we'll be adding all of the .mcfunction files. (In these docs, foo will be used as the example.)\n\nTick and Load .json files:\n\nThe tick.json file allocates a select file in our yet to be created functions folder to be the designated .mcfunction file that runs every tick (A bit like a repeating command block.)\nThe load.json file allocates a select file in out yet to be created functions folder to be the designated .mcfunction file that runs every time the datapack is reloaded in-game with /reload.\n\nInside the new minecraft folder create another folder named tags, and inside that another folder named functions, in this we'll be allocating our load and tick json files.\n\nCreate a new file called load.json, and inside paste this code:\n{\n\t\"values\": [\n\t\t\"foo:load\"\n\t]\n}\n&gt; Replace the foo with the name of the folder you chose that effects your functions. (Provided examples were main or map)\n\n\nAnd in the same folder create another new file called tick.json, and inside pase this code:\n{\n\t\"values\": [\n\t\t\"foo:tick\"\n\t]\n}\n&gt; Replace the foo with the name of the folder you chose that effects your functions. (Provided examples were main or map)\n\nWorking with .mcfunction files:\n\nBack to the data folder, go into the folder you named for your functions, and create a folder within named: functions\nThis functions folder is where all of your .mcfunction files will be held. Create a new file and name it tick.mcfunction and another named load.mcfunction These are the two files we setup the allocation for prior.\n\nFinal File Structure:\n\n.minecraft/saves/(world)/datapacks\n    └(your-datapack-name)\n      ├pack.mcmeta\n      └(data)\n        ├(minecraft)\n        |  └(tags)\n        |    └(functions)\n        |      ├load.json\n        |      └tick.json\n        └(foo)\n           └(functions)\n             ├load.mcfunction\n             └tick.mcfunction\n\nTo test that the datapack works, in the load.mcfunction file, type say hello new datapack. Save it and in-game, type the command /reload, If everything is setup correctly, the Say command should execute.\n\nPlease note, that .mcfunction files do NOT use the / prefix for commands. Adding a / will cause the datapack to not load, until it is removed from all commands that contain the prefix.\n","tags":[],"versions":"latest","url":"/getting-started/"},{"title":"Credits","content":"\nCredits\nBrought to you by datapackhub.net\n\nDevelopers\nSilabear\nCobblestone\n\nEditorial Team\nAandeel\n\nContributors\n","tags":[],"versions":"latest","url":"/credits/"},{"title":"/function","content":"\n This page is up to date and validated for the Minecraft version: 1.20.4\n\n/function command\nThis command runs any .mcfunction file when called. You can also pass in a NBT compound or NBT source path if the function is a macro function. All functions are run independently and one after another - for example, if you run function1 and then function2, then function2 will only run once function1 has finished.\n\nSyntax\nfunction :**: Runs the .mcfunction file at data//functions/\nfunction : {key:value}**: Runs the .mcfunction file at data//functions/, and uses the {key:value} if the function is a macro function.\n`function : with (block |entity |storage )","tags":[],"versions":"latest","url":"/command/function/"},{"title":"Target Selectors","content":"\nThis page is validated and up to date with Minecraft Java: 1.20.4\n\nTarget Selectors\nTarget Selectors are used as an argument in commands to select entities and players in the world. We use target selectors to find players or mobs and do things to them.\n\nExample: tellraw @a[distance=..10] \"You're within 10 blocks of me\". The target selector is @a[distance=..10], and tells the game to only send the message to players within 10 blocks.\n\nBase target selectors\nIn Java Edition, there are 5 base target selectors:\n\n@e**: @e selects all entities, no matter what type or where they are.\n@a*: @a selects all players. *This is equivalent to @e[type=player]\n@s**: @s selects the current entity who is running the command or function.\n@p*: @p selects the nearest player to the position of execution. *This is equivalent to @e[type=player,limit=1,sort=nearest]\n@r*: @r selects a random player. *This is equivalent to @e[type=player,limit=1,sort=random]\n\n@e only selects entities in a loaded chunk. If an entity exists but is not currently being loaded, it will not select that entity.","tags":[],"versions":"latest","url":"/basics/target_selectors/"},{"title":"Commands","content":"\nCommands\nCommands tell the game to do things. Functions are files which are made up of many commands","tags":[],"versions":"latest","url":"/basics/commands/"}]