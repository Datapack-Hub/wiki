[{"title":"Home","content":"Welcome to the Datapack Wiki!\n\nThis is a community-built wiki documenting features of Minecraft Datapacks. On this site, you can find all you need to\nknow to start making your own datapacks, as well as resources for more advanced datapackers.\n\nWhat are Datapacks?\n\nDatapacks are similar to mods, but they are vanilla,\n\nWith datapacks you can:\n\nAdd and modify custom recipes,\nModify existing or create new loot tables,\nAdd new advancements and enchantments,\nCreate unique structures,\nAnd much more!\n\nReady to learn? Click here to get started.\n\nJoin the community!","url":"/","tags":[]},{"title":"MissingNo.","content":"meta.json\n\nmeta.json is a VERY important file, it is highly compressed in order to speed up downloading, do not attempt to modify\nthis file by hand! Instead, run the gen_search_indexes.js script with Bun or on the CI!\n\nif you encounter merge problems with this file, do not try to rectify them yourself, instead, delete the file, and run\nthe gen_searches_indexes.js script","url":"/search.json/","tags":[]},{"title":"All Commands List","content":"Syntax\n\n| Variable                 | Meaning                                                                            |\n| ------------------------ | ---------------------------------------------------------------------------------- |\n|           | An argument.                                                                       |\n| [entry]                | An optional entry.                                                                 |\n| [entryA│entryB│entryC] | Pick one of these. This is optional.                                               |\n| (entryA│entryB│entryC) | Pick one of these. This is required                                                |\n| ...                    | Some syntax is left out, you can find more about the command on its dedicated page |\n\nList of all commands\n\nPermission level 2+\n\nThese commands require a permission level same or bigger than 2 to run them.\n\n/advancement grant|revoke everything|only|from|through|until (|) - Gives, removes or checks\nplayer advancements\n/attribute get|base|modifier|reset ... - Can change or read attributes\n/bossbar list|add|remove|set|get [ ] ... - Changes and creates bossbars\n/clear [ ] [ ] [ ] - Clears items from the players inventory\n/clone ... OR /clone from ... - Copies blocks in an\narea from one place to another\n/damage [ ] [at ]|[by ] [from ] - Damages selected entities\n/data get|merge|modify|remove ... - Changes block entity or entity NBT data (See more here:\n/data)\nData get: /data get (block |entity |storage ) [ ] [ ]\nData merge: /data merge (block |entity |storage ) \nData modify: /data modify |entity |storage ) (append|insert |merge)\nData remove: /data remove (block |entity |storage ) \n/datapack disable |enable (first|last|before|after)|list [available|enabled] - Enables and disables\ndatapacks\n/debug start|stop|function  - Starts or stops a debug session.\n/difficulty [peaceful|easy|normal|hard] - Sets or gets the difficulty of a world\n/effect clear [ ] [ ]|give [ |infinite] [ ] [ ] -\nChanges the entity's effects\n/enchant [ ] - Changes enchants of the item the entity is holding (NOTE: You can't\nenchant items with a level higher than what is possible in survival.)\n/execute ... - Executes a different command (See more here: /execute)\n/experience add|set|query... - Adds, removes or checks the players experience points (ALIAS: /xp)\n/fill [destroy|hollow|keep|outline|replace [ ]] -\n/fillbiome [replace ] -\n/forceload add [ ]|remove all OR [ ]|query [ ]> - Forces chunks to be loaded constantly\n/function |with (block |entity |storage ) [ ] - Triggers a\nfunction\n/gamemode [ ] - Changes the player's gamemode\n/gamerule [ ] - Changes or checks a gamerule\n/give [ ] - Gives an item to the player\n/item modify|replace (block |entity )... - Changes or copies items from inventories of\nentities or blocks\n/jfr start|stop - Starts or stops JFR(Java FlightRecorder + some other custom events) profiling.\n/kick [ ] - Kicks a player off a server. (NOTE: A player in a single player world or the host of a\nworld cannot be kicked tho)\n/kill [ ] - Can kill entities\n/locate structure |biome |poi  - Displays the coordinates of the nearest biome, structure or\na point of interest\n/loot loot  - Spawns a given loot table into a specified inventory or into the world\n/particle [ ] OR particle [force|normal] [ ] - Spawns a\nparticle\n/place feature|jigsaw|structure|template ... - Places a structure, a feature, a structure template or a template\npool\n/playsound [ ] [ ] [ ] [ ] - Plays a specified sound to a\nplayer\n/random value|roll|reset ... - Rolls a random number\n/recipe give|take  - Gives or takes recipes from the player\n/reload - Reloads all datapacks in a world. (If there is a bug in the pack, it doesn't reload it and uses the\nprevious version)\n/return |fail|run  - Control execution flow inside functions and change their return value\n/ride mount |dismount - Used to make an entity ride or dismount a different entity\n/rotate [ ]>> - Used to rotate an entity, works similarly to /teleport but doesn't dismount the entity it's riding.\n/say  - Sends a message into chat to all players\n/schedule function [append|replace] OR clear  - Schedules a function\n/scoreboard objectives|players ... - Manages scoreboard objectives and players\n/setblock [destroy|keep|replace] - Changes or replaces a specified block with a different one\n/spawnpoint [ ] [ ] [ ] - Changes the spawn point for a player\n/spectate [ ] - Makes a player spectate an entity, the player has to be in spectator mode.\n/spreadplayers [under ]  - Teleport entities\nrandomly across a specified area\n/stopsound [ ] [ ] - Stops any playing sound\n/summon [ ] [ ] - Summons an entity\n/tag add |remove | list - Adds, removes or lists entities tags\n/team list|add|remove|empty|join|leave|modify ... - Manages teams\n/teleport [ ] |facing [ ]>]> ... - Teleport entities to a specified location. (ALIAS: /tp)\n/tellraw  - Sends a JSON message to players\n/tick query|rate |freeze|unfreeze|step [|stop]|sprint [|stop] - Controls or checks the tick rate\nof a world\n/time add |query (daytime|gametime|day)|set  - Controls or checks the time of a\nworld\n/title (times clear|reset|title |subtitle |actionbar ) -\nDisplays text on the player's screen\n/weather weather (clear|rain|thunder) [ ] - Changes the weather\n/worldborder add|center|damage|get|set|warning ... - Controls the worldborder\n\nPermission level 0\n\nThese commands can be run by any player, no matter their permission level.\n\n/help [ ] - Shows the help menu for commands\n/list [uuids] - Lists players on the server.\n/random (roll|value)  - Creates a random value (\\ requires OP)\n/seed - Displays the world's seed (In multiplayer requires your op level to be 2+)\n/teammsg  - Sends a message to all players in the same team of the command runner. (Alias /tm)\n/me  - Displays a message about the sender.\n/msg  - Sends a private message to a player. (Alias /tell and /w)\n/tell  - Sends a private message to a player (Alias /msg and /w)\n/w  - Sends a private message to a player (Alias /tell and /msg)\n/trigger [add|set] [ ] - Displays the world's seed\n\nMultiplayer Commands\n\nThese commands can only be run only on a server.\n\n/ban [ ] - Adds the player profile into the server's blacklist\n/ban-ip [ ] - Adds the player's IP address into the server's blacklist\n/banlist [ips|players] - Displays the server's blacklist\n/op  - Makes a player operator\n/deop  - Removes a player operator status\n/pardon  - Removes player's profile from the server's blacklist\n/pardon-ip  - Removes player's IP address from the server's blacklist\n/perf start|stop - Captures info and metrics about the game for 10 seconds\n/save-all [flush] - Saves the server to a disk\n/save-on - Enables automatic server saves.\n/save-off - Disables automatic server saves.\n/setidletimeout  - Used to set the time before idle players are kicked (If 0 - disabled)\n/stop - Stops the server\n/transfer [ ] [ ] - Transfers a player to a different server\n/whitelist on|off|list|reload|remove|add ... - Can change the server's whitelist\n\nSingleplayer Commands\n\nThis command can only be run in singleplayer, not on a server.\n\n/publish [ ] [ ] [ ] - Opens a singleplayer world to your local network","url":"/wiki/command/all/","tags":[]},{"title":"/function","content":"/function command\n\nThis command runs any .mcfunction file when called. You can also pass in a NBT compound or NBT source path if the\nfunction is a macro function. All functions are run independently and one after another - for example, if you run\nfunction1 and then function2, then function2 will only run once function1 has finished.\n\nSyntax\n\nfunction : **: Runs the .mcfunction file at data/ /function/ \nfunction : {key:value}**: Runs the .mcfunction file at\ndata/ /function/ , and uses the {key:value} if the function is a macro function.\nfunction : with (block |entity |storage ) **: Runs the\n.mcfunction file at data/ /function/ , and uses the NBT source if the function is a macro\nfunction.\n\n:::tip\nYou can stop a function running in real-time using the return command.\n:::","url":"/wiki/command/function/","tags":[]},{"title":"/execute","content":"/execute command\n\nThe execute command is used to execute other commands conditionally, or in a different context. The execute command is\nmade up of multiple subcommands, which can be chained repeatedly and in any order to modify context in various ways.\n\nEach subcommand has its own syntax, and most allow/require another subcommand to follow.\n\nContext\n\nEvery command is executed in a context. Various execute subcommands can modify the context in which other commands are\nrun. The context includes:\n\nPosition: The position at which the command is executed (the origin of relative coordinates)\nAnchor: Either eyes or feet. Specifies the origin of local coordinates to either the eyes or feet of an entity.\nExecutor: The entity executing the command (which entity the @s selector refers to)\nRotation: The rotation of the command\nDimension: The dimension in which the command is executed\n\nForking\n\nSome commands cause a fork. That is, the following chain of subcommands get executed more than once. When a command is\nforked, it executes the fork as a whole, then proceeds to the next fork.\n\nFor example, if there are two markers A and B, and the following command is run:\nexecute as @e[type=marker] run function example  \nAnd the example function contained the following commands:\n\nsay first command\nsay second command\n\nThe chat output would look like this:\n\n[A] first command\n[A] second command\n[B] first command\n[B] second command\n\nSubcommands\n\n:::info\nIn this documentation, ... represents another required subcommand, and [...] denotes that another subcommand\nis optional.\n:::\n\nexecute align...\n\nThe align subcommand aligns the executing position to the specified axes (rounding down coordinates to integers).\n  can be any subset of xyz, in any order.\n\nExamples:\n\nexecute align xz ...  \nexecute align yxz ...\n\nexecute anchored (eyes|feet) ...\n\nChanges the execution anchor to the eyes or feet of the entity.\n\nExamples:\n\nexecute anchored eyes ...\n\n:::warning\nWhen the position is changed not relative to the player, it resets back to feet. You can lock this though by\nusing positioned ^ ^ ^ after it.\n:::\n\nexecute as...\n\nChanges the executor of the following subcommand to   (Does not modify any other context such as location).  \nIf   refers to multiple entities, the following subcommand gets executed once for each referenced entity, with\nthat entity as the executor.  \nIf   refers to no entities, the execute chain terminates and no further subcommands are run.\n\nExamples:\n\nexecute as @a[distance=10..] ...  \nexecute as @e[type=pig] ...\n\nexecute at...\n\nChanges the position and rotation of the following subcommand to that of   (Executor remains the same).  \nForking rules apply the same as execute as.\n\nExamples:\n\nexecute at @s ...  \nexecute at @p ...\n\nexecute facing...\n\nChanges the rotation of the following subcommand to face  .  \n  can either be a set of coordinates, or entity (eyes|feet), which targets the eyes or feet of the\ngiven entity.\n\nExamples:\n\nexecute facing 0 0 0 ...  \nexecute facing entity @e[type=marker,limit=1] feet\n\nexecute in...\n\nChanges the dimension of the following subcommand to  .  \nApplies dimension scaling, meaning coordinates are divided by 8 when transferring from the overworld to the nether.\n\nExamples\n\nexecute in minecraft:nether ...\n\nexecute on...\n\nChanges executor to other entities based on their relation with the current executor. Same forking rules apply as\nexecute as.  \nPossible values for   are:\n\nattacker - The most recent entity to damage the current entity in the last 5 seconds.\ncontroller - The entity which is riding and in control of the current entity.\nleasher - The entity holding the the current entity on a lead.\norigin - The entity the current entity originated from, such as the player that shot an arrow.\npassengers - All entities riding the current entity (not including entities riding the passengers).\ntarget - The entity the current entity is trying to attack (angry at).\nvehicle - The entity that the current entity is riding.\n\nExamples\n\nexecute on passengers ...  \nexecute on target ...\n\nexecute positioned...\n\nChanges the position (but not rotation) of the following subcommand to  . Also resets anchor.  \n  can be a set of coordinates, as , or over .  \npositioned as... is equivalent to at..., except that it doesn't change rotation or dimension.  \npositioned over  sets the y coordinate of the position to be one above the specified heightmap.\n\nExamples:\n\nexecute position  0 -10 ...  \nexecute positioned as @s ...  \nexecute over world_surface ...\n\nexecute rotated...\n\nChanges the rotation of the following subcommand to  .  \n  can either be rotation coordinates, or as , which changes the rotation to that of the specified\nentity. For rotated as , forking rules apply the same as as entity.\n\nExamples:\n\nexecute rotated ~10 0 ...  \nexecute rotated as @e[tag=rotate] ...\n\nexecute summon...\n\nSummons the specified entity at the current position, and executes the following subcommand as that entity.  \nNote: You cannot specify NBT data for the summoned entity.\n\nExamples:\n\nexecute summon iron_golem ...  \nexecute summon marker ...\n\nexecute run \n\nRuns the specified command with the current context. Takes no further subcommands.  \n:::info\nThis is useless by itself, and should always be preceded by other subcommands.\n:::\n\nExamples:\n\nexecute run say hi  \nexecute at @e[type=sheep] run setblock   ~ stone\n\nexecute store (result|success)...\n\nStores an integer value somewhere. If storing result, this numeric value is taken from the output of the final\nsubcommand (Either a run subcommand or a condition). If storing success, the value is either 1 if the final\nsubcommand succeeds (condition passes or command successfully performs its function), or 0 otherwise.\n\ntarget can be one of the following:\n\nblock **: Stores the value in the specified path of the given block in the format\nspecified by type (Any numeric NBT type), and multiplied by scale. Note: Even if type is a decimal type\n(float or double), the value is still rounded down.\nentity **: Stores the value in the specified path of the target entity, the same way\nas block. entity must only refer to a single entity.\nstorage **: Stores the value in the given path of the target storage in the same\nway as block and entity.\nscore **: Stores the value for the target entity in the provided scoreboard. target can\nrefer to more than one entity.\nbossbar (value|max)**: Stores the value in a bossbar, changing either the current value or the maximum value.\n\nExamples:\n\nexecute store result entity @s Pos[1] double 1.5 ...  \nexecute store success score $foo my_objective ...  \nexecute store result bossbar foo_bar value ...\n\nexecute (if|unless) [...]\n\nExecutes the following subcommand under a given condition. unless inverts the condition, meaning the chain only\ncontinues if the condition not met.\n\nPossible values for condition:\n\nbiome **: Checks whether a specific biome is at the given position.\nblock **: Checks whether the given position is a certain block.\nblocks (all|masked)**: Compares two volumes of blocks: from start to end, and from\ndestination such that the second volume is the same dimensions as the first. If all is specified, it checks all\nblocks. If mask is specified, air blocks are ignored.\ndata (block|entity|storage) **: Checks if the specified path matches the NBT data of target.\ndimension **: Checks if the execution is in the specified dimension.\nentity **: Checks whether target resolves to one or more entities.\nfunction **: Runs the specified function and tests the return value. If the function did not run the\nreturn command, or if it returns zero, the condition is not met. Must be followed by another subcommand.\nitems (block|entity) **: Checks if the given item matches the specified slot of the target\nblock or entity. item is in the format  [ ].\nloaded **: Checks if the specified position is loaded.\npredicate **: Checks whether a predicate succeeds.\nscore (matches | )**: Checks whether a score is\nwithin a range (matches), or has a specified comparison to another score. operator can be on of:  =, >.\n\nExamples:\n\nexecute if biome   ~ minecraft:snowy_taiga ...  \nexecute if block 16 -42 83 #minecraft:logs ...  \nexecute if blocks    10 10 10 0 64 0 all ...  \nexecute if data storage example:store path{thing:1} ...  \nexecute if dimension minecraft:the_end ...  \nexecute if entity @e[tag=existent] ...  \nexecute if function example:my_fn ...  \nexecute if items entity @s weapon.mainhand #minecraft:swords[minecraft:custom_data={foo:\"bar\"}] ...  \nexecute if loaded 0 0 0 ...  \nexecute if predicate example:check ...  \nexecute if score @s score = @r score ...","url":"/wiki/command/execute/","tags":[]},{"title":"/data","content":"/data command\nThe /data command is used to modify and fetch NBT data of blocks, entities and storages.\n\n:::warning\nPlayer data cannot be modified using commands. All subcommands fail when trying to modify player data.\n:::\n\nSubcommands\nget [path] [scale]\nGets the data from a data source, and a path, if specified. Multiplies the resulting value by scale, if specified.  \nsource is a data source, path is an nbt path and scale is a number.  \nIf scale is set, and the data at that path it not a number, the command fails.\n\nAfter fetching the NBT at the path, if it exists, it prints the data in SNBT format in the chat. Therefore, its main use is manually inspecting NBT data. However, it also returns the integer representation of the fetched data, so it can be used in combination with execute store or return run to convert NBT into an integer.\n\nExamples\ndata get entity @s SelectedItem.id\ndata get block   ~ Items\n\nmerge \nMerges data with the given data source.  \ntarget is a data source and nbt is an SNBT compound.  \nThis command fails if the given entity or block does exist, or if the block is not a block entity and cannot hold NBT data. However, if the data source is a storage, and that storage does no exist yet, the storage is automatically created. \n\nExamples\ndata merge entity @n[type=creeper] {Fuse: 10s, ignited: true, ExplosionRadius: 8}\ndata merge storage example:data {a: 1, b: \"b\", c: [41b, 0b]}\n\nmodify \nModifies the NBT data at the specified path of the given data source. This gives more fine-grained control that data merge.  \ntarget is the data source to modify and path is an NBT path, the specific sub-path of that data source.  \naction determines what kind of modification occurs. There are 5 possible actions, as below.  \nsource determines the source of the data being used to modify the target. See source below.\n\nappend\nAppends an NBT value to a list or a typed array, making the value the last element.  \nIf the specified path does not exist in the data source, it is created and initialized as a list containing the value just appended.  \nThis is equivalent to data modify ... insert 0 ....\n\ninsert \nInserts an NBT value into a list or array at a specific index, shifting all proceeding elements to the right. Negative indices may be used to indicate inserting values from the end.  \nIf the index specified would cause the inserted item to be further than one after the first or last element of the list, the command fails.  \nInserting creates list if it doesn't exist in the same way as append.\n\nmerge\nMerges source into target at path. This is similar to data merge, but allows modifying a sub-path of a data source, and allows merging from more than just hardcoded NBT values.\n\nprepend\nPrepends an NBT value to a list or a typed array, making the value the first element.  \nLists are created in the same wat as append.  \nThis is equivalent to data modify ... insert -1 ....\n\nset\nSets the value of target at path, discarding any previously present value. This will create keys in a compound if not present, but cannot be used to add elements to an array or list, only modify existing ones.  \nset can create a chain of nested compounds if they don't already exist.  \nFor example, if the storage example:main does not yet exist, after the following command:\ndata modify storage example:main a.b.c.d set value 10\nThe example:main storage looks like this: {a: {b: {c: {d: 10}}}}.\n\nsource\nsource determines the value modifying target. It can be one of:\n\nvalue  - Gets the value from an SNBT literal.\nfrom [path] - Gets the data from the specified data source and path.\nstring [path] [start] [end] - Gets the data from the specified data source and ensures that it's a string. If start or end is specified, truncates the string using those values. start is inclusive, while end is exclusive. Both numbers are allowed to be negative, counting from the end of the string. For example, the indices 1 -1 remove one character from each end of the string, while 0 1 takes the first character.\n\nremove \nRemoves the NBT data from source at path. source is a data source and path is an NBT path.  \nThis deletes compound keys, and removes array and list elements, shifting proceeding elements left. It cannot, however, be used to delete an entire storage using the special {} path; only single keys of the root storage.\n\n:::tip\nIf you would like to be able to remove an entire storage in one go, put all your NBT data in a sub-path of it, for example:\ndata modify storage example:main temp.a set value 1\ndata modify storage example:main temp.b set value 2\nRemoves both keys\ndata remove storage example:main temp\n:::\n\nData source\nThe place to get data from or store data to. One of:\nentity  - The NBT of an entity.\nblock  - The NBT of a block entity.\nstorage  - The NBT from a data storage.\n\nData merging\nData merging is a process of merging two data values into one another.  \nThere are two values: The left side and the right side. The left side is the base of the operation, with the right being merged into the left. \n\nIf both sides of the operation are compounds, each key of the right compound is merged into the matching key of the left compound. If the key does not exist in the left compound, it is created and set to the value of the right.\n\nIf both sides are not a compound, the left is simply set to the right.","url":"/wiki/command/data/","tags":[]},{"title":"/summon","content":"/summon command\n\nThe /summon command is used to summon an entity at a position, along with any entity NBT.\n\nSyntax\n\nThe syntax of the /summon command is as follows:\n\nsummon [position] [nbt data]\n\n : an ID of a minecraft entity. For example: minecraft:cow, marker, zombie. If the namespace\n(minecraft:) is omitted, it will default to the minecraft namespace.\n[position] (optional): the coordinates at which the entity should be spawned.\n(Defaults to the current position).\n[nbt data] (optional): a compound containing the NBT (in SNBT format) which the entity should be\nspawned with. For example: {NoAI:1b}.\n\nExamples\n\nsummon minecraft:cow - Summons a cow at the current position.\nsummon minecraft:ender_dragon  50 ~ - Summons an ender dragon 50 blocks above the current position\nsummon minecraft:wither 29 372 121 - Summons a wither at the coordinates x=29, y=372, z=121\nsummon minecraft:zombie   ~ {NoAI:1b} - Summons a zombie at the current position with the NoAI NBT, meaning it\nwill not move around or attack players.\n\nAlternatives\n\nThe execute summon  command can also be used to summon an entity. Using this\nexecute subcommand will summon an entity at the current position, and then run the specified\ncommand as the newly summoned entity.\n\nHowever, execute summon cannot provide any NBT to give the entity upon being spawned. You will have to edit the nbt in\nthe command/function which is executed, which can be a bit tedious. An alternative to\nexecute summon minecraft:cow run function custom_function would be the following:\n\nsummon minecraft:cow   ~ {Tags:[\"newly_summoned_cow\"]}\nexecute as @n[type=cow,tag=newly_summoned_cow] at @s run function custom_function\ntag @n[type=cow,tag=newly_summoned_cow] remove newly_summoned_cow\n`","url":"/wiki/command/summon/","tags":[]},{"title":"Target Selectors","content":"Target Selectors\n\nTarget Selectors are used as an argument in commands to select entities and players in the world. We use target\nselectors to find players or mobs and do things to them. Many commands need to be given a target selector as an\nargument, or otherwise require being executed as an entity.\n\nAll target selectors start with an @ symbol, followed by a base selector (see the table below), and optionally any\nother criteria which will narrow down the selection further.\n\nExample: tellraw @a[distance=..10] \"You're within 10 blocks of me\". The target selector is @a[distance=..10],\nand tells the game to only send the message to players within 10 blocks.\n\nBase target selectors\n\nIn Java Edition, there are 6 base target selectors:\n\n| Target Selector | Description                                                                                                                                                                |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| @e          | All Entities - By itself, this selector will select every single entity which is currently loaded in the world                                                         |\n| @s          | This Entity - This selector will select the entity which is currently running the command. For example, if I run a command as @s, then it will run the commands as me. |\n| @a          | All Players - This selects all currently online players. (All players are always loaded in the world).                                                                 |\n| @r          | Random Player - This selects one random player.                                                                                                                        |\n| @p          | Nearest Player - This selects the nearest player to the position this command is ran from.                                                                             |\n| @n          | Nearest Entity - This selects the nearest entity (player or non-player) to the position this command is ran from.                                                      |\n\n:::warning\n@e only selects entities in a loaded chunk. If an entity exists but is not currently being loaded, it will\nnot select that entity.\n:::\n\nAdditional arguments\n\nTarget selectors can (and usually are) followed by additional arguments to filter the selection even more to only find\nthe entities that you want. Target selector arguments are contained within square brackets after the base selector\n(@e[...]) and are written as [ :, =,...]\n\nExample: In our previous example (@a[distance=..10]), we use the argument distance=..10 to specify that we only\nwant to target entities which are less than 10 blocks away.\n\n:::tip\nMost target selectors can be inverted by using =! meaning it will only select entities who do not match the\nargument. (E.g. @e[type=!minecraft:creeper] will select every entity that is NOT a creeper)\n:::\n\n| Argument           | Example                                                    | Description                                                                                                                                                                                                                                                                                                                                                                                                                |\n| ------------------ | ---------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| type             | @e[type=minecraft:pig]                                   | Filters to only include entities of a certain type or entity_type tag. Valid with @e, @s and @n. type can be any entity ID or entity_type tag.                                                                                                                                                                                                                                                                     |\n| name             | @e[name=Aron]                                            | Filters to include entities with a specific name. name is a string - it cannot be JSON text.                                                                                                                                                                                                                                                                                                                             |\n| distance         | @e[distance=6]                                           | Filters to include entities within a certain distance or range. .. is used to represent \"greater/less than\" operations - for example, ..6 means less than 6 and, 8.. means more than 8.                                                                                                                                                                                                                              |\n| nbt              | @a[nbt={SelectedItem:{id:\"minecraft:stone\"}}]            | Filters to include entities with specific NBT data. NBT data will be partially matched - as long as the specified data exists on the entity, it doesn't matter what other data it has.                                                                                                                                                                                                                                     |\n| sort and limit | @e[limit=1,sort=nearest]                                 | These two arguments are often used together to find entities based on ordering. For example, limit=5,sort=furthest selects the 5 entities which are furthest away from the current position.                                                                                                                                                                                                                             |\n| x/y/z        | @e[x=10,y=9,z=-5,distance=..5]                           | Specifies a starting position to work from; affecting distance, dx/dy/dz, and sort/limit. If left blank, it defaults to   ~.                                                                                                                                                                                                                                                                               |\n| dx/dy/dz     | @e[x=10,y=13,z=87,dx=10,dy=20,dz=5]                      | Creates a selection area (cuboid) which will only select entities if any of their hit box is within the area. x/y/z is needed to specify the position of the bottom right corner of the cuboid - if it is left out it defaults to the current position. If all the dxyz values are 0 (or one is set to 0 and no others are set), then it will select any entities if the current position is inside their hit box. |\n| tag              | @a[tag=CustomTag]                                        | Selects entities with a specified tag added with the /tag command or Tags[] NBT. No entities have tags by default - tags can only be added by the datapack or by commands.                                                                                                                                                                                                                                             |\n| team             | @a[team=red]                                             | Selects entities in a specific team.                                                                                                                                                                                                                                                                                                                                                                                       |\n| scores           | @e[scores={foo=10}]                                      | Selects entities based on their value on a scoreboard. Like distance, you can use .. to specify ranges.                                                                                                                                                                                                                                                                                                                |\n| predicate        | @e[predicate=namespace:my_predicate]                     | Selects entities based on whether they pass a custom predicate check.                                                                                                                                                                                                                                                                                                                                                       |\n| gamemode         | @a[gamemode=creative]                                    | Selects players in a specific game mode.                                                                                                                                                                                                                                                                                                                                                                                   |\n| advancements     | @a[advancements={minecraft:story/follow_ender_eye=true}] | Selects players based on whether they have unlocked a specific advancement.                                                                                                                                                                                                                                                                                                                                                |\n| level            | @a[level=10]                                             | Selects players based on their current XP level (not amount of points).                                                                                                                                                                                                                                                                                                                                                    |\n\nMore information about the arguments:\n\ntype argument\n\nThe type=  argument will filter the selection to only include entities of a certain type, or those in an\nentity_type tag.\n\n  must be a valid entity ID or entity_type tag ID. This argument can only be used with @e or @s.\n\nExamples:\n\n@e[type=minecraft:pig]: Selects all pigs\n@e[type=#minecraft:aquatic]: Selects all aquatic animals\n\nname argument\n\nThe name=  argument will filter the selection to only include entities who have a specific name.\n\n  is a string (it cannot be a JSON text component).\n\nExamples:\n\n@e[name=Aaron]: Selects all entities named Aaron\n@e[name=\"Aaron Aaronson\"]: Selects entities named Aaron Aaronson\n\n:::tip\nNote that names with more than one word need to be surrounded by quotes.\n:::\n\ndistance argument\n\nThe distance=  argument will filter the selection to only include entities who are within a distance\nrange.\n\n  can either be a value (such as 7) or a range (such as ..8 or 21..)\n\nExamples:\n\n@e[distance=6]: Selects all entities which are exactly 6 blocks away from the execution position.\n@e[distance=..20]: Selects all entities within 20 blocks of the execution position.\n@e[distance=3..]: Selects all entities that are more than 3 blocks away from the execution position.\n@e[distance=12..15]: Selects all entities between 12 and 15 (inclusive) blocks from the execution position.\n\nnbt argument\n\nThe nbt= argument will filter the selection to only include entities which have or do not have specific NBT\ndata.\n\n`` is an NBT compound. The entity must match everything within the compound.\n\nExamples:\n\n@a[nbt={SelectedItem:{id:\"minecraft:stone\"}}]: Selects all players who are holding stone\n@e[type=minecraft:arrow,nbt={inGround:1b}]: Selects all arrow entities who are in a block.\n\nsort and limit arguments\n\nThe sort=,limit=  will limit the amount of possible entities it will select and will select entities\nbased on the priority defined in  .\n\n  can be one of the following:\n\narbitrary: does not sort in any guaranteed order\nnearest: sort in increasing order of distance\nfurthest: sort in decreasing order of distance\nrandom: sort randomly (default type for @r)\n\n  can be any integer.\n\nExamples:\n\n@e[limit=1,sort=nearest]: Selects the nearest entity to the position of execution\n@e[limit=5,sort=furthest]: Selects the furthest 5 entities from the position of execution.\n@e[limit=7,sort=random,type=minecraft:cow]: Selects 7 random cows..\n\nx/y/z arguments\n\nThe x/y/z=  arguments do not directly change the selection, but are used alongside other arguments to\nspecify a starting position to work from.\n\nThis argument(s) will affect the arguments distance, dx/dy/dz and sort/limit.\n\nExamples:\n\n@e[x=10,y=9,z=-5,distance=..5]: Selects all entities less than 5 blocks away from the position X=10/Y=9/Z=-5\n\ndx/dy/dz arguments\n\nThe dx/dy/dz arguments will create a cuboid that is at least 1x1x1 blocks big and each value above 0 will increase the\nsize of the cuboid in that direction by a full block.\n\nAny entity fully or partially inside the cuboid will be selected.\n\nYou can mix and match dx, dz, and dz however you want. To create the cuboid at least 1 of the three has to be\nthere.\n\n:::info\nThe generated cuboid does not snap to the block grid \n::: \n:::info \nThe base cuboid that gets generated with\ndx/dz/dz=0 will always stretch from the command origin to positive x/y/z\n:::\n\nExamples:\n\n@e[x=10,y=13,z=87,dx=10,dy=20,dz=5]: Selects any entities if any part of their hit box is within the cuboid\nw=10,h=20,l=5 starting from the position x=10,y=13,z-87\n@e[x=7,y=3,z=9,dx=0,dy=0,dz=0]: Selects any entities if their hit box contains the point x=7,y=3,z=9\n\ntag argument\n\nThe tag=  argument will select entities which have the specified tag.   is any tag string (no spaces).\n\nEntities do not naturally have tags - these are separate from entity_type tags such as that used in the type\nargument. Instead, these select entities based on the tags added with the /tag command or Tags[] NBT.\n\nExamples:\n\n@a[tag=CustomTag]: Selects all players with the tag CustomTag\n@e[tag=!ignore]: Selects all entities which do not have the ignore tag.\n\nteam argument\n\nThe team=  argument will select entities which are in a specific team. Since entities can only be in one\nteam at a time, you cannot use team= more than once, however you can duplicate negated team arguments (team=!).\n\n  is any tag string (no spaces).\n\nExamples:\n\n@a[team=red]: Selects all players in the red team\n@e[team=Bears]: Selects all entities in the Bears team\n@e[team=!blue]: Selects all entities which are not in the blue team\n\nscores argument\n\nThe scores={ =,...} argument will select entities based on their value on a scoreboard.\n\n  is a scoreboard objective which must exist already.   can be either an integer or a range.\n\nExamples:\n\n@e[scores={foo=10}]: Selects all entities with a score of exactly 10 on the foo scoreboard.\n@e[scores={foo=5,bar=7}]: Selects all entities with a score of exactly 5 on the foo scoreboard and exactly 7\non the bar scoreboard.\n@e[scores={foo=8..}]: Selects all entities with a score of 8 or more on the foo scoreboard.\n\npredicate argument\n\nThe predicate=  argument will select entities based on whether they pass a predicate check.   is\na predicate ID.\n\nExamples:\n\n@e[predicate=namespace:my_predicate]: Selects all entities who pass the predicate in\ndata/namespace/predicates/my_predicate.\n@e[predicate=!namespace:another_predicate]: Selects all entities who fail the predicate in data/namespace/predicates/another_predicate.json\n\ngamemode argument\n\nThe gamemode=(survival|creative|adventure|spectator) argument will select players who are in a specific game mode.\n\nExamples:\n\n@a[gamemode=creative]: Selects all players in creative mode\n\nadvancements argument\n\nThe advancements={ =(true/false)} argument will select players based on whether they've unlocked an\nadvancement.   is an advancement ID.\n\nExamples:\n\n@a[advancements={minecraft:story/follow_ender_eye=true}]: Selects all players who have unlocked the\nfollow_ender_eye advancement.\n@a[advancements={minecraft:story/follow_ender_eye=false}]: Selects all players who have not unlocked the\nfollow_ender_eye advancement.\n\nadvancements argument\n\nThe advancements={ =(true/false)} argument will select players based on whether they've unlocked an\nadvancement.   is an advancement ID.\n\nExamples:\n\n@a[advancements={minecraft:story/follow_ender_eye=true}]: Selects all players who have unlocked the\nfollow_ender_eye advancement.\n@a[advancements={minecraft:story/follow_ender_eye=false}]: Selects all players who have not unlocked the\nfollow_ender_eye advancement.\n\nlevel argument\n\nThe level=  argument selects players based on their current XP level (not amount of points).\n\n  can be an integer or range.\n\nExamples:\n\n@a[level=10]: Selects all players who have an XP level of exactly 10.\n@a[level=4..]: Selects all players who have an XP level of 4 or more.\n\nTODO x_rotation and y_rotation","url":"/wiki/commands/target-selectors/","tags":[]},{"title":"MissingNo.","content":"","url":"/wiki/commands/namespaces/","tags":[]},{"title":"Resource Locations","content":"Resource Locations\nA resource location is a kind of identified used in Minecraft to point to a certain piece of data, such as a function, item, or storage.\n\nA resource location is comprised of two main parts: The namespace and the path.  \nThe namespace defines the general place that the resource location belongs to. Generally, this will be the namespace of your datapack, or the minecraft namespace if interacting with something in the vanilla game. The namespace can contain lowercase letters (a-z), numbers (0-9), _, - and ..\nThe path defines specific information about the resource location. The path may contain the same characters as the namespace, and additionally /, to separate directories.  \nSyntactically, the namespace is separated from the path by a colon (:).\n\nItem IDs are an example of resource locations. The ID minecraft:diamond is a resource location with the namespace minecraft and the path diamond.\n\n:::tip\nIf the namespace is omitted, it defaults to minecraft, meaning diamond can be used interchangeably with minecraft:diamond.\n:::\n\nEvery file in a datapack has a resource location. It consists of the namespace it resides in, with the path being the path to the file, excluding the directory which determines the file type, so the advancement at example/advancement/subfolder/foo.json would have the resource location example:subfolder/foo, not example:advancement/subfolder/foo.\n\n:::tip\nData storages are identified by resource location. It is considered good practice to name your storages with the namespace of your datapack, and a path which describes the purpose of the storage. This could, for example, correspond to the function which uses it.\n:::","url":"/wiki/commands/resource-locations/","tags":[]},{"title":"Item Components","content":"Item Components\n\nItem components are data structures which can be applied to items in Minecraft to give them special attributes, such as\na name, lore, being able to be eaten, etc. Each item has specific item components by default - for example, all food\nitems will have the minecraft:consumable component, which makes the item edible.\n\nA command such as /give or /item can be used to create an item which has additional item components, or remove item\ncomponents from any item.\n\nList of all Item Components\n\nThis is a list of all item components in the game, with examples and an explanation of what they do!\n\nattribute_modifiers\n\nUsed to apply attribute modifiers onto items. See attributes for more (WIP).\n\nFields:\n\nminecraft:attribute_modifiers - Can be defined as a compound or a list.\nmodifiers - Contains a list of the attribute modifiers.\ntype - The name of the attribute modifier you want to use (e.g. block_interaction_range or scale)\nslot - A slot the item must be in for the attribute modifier to take effect. Can be any of: any, hand,\narmor, mainhand, offhand, head, chest, legs, feet or body.\nid - A unique resource location to identify the attribute modifier.\namount - Specifies the amount of change the modifier's effect has. (See \"example\")\noperation - A modifier operation, can be any of add_value, add_multiplied_base or\nadd_multiplied_total (see Attribute Modifiers for more info.)\nshow_in_tooltip - Whether to show the attribute modifiers in the item's tooltip. A boolean which default to\ntrue.\n\nExample:\n/give @s diamond[attribute_modifiers=[{type:\"block_interaction_range\",slot:\"hand\",id:\"example:reach\",amount:4,operation:\"add_value\"}]]\n\nThis command will give you a diamond which increases your block interaction range by 4 blocks when held in your hand.\n\nbanner_patterns\n\nThis component allows you to apply banner patterns onto banners or shields. See the syntax below for more info!\n\nFields:\n\nminecraft:banner_patterns - Contains a list of all the patterns applied to the banner (or the shield).\ncolor - A dye color of the pattern. (e.g. red, magenta, ...)\npattern - A banner pattern ID. (See \"example\")\n\nExample:\n/give @s cyan_banner[banner_patterns=[{pattern:\"minecraft:bricks\",color:\"black\"},{pattern:\"minecraft:rhombus\",color:\"magenta\"}]]\n\nThis command will give you a cyan banner with black bricks and magenta diamond patterns applied to it.\n\nbase_color\n\nThis component specifies the base (dye) color of a banner shield.\n\nFields:\n\nminecraft:base_color - The dye color of the base. (e.g. red, magenta, ...)\n\nExample: /give @s shield[base_color=\"cyan\"]\n\nThis command gives you a shield with a cyan banner applied to it.\n\nbees\n\nA component used to specify the bees and their time in the hive. You can set the entity data, their minimum and current\ntime in the hive.\n\nFields:\n\nminecraft:bees - A list of entities currently in the beehive/bee nest.\nentity_data - The Entity NBT data of your specified entity in the hive/nest. (See \"example\")\nmin_ticks_in_hive - The minimum amount of ticks the specified entity has to stay in the hive/nest.\nticks_in_hive - The amount of ticks the specified entity has been inside the hive/nest\n\nExample:\n/give @s beehive[bees=[{entity_data:{id:\"bee\",CustomName:'\"Beeatrice\"'},min_ticks_in_hive:69,ticks_in_hive:27}]]\n\nThis command will give you a beehive with a bee called \"Beeatrice\".\n\nblock_entity_data\n\nUsed to specify Block NBT data which gets applied to the block after it's placed.\n\nFields:\n\nminecraft:block_entity_data - The Block NBT data that is applied after the block is placed (Important Note: x,\ny and z tags are exluded, even if you specify them.)\n\nExample: /give @s brewing_stand[block_entity_data={id:\"brewing_stand\",Fuel:20b}]\n\nThis command will give you a brewing stand, which when placed down, alredy has its fuel full.\n\nblock_state\n\nUsed to specify Block State properties which get applied to the block after it's placed.\n\nFields:\n\nminecraft:block_state - The block state properties to apply onto the block when placed.\n\nExample: /give @s oak_leaves[block_state={waterlogged:\"true\"}]\n\nThis command gives you an oak leaf, whoch when placed down appears waterlogged.\n\nbucket_entity_data\n\nSpecifies the Entity NBT applied to an entity when placed down from a bucket. Do note that only some NBT tags are\napplied.\n\nFields:\n\nminecraft:bucket_entity_data - The Entity NBT data which is applied when the entity is placed down from a bucket,\nonly NBT tags specified below are applied.\nOnly NoAI, Silent, NoGravity, Glowing, Invulnerable, Health, Age, Variant, HuntingCooldown and\nBucketVariantTag tags are applied!\n\nExample: /give @s axolotl_bucket[bucket_entity_data={Variant:4,Glowing:1b}]\n\nThe command will give you an axolotl bucket, which when placed down, spawns a blue glowing axolotl.\n\nbundle_contents\n\nUsed to define items stored inside of a bundle.\n\nFields:\n\nminecraft:bundle_contents - A list of item stacks of items stored inside a bundle.\nid - The ID of the item. Note that it cannot be air!\ncount - The count of the item. If left out defaults to 1, the maximum count is 99.\ncomponents - The item components of the item, optional.\n\nExample:\n/give @s bundle[bundle_contents=[{id:\"diamond\",count:8},{id:\"minecraft:coal_block\",count:1,components:{\"minecraft:item_name\":'\"Compressed Coal\"'}}}]]\n\nWhen ran, this will give you a bundle with 2 different items inside, a diamond and a coal block with an\nitem name of \"Compressed Coal\".\n\ncan_break\n\nWhen present, the player holding the item will be able to break the specified blocks in adventure mode. Can be very\nhandy in adventure maps, where you generally don't want the player to be able to break every block.\n\nFields:\n\nminecraft:can_break - Can either contain a list of blocks, or just a single block entry, in which case you can leave\nout the predicates field (Example #2).\npredicates - A list with the block predicates which define which blocks the player can break. _(If you don't\nrequire to use a list, you can just directly specify a single block predicate instead, as seen in Example #2.)_\nblocks - Can be either a single block ID, a list of block IDs, or a block tag with a #, but never a list of\nblock tags.\nnbt - The Block Entity NBT data which has to match to let the player break the block. (Optional)\nstate - A compound with the Block State property which has to match to let the player break the block (Optional,\nExample #1)\nshow_in_tooltip - Whether to show the \"Can break\" section in the item's tooltip. A boolean which default to\ntrue.\n\nExamples: #1:\n/give @s iron_pickaxe[can_break={predicates:[{blocks:\"oak_log\"},{blocks:\"oak_leaves\",\"state\":{\"waterlogged\":\"true\"}}],show_in_tooltip:false}]\n\nThis command will give you an iron pickaxe, which can only break oak logs and waterlogged oak leaves, its \"Can break\"\ntooltip is hidden.\n\n#2:/give @s diamond_pickaxe[can_break={blocks:[\"diamond_block\",\"diamond_ore\"]}]\n\nThis command gives you a diamond pickaxe which can only break diamond blocks and diamond ore.\n\ncan_place_on\n\nWhen present, the player holding the item will be able to place the held item/block onto a specified block in adventure\nmode. Works very simirarly to the can_break component.\n\nFields:\n\nminecraft:can_place_on - Can either contain a list of blocks, or just a single block entry, in which case you can\nleave out the predicates field.\npredicates - A list with the block predicates which define on which blocks the item can be placed. _(If you don't\nrequire to use a list, you can just directly specify a single block predicate instead.)_\nblocks - Can be either a single block ID, a list of block IDs, or a block tag with a #, but never a list of\nblock tags.\nnbt - The Block Entity NBT data which has to match to let the player break the block. (Optional)\nstate - A compound with the Block State property which has to match to let the player break the block (Optional)\nshow_in_tooltip - Whether to show the \"Can place on\" section in the item's tooltip. A boolean which default to\ntrue.\n\nExample: /give @s lever[can_place_on={predicates:[{blocks:\"emerald_block\"}],show_in_tooltip:true}]\n\nThis gives you a lever which can only be placed onto an emerald block.\n\ncharged_projectiles\n\nDefines the items, projectiles, loaded into a crossbow. If this component isn't present, the crossbow won't be charged.\n\nFields:\n\nminecraft:charged_projectiles - Contains a list of items, projectiles, loaded into the crossbow.\nid - The ID of the item. Note that it cannot be air!\ncount - The count of the item. If left out defaults to 1, the maximum count is 99.\ncomponents - The item components of the item, optional.\n\nExample:\n/give @s crossbow[charged_projectiles=[{id:\"minecraft:firework_rocket\",count:1,components:{\"minecraft:fireworks\":{flight_duration:1}}}]]\n\nWhen ran, this command gives you a crossbow loaded with a firework rocket with a fireworks component.\n\ncontainer\n\nSpecified the items stored in a container.\n\nFields:\n\nminecraft:container - The items stored in this container.\nslot - A slot of this container. Can be anything between 0 and 255.\nitem - A single item stack.\nid - The ID of the item. Note that it cannot be air!\ncount - The count of the item. If left out defaults to 1, the maximum count is 99.\ncomponents - The item components of the item, optional.\n\nExample: /give @s dropper[container=[{slot:4,item:{id:\"minecraft:diamond\",count:1}}]]\n\nGives you a dropper with a diamond in the middle (slot 4).\n\ncontainer_loot\n\nUsed to add or change the loot table in a container.\n\nFields:\n\nminecraft:container_loot - The loot table of this container.\nid - The ID of a loot table.\nseed - The seed for generating the loot table. If unspecified or 0, a random seed will be generated.\n\nExample: /give @s chest[container_loot={loot_table:\"chests/end_city_treasure\"}]\n\nGives you a chest with the end city treasure loot table inside.\n\nconsumable\n\nWhen present, lets the player consume the item, but note that if the item already has existing right-click functionality\n(like placing a block), it will keep that functionality. If food, potion_contents,\nominous_bottle_amplifier or suspicious_stew_effects are\nalso present on this item, consuming it will apply the stats and effects of those components. This component is also\nvery useful in datapacking, since it not only allows easy right click detection,\nbut if set-up correctly can also play any of the animation presets, allowing for more visuals in your custom items.\n\nFields:\n\nminecraft:consumable - If present, lets the item be consumed.\nconsume_seconds - The amount of seconds it takes the player to consume the item, the default value is 1.6.\nanimation - The animation that is player when consuming the item. Can be any of none, eat, drink, block,\nbow, spear, crossbow, spyglass, toot_horn or brush, the default is eat.\nsound - The sound event to play during when the item is consumed. The default value is entity.generic.eat.\nsound_id - A resource location of a sound file. (e.g. entity.generic.explode)\nrange - An optional fixed range of the sound.\nhas_consume_particles - If the item should have consume particles. A boolean which default to true.\non_consume_effects - An optional list of effects which happen after the consumption of this item.\ntype - The type of effect to apply. Can be any of apply_effects, remove_effects, clear_all_effects, teleport_randomly or play_sound:\napply_effects - If specified, will apply these status effects on event activation.\neffects - A list of status effects to apply.\nprobability - A float that determines the probability of the above effects getting applied. The default value is 1.0.\nremove_effects - If specified, will remove these status effects on event activation.\neffects - A list or a tag of status effects IDs that should be removed.\nclear_all_effects - If specified, will remove all status effects on event activation.\nteleport_randomly - If specified, will teleport the player in a radius on event activation.\ndiameter - A float defining the radius of where the player can be teleported. The default value is 16.0.\nplay_sound - If specified, will play a selected sound on event activation.\nsound - The sound event to play.\nsound_id - A resource location of a sound file. (e.g. entity.generic.explode)\nrange - An optional fixed range of the sound.\n\nExamples: With the food component:\n/give @s apple[consumable={animation:'none', sound:'entity.generic.eat'},food={saturation:6,nutrition:9}]\n\nThis command gives you an apple which doesnt have any consumption animation, and once consumed gives the player 6\nsaturation and 9 nutrition because the food component is present on the item.\n\nTeleport randomly:\n/give @s bone[consumable={consume_seconds:0.5,on_consume_effects:[{type:\"minecraft:teleport_randomly\",\"diameter\":10}]}]\n\nThis command gives you a bone which takes .5 seconds to consume, and once finished teleports the player to a random\nplace in a diameter of 10 blocks.\n\ncustom_data\n\nUsed to store custom data on your item, can be either an object or SNBT string. This is\nvery useful for making custom items in your datapacks. For example, you can \"tag\" your item with a specific value which\nyou can later check to see if it really is your custom item the player is holding/using.\n\nFields:\n\nminecraft:custom_data - Contains key-value pairs of custom data on this item. Can be either an object or\nSNBT string.\n  - A key-value pair. (Like \"my_custom_item\":1b)\n\nExample: /give @s diamond_sword[custom_data={\"my_custom_item\":1b}]\n\nGives you a diamond sword with the custom data {\"my_custom_item\":1b}.\n\ncustom_model_data\n\nUsed to specify the custom model data of the item. Used in conjunction with a resourcepack, where they can now specify different parts of your item model definition.\n\nFields:\n\nminecraft:custom_model_data - Can change how an item renders based on its use in the item model definition\nfloats - A list of floats (1.64)\nflags - A list of booleans (true/false)\nstrings - A list of strings (\"hello world\")\ncolors - A list of RGB values.\n\nExample: /give @s apple[custom_model_data={floats:[86,2.2],flags:[false,1b],strings:[\"hi world\",\"string\"],colors:[I;16711680,8906751]}]\n\nGives you an apple with some \n\ncustom_name\n\nUsed to specify the item's custom name, like you can in an anvil. (Similiar to the item_name component)\nThis component takes priority over the item_name component, can be renamed or removed using an anvil\nand, if unspecified otherwise, the item's name will default to being italic. (You can change that just by overwriting it\nin the text component)\n\nFields:\n\nminecraft:custom_name - A Raw JSON text component to use as this item's name. (See \"example\")\n\nExample:\n/give @s [custom_name='[{\"color\":\"gray\",\"italic\":false,\"text\":\"The book of \"},{\"color\":\"gold\",\"italic\":true,\"text\":\"lore!\"}]']\n\nThis command gives you a book with the name \"The book of lore!\", colored in gray and gold.\n\ndamage\n\nSpecifies the number of uses lost (NOT remaining) from the item's durability.\n\nFields:\n\nminecraft:damage - An integer that represents the number of uses consumed from the item's durability.\n\nExample: /give @s mace[damage=499]\n\nThis command will give you a mace which only has 1 durability left. (The max_durability of a mace\nis 500.)\n\ndamage_resistant\n\nItems with this component, when in entity form, will be resistant to the damage types included in the component's damage tag. This component also affects whether the equipped item will be damaged when the wearer is hurt by the given damage type.\n\nFields:\n\nminecraft:damage_resistant - If set, the items, when in entity form or equipped, will be invulnerable to the damage types below.\ntypes - A hash-prefixed #damage type tag the item should be invulnerable to.\n\nExample: /give @s barrier[damage_resistant={types:\"#minecraft:lava\"}]\n\nGives you a barrier which is invulnerable to lava damage.\n\ndeath_protection\n\nThis component works like the totem of undying, by reviving the holder of the item with this component. Once revived you can specify the effects that should be given to the player.\n\nFields:\n\nminecraft:death_protection - When the holder of this item dies, he will be revived by restoring a single health point.\ndeath_effects - An optional list of effects which happen when the holder is revived.\ntype - The type of effect to apply. Can be any of apply_effects, remove_effects, clear_all_effects, teleport_randomly or play_sound:\napply_effects - If specified, will apply these status effects on event activation.\neffects - A list of status effects to apply.\nprobability - A float that determines the probability of the above effects getting applied. The default value is 1.0.\nremove_effects - If specified, will remove these status effects on event activation.\neffects - A list or a tag of status effects IDs that should be removed.\nclear_all_effects - If specified, will remove all status effects on event activation.\nteleport_randomly - If specified, will teleport the player in a radius on event activation.\ndiameter - A float defining the radius of where the player can be teleported. The default value is 16.0.\nplay_sound - If specified, will play a selected sound on event activation.\nsound - The sound event to play.\nsound_id - A resource location of a sound file. (e.g. entity.generic.explode)\nrange - An optional fixed range of the sound.\n\nExample: /give @s bone[death_protection={death_effects:[{type:\"minecraft:teleport_randomly\",\"diameter\":10}]}]\nGives you a bone which will revive the player when he dies, and when done so, will randomly teleport the player in a diameter of 10 blocks.\n\ndebug_stick_state\n\nUsed by the debug stick item to store the selected block state properties.\n\nFields:\n\nminecraft:debug_stick_state - The block state property of this debug stick.\n  - A key-value pair, the key is the block ID and the value is the block state key. (For example:\n\"minecraft:mangrove_fence\": \"west\")\n\ndyed_color\n\nSpecifies the color of the current leather armor piece. Tint is based on the model, not item ID.\n\nFields:\n\nminecraft:dyed_color - Can be either a coumpound or an integer (See \"example\").\nrgb - The color applied to this leather armor piece. Represented as a decimal number.\nshow_in_tooltip - Whether to show the item's color in the tooltip. A boolean which default to true.\n\nExample: /give @s leather_chestplate[dyed_color={rgb:16711680,show_in_tooltip:true}]\n\nGives you a leather chestplate that is dyed red.\n\nenchantment_glint_override\n\nUsed to override the enchantment glint on item, this works even when there are no enchantments on the item.\n\nFields:\n\nminecraft:enchantment_glint_override - A boolean which overrides the item's enchantment glint, false means it will\nnever show the glint, while true will always display it (even if there are no enchantments on the item).\n\nExamples: Item with Glint: /give @s debug_stick[enchantment_glint_override=false]\n\nGives you a debug stick without the glint, because normally it's applied to the debug stick by default.\n\nDisable Item's Glint: /give @s trident[enchantment_glint_override=true]\n\nGives you a trident which has an enchantment glint even thought it has no enchantments.\n\nenchantable\n\nIf present (and any enchantments are applicable), this item can be enchanted in an enchanting table.\n\nFields:\n\nminecraft:enchantable - If present, this item can be enchanted via an enchanting table.\nvalue - A higher value makes enchantments that have a higher cost a bigger chance to be picked.\n\nExample: /give @s stick[enchantable={value:4}]\n\nGives you a stick which can be enchanted (but only if there are any enchantments for a stick available!).\n\nenchantments\n\nSpecified the enchantments on this item. Do not confuse this component with the\nstored_enchantments component, which only stores the enchantments on the item, meaning they\naren't active (Like enchanted books, they only store the enchantment, don't function as it.)\n\nFields:\n\nminecraft:enchantments - Contains the enchantments on this item.\nlevels - Contains key-value pairs of levels of enchantments on this item.\n  - A single key-value pair, where the key is the ID of the enchantment and the value is the\nlevel of the enchantment you want.\nshow_in_tooltip - Whether to show the enchantments in the item's tooltip. A boolean which default to true.\n\nExamples: #1: /give @s diamond_boots[enchantments={protection:1,thorns:8}]\n\nGives you diamond boots with protection 1 and thorns 8.\n\n#2: /give @s gold_sword[enchantments={levels:{'minecraft:knockback':8},show_in_tooltip:false}]\n\nequippable\n\nThis component lets the item be equipped into a specified slot with a specified model, sounds and allowed entities which can wear the armor.\n\nFields:\n\nminecraft:equippable - If this component is present, this item will be able to be equipped.\nslot - The slot this armor can be equipped into, can be any of head,chest, legs, feet, body, mainhand,\nor offhand.\nequip_sound - An optional sound event to play when the item is eqipped. If unspecified, item.armor.equip_generic\nwill play.\nsound_id - A resource location of a sound file. (e.g. entity.generic.explode)\nrange - An optional fixed range of the sound.\nasset_id - An optional namespace:id of the equipment model to use when equipped.\nallowed_entities - An optional field which controls the entities that can equip this armor piece. Can either be an\nEntity ID an Entity Tag, or list of Entity IDs, but never a list of Entity Tags.\ndispensable - A boolean which defaults to true, defines whether the item can be equipped throught a dispenser.\nswappable - A boolean which defaults to true, defines whether the item can be equipped into the specified slot by right-clicking.\ndamage_on_hurt - A boolean which defaults to true, defines whether the item will be damaged when the wearing entity is damaged.\ncamera_overlay - An optional resource location of an overlay texture to use when equipped. The ID will address a texture under the textures/ folder and automatically assumed to be .png. (misc/pumpkinblur will adress textures/misc/pumpkinblur.png)\n\nExample: /give @s tnt[equippable={slot:\"head\",equip_sound:\"entity.generic.explode\",model:\"minecraft:end_rod\",dispensable:true,swappable:true,damage_on_hurt:true}]\n\nGives you a tnt which can be equipped onto a players head, and will play a special sound when done so. The item can be dispensed using dispensers, swapped by right-clicking and will not take damage when the wearing entity does.\n\nentity_data\n\nUsed to specify the NBT data of an entity that is spawned/created from an item (e.g. armor stand, spawn egg, ...)\n\nFields:\n\nminecraft:entity_data - The NBT entity data applied to an entity after it's spawned/created from an item.\n\nExample: /give @s ghast_spawn_egg[entity_data={id:\"minecraft:giant\",Glowing:1b}]\n\nGives you ghast spawn egg which spawns a glowing giant.\n\nfirework_explosion\n\nThe firework explosion effect stored inside of a firework star (NOT a firework rocket, for that see the\nfireworks component).\n\nFields:\n\nminecraft:firework_explosion - The firework explosion effect inside of this firework star.\nshape - The shape of the firework explosion, can be any of small_ball, large_ball, star, creeper or\nburst.\ncolors - The colors of the particles from the explosion, they are randomly selected from this array of integers\n(See \"example\").\nfade_colors - The fade colors of the initial particles from the explosion, they are randomly selected from this\narray of integers (See \"example\").\nhas_trail - A boolean which decides whether the rocket should have a trail effect or not.\nhas_twinkle - A boolean which decides whether the rocket should have a twinkle effect or not.\n\nExample:\n/give @s firework_star[firework_explosion={shape:\"creeper\",has_twinkle:true,has_trail:true,colors:[I;16711680,16777215],fade_colors:[I;0]}]\n\nGives you a firework star which stores an explosion effect which has a shape of a creeper, twinkles and has a trail,\nand has 2 randomly selected colors that both fade into black.\n\nfireworks\n\nThe firework explosion effects stored inside of a firework rocket (NOT a firework star, for that see the\nfirework_explosion component).\n\nFields:\n\nminecraft:fireworks - A list of firework explosion effects spawned by this firework rocket. (A maximum of 256\nentries)\nshape - The shape of the firework explosion, can be any of small_ball, large_ball, star, creeper or\nburst.\ncolors - The colors of the particles from the explosion, they are randomly selected from this array of integers\n(See \"example\").\nfade_colors - The fade colors of the initial particles from the explosion, they are randomly selected from this\narray of integers (See \"example\").\nhas_trail - A boolean which decides whether the rocket should have a trail effect or not.\nhas_twinkle - A boolean which decides whether the rocket should have a twinkle effect or not.\nflight_duration - An integer between -128 and 127, which defines the flight duration of this rocket.\n\nExample:\n/give @s firework_rocket[fireworks={flight_duration:2,explosions:[{shape:\"burst\",has_trail:true,colors:[I;16190207,65314],fade_colors:[I;0]}]}]\n\nGives you a firework rocket which on explosion has a shape of a large ball, doesn't twinkle but has a trail, and has 2\nrandomly selected colors that both fade into black.\n\nfood\n\nUsed to set the food stats of this item after being consumed. This component by itself doesn't make the item consumable,\nfor that use the consumable item component. _(Note: this item did make the item consumable in version\nbelow 1.21.2, before the consumable component was added)_ If this item also contains the consumable\ncomponent, these statistics will be applied when the player consumes the item.\n\nFields:\n\nminecraft:food - The food stats applied to the player after eating this item.\nnutrition - The nutrition to give the player after consuming this item.\nsaturation - The saturation to give the player after consuming this item.\ncan_always_eat - A boolean that default to false. If true the item will be able to be consumed even if the\nplayer isn't hungry.\n\nExamples: #1: /give @p apple[food={nutrition:96,saturation:27,can_always_eat:true}] 1\n\nGives you an apple which can always be eaten, and if done so will award the player with 96 nutrition points and 27\nsaturation.\n\nNon-conusmable item:\n/give @p diamond[food={nutrition:5,saturation:8,can_always_eat:false},consumable={consume_seconds:1}] 1\n\nGives you a diamond which can be eaten if the player is hungry, once eaten gives the player 5 nutrition points and 8\nsaturation. (Can only be eaten because of the consumable component)\n\nglider\n\nAllows the player to glide (like you can with an elytra) if the item is equipped.\n\nFields:\n\nminecraft:glider - An empty object, which if set set, allows the player to glide when equipped.\n\nExample: /give @s diamond_chestplate[glider={}]\n\nGives you a diamond chestplate, which when equiped, allows the player to glide like you can with an elytra.\n\nhide_additional_tooltip\n\nIf present, will hide additional info, which comes from the item type, on the item's tooltip.\n\nFields:\n\nminecraft:hide_additional_tooltip - If set, will hide additional info on this item's tooltip.\n\nExample: /give @s bolt_armor_trim_smithing_template[minecraft:hide_additional_tooltip={}]\n\nGives you a bolt armor smithing template without the \"smithing template\" description.\n\nhide_tooltip\n\nIf present, will hide the whole tooltip from the item. (Including the name and even the tooltip box)\n\nFields:\n\nminecraft:hide_additional_tooltip - If set, will hide the whole tooltip of the item.\n\nExample: /give @s spyglass[minecraft:hide_tooltip={}]\n\nGives you a spyglass without any tooltip when hovered over.\n\ninstrument\n\nUsed to add an instrument to a goat horn.\n\nFields:\n\nminecraft:instrument - The goat horn instrument on this item.\nsound_event - The sound event to play on the use of this goat horn.\nsound_id - A resource location of a sound file. (e.g. entity.generic.explode)\nrange - An optional fixed range of the sound.\nuse_duration - An integer for how long the use duration of this goat horn should be.\nrange - A float for the range of the sound.\n\nExamples: Default Instrument: /give @s goat_horn[instrument=\"call_goat_horn\"]\n\nGives you a goat horn with the \"Call\" goat horn instrument.\n\nCustom sound: /give @s goat_horn[instrument={use_duration:20,range:35,sound_event:\"item.goat_horn.sound.5\"}]\n\nGives you a goat horn with a sound event and a custom cooldown.\n\nintangible_projectile\n\nIf present, makes the item not be able to be picked up by a player which is not in creative mode.\n\nFields:\n\nminecraft:intangible_projectile - If set, this projectile item can't be picked up by a non-creative player when\nfired.\n\nExample: /give @s arrow[intangible_projectile={}]\n\nGives you an arrow that cannot be picked up by a non-creative player.\n\nitem_name\n\nUsed to specify the item's base name. (Similiar to the custom_name component) Note that this component has the lowest priority and won't take priority over the custom_name or potion_contents component. This name hovewer can't be renamed or removed using an anvil, and it won't default to italic.\n\nFields:\n\nminecraft:item_name - A Raw JSON text component to use as this item's name. (See \"example\")\n\nExample: /give @s stick[item_name='{\"bold\":true,\"color\":\"light_purple\",\"text\":\"Not-a-magic wand\"}']\n\nThis command gives you a stick with the name \"Not-a-magic wand\" in bold and colored in light purple.\n\nitem_model\n\nA components similiar to custom_model_data, but here you specify the item model directly as a\npath. Is generally a better practice to use instead of custom model data, since it allows bigger compatibility between\nother datapacks.\n\nFields:\n\nminecraft:item_model - The namespace:id of the item model this item will display. (See \"example\")\n\nExample: /give @s @s diamond[item_model=\"namespace:id\"]\n\nWill give you a diamond with the model namespace:id, which will reference the model placed\nin/assets/ /models/item/ .\n\njukebox_playable\n\nUsed to add custom or exisiting jukebox songs onto items and making them be able to be inserted into a jukebox. If you\nwant to add your own custom jukebox songs, you can read the\n\"Adding Jukebox Songs\" guide.\n\nFields:\n\nminecraft:jukebox_playable - Lets the item be inserted into a jukebox and play a custom song.\nsong - A Jukebox song to play when put into a\njukebox.\nshow_in_tooltip - Whether to show the song in the item's tooltip. A boolean which default to true.\n\nExample: /give @s snort_pottery_sherd[minecraft:jukebox_playable={song:\"relic\"}]\n\nThis command gives you a Snort Pottery Sherd which can be inserted into a jukebox to play the song \"Relic\".\n\nlock\n\nUsed to lock a container to a certain \"key\". The \"key\" must be an item with the same data as the container item's lock.\n\nFields:\n\nminecraft:lock - If present, prevents the container from being opened unless the opener is holding an item whose\ndata is the same as the container's one.\n\nExample: /give @s dispenser[minecraft:lock={components:{\"minecraft:custom_name\":\"'My Key'\"}}]\n\nGives you a dispenser which when placed can only be opened with an item whose name is \"My Key\". Note: you can use any component or data, not just custom_name\n\nlodestone_tracker\n\nStores information about a specific lodestone on a compass. Mainly used by the \"Lodestone Compass\" item.\n\nFields:\n\nminecraft:lodestone_tracker - Stores a specific lodestone on this compass.\ntarget - The information about the lodestone, if unspecified will spin the compass randomly.\npos - The coordinates of the lodestone in an integer array.\ndimension - The dimension ID of where the lodestone is located.\ntracked - Default to true, which means this component will be removed once the lodestone is broken, if false\nit will be kept.\n\nExample:\n/give @s compass[minecraft:lodestone_tracker={tracked:true,target:{pos:[I;89,64,-23],dimension:\"overworld\"}}]\n\nGives you a (lodestone) compass which points towards a lodestone located at 89 64 -23 in the overworld. If there is no\nlodestone at that location the compass will spon randomly.\n\nlore\n\nUsed to specify the item's lore. (The lines of text under the item's name)\n\nFields:\n\nminecraft:lore - A list of Raw JSON text components to use as lines. The maximum amount of lines is 256. (See\n\"example\")\n\nExample:\n/give @s book[lore=['[{\"color\":\"gray\",\"italic\":false,\"text\":\"Written by:\"},{\"color\":\"gray\",\"italic\":false,\"text\":\" Diamond\"}]','{\"color\":\"dark_gray\",\"italic\":true,\"text\":\"Published by DPH\"}']]\n\nThis command gives you a book with 2 lines of lore.\n\nmap_color\n\nChanges the color of the markings on the item of the map (Not the actual map when viewed).\n\nFields:\n\nminecraft:map_color - The decimal representation of a color used by the markings on the item of this map.\n\nExample: /give @s filled_map[map_color=16718336]\n\nGives you a map item with the markings on the map's item icon in red.\n\nmap_decorations\n\nContains the icons that are displayed on a map. (Like an explorer map has for structures.)\n\nFields:\n\nminecraft:map_decorations - Contains key-value pairs of the icons that are displayed on this map when held.\n  - Should contain an arbitrary unique string for identification of this decoration. (See\n\"example\")\ntype - The type of the decoration to display, can be any of player, frame, red_marker, blue_marker,\ntarget_x, target_point, player_off_map, player_off_limits, mansion, monument, banner_white,\nbanner_orange, banner_magenta, banner_light_blue, banner_yellow, banner_lime, banner_pink,\nbanner_gray, banner_light_gray, banner_cyan, banner_purple, banner_blue, banner_brown, banner_green,\nbanner_red, banner_black, red_x, village_desert, village_plains, village_savanna, village_snowy,\nvillage_taiga, jungle_temple or swamp_hut.\nx - The X coordinates of where this decoration is placed in the world.\nz - The Z coordinates of where this decoration is placed in the world.\nrotation - The rotation ranging from 0.0 to 360.0 of this decoration's rotation. The default is 180, which is\nthe right way up.\n\nExample:\n/give @s filled_map[map_decorations={\"18340626\":{type:\"village_taiga\",x:1.0,z:2.0,rotation:180.0},\"7332285\":{type:\"mansion\",x:3.0,z:4.0,rotation:360.0}}]\n\nGives you a map with 2 decorations, one for a taiga village and one for a mansion.\n\nmap_id\n\nThe map number of the map to show. Maps are stored in .minecraft\\saves\\ \\data and have file names such as\nmap_1.dat. So this map data file could be used by setting the map number to 1.\n\nFields:\n\nminecraft:map_id - The map number of the map to show.\n\nExample: /give @s filled_map[map_id=2]\n\nGives you a map with the map ID set to 2.\n\nmax_damage\n\nSets the maximum amount of damage (meaning the max durability) this item can take. If unset, this item cannot take any\ndamage, meaning it won't have any durability. Note that it cannot be combined with max_stack_size.\n\nFields:\n\nminecraft:max_damage - The maximum durability this item can have (in other words the maximum damage this item can\ntake).\n\nExample: /give @s diamond_pickaxe[max_damage=1]\n\nThis command gives you a diamond pickaxe which has only one durability, meaning it will break on one use.\n\nmax_stack_size\n\nSets the maximum stack size of this item. The maximum can be 99, meaning you can stack the item upon the default 64.\nNote that it cannot be combined with max_damage.\n\nFields:\n\nminecraft:max_stack_size - The maximum number of items that can stack on each other, can be any number between 1\nand 99.\n\nExample: /give @s diamond_pickaxe[max_damage=1]\n\nThis command gives you a diamond pickaxe which has only one durability, meaning it will break on one use.\n\nnote_block_sound\n\nCan only be used on a player head, and defines the sound event to play when this head is placed on top of a note block.\n\nFields:\n\nminecraft:note_block_sound - An ID of the sound event that plays whne this player head is placed onto a note block.\n\nExample: /give @s player_head[note_block_sound=\"minecraft:entity.generic.hurt\"]\n\nThis command gives you a player head which when placed onto a note block plays the \"hurt\" sound effect.\n\nominous_bottle_amplifier\n\nUsed to define the amplifier amount of the Bad Omen effect on an Ominous Bottle. If this item also contains the consumable component, this effect will be applied when the player consumes the item.\n\nFields:\n\nminecraft:ominous_bottle_amplifier - An integer between 0 and 4 which specifies the amplifier of the Bad Omen effect\non this Ominous Bottle.\n\nExample: /give @s ominous_bottle[ominous_bottle_amplifier=3] 1\n\npot_decorations\n\nThe sherds applied onto a decorated pot.\n\nFields:\n\nminecraft:note_block_sound - A list of sherds applied to this decorated pot, if the list has less than 4 enties the\nrest will default to \"minecraft:brick\".\n  - The ID of one of the sides, can either be a brick or one of the sherds.\n\nExample:\n/give @s decorated_pot[pot_decorations=[\"minecraft:heart_pottery_sherd\",\"minecraft:howl_pottery_sherd\",\"minecraft:brick\",\"minecraft:mourner_pottery_sherd\"]]\n\npotion_contents\n\nDefines the status effects contained in a potion. Note that this can only be used on a potion, a splash potion, a lingering potion or a tipped arrow. If this item also contains the consumable component, these effects will be applied when the player consumes the item.\n\nFields:\n\nminecraft:potion_contents - The status effects stored in this potion. Can also be defind as a string, in which case\ncorresponds to the potion field (Example #2).\npotion - An optional field with the ID of the potion type.\ncustom_color - An (overriding) color of this potion's texture and particles. Written as a decimal representation\nof the color.\ncustom_effects - A list of additional effects this potion applies once drank.\nid - The ID of the effect to apply.\namplifier - The amplifier of the effect (Level 1 = value 0). An optional field that default to 0.\nduration - The duration of the effect in ticks, where -1 is infinite. An optional field that default to 1.\nambient - An optional boolean, which default to false, deciding if this effect should be ambinent (Meaning it\nwill be less obstructive on screen, used by beacons).\nshow_particles - An optional boolean, which default to true, decides whether or not to produce the effect's\nparticles.\nshow_icon - An optional boolean, which default to true, decided whether or not to show an icon of this effect.\ncustom_name - An optional string that is used by the game to generate containing stack name. This name has a higher priority than the item_name component. (Example: If the value was foo, and the item would be minecraft:lingering_potion, the name of item will be translation of item.minecraft.lingering_potion.effect.foo.)\n\nExamples: #1:\n/give @s potion[potion_contents={custom_color:393215,custom_effects:[{id:\"minecraft:glowing\",amplifier:0,duration:-1,show_particles:1b,show_icon:0b,ambient:1b}]}]\n\nGives you a bluish-ly colored potion which when drank gives you a glowing effect. This effect is level 1 and is\ninfinite, meaning it will never run out.\n\n#2: /give @s potion[potion_contents={potion:\"minecraft:night_vision\"}]\n\nprofile\n\nUsed to change the \"owner\" of a player head.\n\nFields:\n\nminecraft:profile - The information of the \"owner\" of this player head. Can also be defind as a string, in which\ncase corresponds to the name field.\nname - The username of the \"owner\". (his IGN) If only this field is specified the others will be filled out\nautomatically (Optional).\nid - The UUID of the \"owner\" (Optional).\nproperties - A list of additional properties (Optional).\nname - The name of the property. (Optional)\nvalue - The texture data which is encoded in base64. (Optional)\nsignature - The signature. (Optional)\n\nExample: /give @s player_head[profile={name:\"Silabear\"}]\n\nWhen ran, gives a player head with the head of a player which name is \"Silabear\".\n\nrarity\n\nChanges the rarity of the item. Setting a rarity changes the color of its default name. The colors are based on the\nrarity, where common is white, uncommon is yellow, rare is aqua and epic is light purple.\n\nFields:\n\nminecraft:rarity - A string which changes the rarity of the item, also sets the color of its default name. Can be\nany of common, uncommon, rare or epic.\n\nExample: /give @s chorus_fruit[rarity=\"epic\"]\n\nGives the player a chorus fruit with the \"epic\" rarity, meaning it will have a light purple name.\n\nrecipes\n\nCan only be used on a knowledge book, where it stores the recipes the player gets when the item\nis right-clicked.\n\nFields:\n\nminecraft:recipes - A list of recipes the player unlocks when right-clicking this book.\n  - An ID of a recipe.\n\nExample: /give @s knowledge_book[recipes=[\"iron_pickaxe\",\"custom:recipe\"]]\n\nA knowledge book which when right-clicked gives you two recipes, a recipe for an iron pickaxe and a\ncustom recipe with an ID of custom:recipe.\n\nrepair_cost\n\nUsed to add a number of experience levels to add to the base level cost when reparing or renaming the item in an anvil.\n\nFields:\n\nminecraft:repair_cost - An integer which controls how many experience levels to add to the base level when using\nthis item in an anvil.\n\nExample: /give @s netherite_hoe[repair_cost=69]\n\nGives you a netherite hoe which adds 69 experience levels when you want to repair, combine or rename this item.\n\nrepairable\n\nAllows the item to be repaired in an anvil using a specific ingredient. For example how you can repair an iron pickaxe\nwith an iron ingot.\n\nFields:\n\nminecraft:repairable - Allows the item to be repaired in an anvil using a specific ingredient.\nitems - Either a single item or a list of items which this item can be repaired by.\n\nExample: /give @s elytra[repairable={items:\"leather\"}]\n\nWill give you an elytra which can be repaired by leather.\n\nstored_enchantments\n\nControls the stored enchantments on this item. Do not confuse this component with the enchantments\ncomponent. \"Stored enchantments\" means they are not active, for example like on an enchanted book. If you use a\nknockback enchated book, it wont actually apply the knockback when an entity is hit.\n\nFields:\n\nminecraft:stored_enchantments - Stores the un-active enchantments on this item.\nlevels - Contains key-value pairs of levels of un-active enchantments stored on this item.\n  - A single key-value pair, where the key is the ID of the enchantment and the value is the\nlevel of the enchantment you want.\nshow_in_tooltip - Whether to show the enchantments in the item's tooltip. A boolean which default to true.\n\nExample: /give @s enchanted_book[stored_enchantments={levels:{\"minecraft:knockback\":2}}]\n\nWhen ran, gives an enchated book with knockback 2 as a stored enchantment.\n\nsuspicious_stew_effects\n\nControls the effects applied when the suspicious stew is consumed. If this item also contains the\nconsumable component, these effects will be applied when the player consumes the item.\n\nFields:\n\nminecraft:suspicious_stew_effects - A list of effects to apply when this suspicious stew is consumed.\nid - The ID of the effect to apply.\nduration - The duration of the effect in ticks, defaults to 160.\n\nExample:\n/give @s suspicious_stew[suspicious_stew_effects=[{id:\"minecraft:blindness\",duration:100},{id:\"minecraft:invisibility\"}]]\n\ntool\n\nUsed to control if this item is a tool, meaning it can break blocks with a certain speed.\n\nFields:\n\nminecraft:tool - Whether this item is a tool or not.\ndefault_mining_speed - A boolean which sets the default mining speed of this item, this is not used if there is a\nrule overriding it.\ndamage_per_block - An integer defining the amount of durability to tak each time a block is broken with this item.\nrules - A list of rules which define and override the blocks which you can and can't break.\nblocks - The blocks which have special behaviour when being mined with this tool. Can be either a single block\nID, a list of block IDs, or a block tag with a #, but never a list of block tags.\nspeed - If specified, overrides the normal block breaking speed if you are breaking the specified block(s).\ncorrect_for_drops - Whether to drop the loot for the specified blocks or not.\n\nExample:\n/give @s echo_shard[tool={default_mining_speed:5,damage_per_block:8,rules:[{speed:20,correct_for_drops:true,blocks:\"#moss_replaceable\"}]}]\n\nThis command gives you an echo shard which has a default mining speed of 0.5, but any block which is in the\nblock tag #moss_replaceable will be mined at a minig speed of 20 and will be dropped\nwhen mined.\n\ntrim\n\nStores the trims applied to a piece of armor.\n\nFields:\n\nminecraft:trim - Stores the trim applied to this armor piece.\npattern - An ID of the trim pattern. (e.g. minecraft:silence)\nmaterial - An ID of the trim material. (e.g. minecraft:redstone)\nshow_in_tooltip - Whether to show trim applied to this piece of armor in the item's tooltip. A boolean which\ndefault to true.\n\nExample: /give @s netherite_chestplate[trim={pattern:'minecraft:silence',material:'minecraft:redstone'}]\n\nGives you a netherite chestplate with the \"silence\" armor trim coated in redstone.\n\ntooltip_style\n\nCan change the item's tooltip style by specifing the direct path to your custom tooltip textures in a resourcepack.\n\nFields:\n\nminecraft:tooltip_style - The namespace:id of the item's toolitip. (See \"example\")\n\nExample: /give @s conduit[tooltip_style=\"namespace:id\"]\n\nWill give you a conduit with a custom tooltip namespace:id, which will reference the files\n/assets/ /textures/gui/sprites/tooltip/ _background and /assets/ /textures/gui/sprites/tooltip/ _frame from a resourcepack.\n\nunbreakable\n\nWhether this item takes durability damage or not.\n\nFields:\n\nminecraft:unbreakable - A list of effects to apply when this suspicious stew is consumed.\nshow_in_tooltip - Whether to show that the item is \"unbreakable\" in the item's tooltip. A boolean which default to\ntrue.\n\nExample: /give @s golden_pickaxe[unbreakable={}]\n\nGives you a golden pickaxe which cannot take durability damage.\n\nuse_cooldown\n\nUsed to apply a cooldown to all items of the same type when used.\n\nFields:\n\nminecraft:use_cooldown - If present, will apply a cooldown to all items of the same type when this item is used.\nseconds - The amount of seconds the cooldown will take.\ncooldown_group - An optional namespace:id which represents the cooldown group. If present, this item will share\nthe cooldown will all items which have the same namespace id as this one. If left out, will instead take cooldown\nwill all items of the same type (like a diamond with other diamonds).\n\nExample: /give @s ender_pearl[use_cooldown={seconds:1.5, cooldown_group:\"example:custom_item\"}]\n\nWill give you an enderpearl which on use has a cooldown of 1.5 seconds and will share the cooldown will all other\nitems that have the cooldown group example:custom_item.\n\nuse_remainder\n\nIf present, will replace the item with a specified remainder item if its stack count has decreased after use. Like when\nyou use a water bucket, a bucket will take its place instead.\n\nFields:\n\nminecraft:use_remainder - If present, will replace the item with a specified remainder item if its stack count has\ndecreased after use.\nid - The ID of the item. Note that it cannot be air!\ncount - The count of the item. If left out defaults to 1, the maximum count is 99.\ncomponents - The item components of the item, optional.\n\nExample: /give @s golden_apple[use_remainder={id:'minecraft:gold_nugget', count:1}]\n\nGives you a golden apple which when consumed, will give the player a gold nugget.\n\nwritable_book_content\n\nThe content writen in this Book and Quill.\n\nFields:\n\nminecraft:writable_book_content - The contents of this Book and Quill.\npages - A list of pages with text in this book.\nraw - The raw text of this page.\nfiltered - An optional \"filtered\" text of the page. This only shown to players which have chat filter enabled.\n\nwritten_book_content\n\nThe content and metadata in this Written Book.\n\nFields:\n\nminecraft:suspicious_stew_effects - The contents and metadata of this Written Book.\npages - A list of pages with text in this item.\nraw - The raw text of this page.\nfiltered - An optional \"filtered\" text of the page. This only shown to players which have chat filter.\ntitle - The title of this book.\nraw - The raw text as the title.\nfiltered - An optional \"filtered\" text as this items title. This only shown to players which have chat filter\nenabled.\nauthor - The author of this Written Book.\ngeneration - Defines the number of times this Written Book has been copied. Where 0 is \"original\", 1 is \"copy of\noriginal\", 2 is \"copy of copy\", 3 is \"tattered\", default to 0.\nresolved - If this field is true, the JSON text components have already been resolved (like entity selectors,\nscores, etc...). If it's false, they are resolved when this book is opened by a player for the first time.\nDefaults to false.","url":"/wiki/commands/item-components/","tags":[]},{"title":"Coordinates","content":"Coordinates\n\nCoordinates in Minecraft are represented by an x, y, and z value. They are used to represent positions of\nentities, blocks, particles, sounds and more. In commands, they are represented as simply x y z, where x, y, and\nz are decimal numbers representing the coordinates on each axis.\n\nBlock coordinates are locked to the grid and are unique - there can only be one block per set of coordinates. Block\ncoordinates are whole numbers, for example you can have a block at 123 86 94 but not 123.7 86.2 94.6. Entities are\nnot locked to the grid - they can be at decimal positions (and usually are).\n\nx.0 y.0 z.0 represents the bottom left corner of a block, not the centre. The centre of a block would be represented\nby the coordinates x.5 y.5 z.5.\n\n:::info\nEvery command and function in Minecraft is always executed at a position. This is usually the world spawn. You\ncan change this using the commands \"execute at\" or \"execute positioned\".\n:::\n\nExamples\n\n/setblock 123 86 94 minecraft:pink_concrete: In this setblock command, we tell the game to put a pink concrete\nblock at the coordinates 123 86 94.\n/tp @s 66.2 98 45.7: This command would teleport the current entity to the exact coordinates 66.2 98 45.7\n\nRelative Coordinates\n\nUsing the symbols ~ and ^, we can reference coordinates relative to the current coordinates (for example, you can\nget the position 7 blocks above the current position).\n\n represents the current position on any axis. For example, 12  76 would teleport me to x=12 z=76 but keep y\nas the current position. The coordinates   ~ would represent the position of the command - this is useful to do\nsomething at the current position such as placing a block or summoning an entity.\n\nThe  symbol can be followed by a number to include an offset to the current position. For example,  12  would\nrepresent the current position offset by 10 blocks on the y-axis (or in simpler terms: the position 10 blocks above\nthe current position). This can also be a negative number.\n\nSimilarly ^ represents a relative position, taking into account the current rotation too. The most common use for this\nis to get a position in front of the direction of rotation. For example, you can use ^ ^ ^5 to get the position 5\nblocks in front of the current position in whatever direction the command or entity is rotated.\n\n^3 ^ ^ represents a vector 3 blocks perpendicular of the head (sway)\n^ ^3 ^ represents a vector 3 blocks \"above\" of the head (heave)\n^ ^ ^3 represents a vector 3 blocks in front of the head (surge)","url":"/wiki/commands/coordinates/","tags":[]},{"title":"Commands","content":"Commands\n\nCommands are the basic building blocks of most datapacks. Each command is a simple instruction which can tell the game\nto do something. Most datapacks are made primarily of functions - functions are just lists of\ncommands ran in order.\n\nCommand Syntax\n\nMost commands follow this basic syntax:\n\ncommand ...\n\ncommand would refer to the name of the command, and ... would be the arguments that come after the command, changing\nhow it runs.\n\nMinecraft (and this wiki) use these for showing command syntax, to make it easier for you to understand:\n\n| Variable                 | Meaning                                                                            |\n| ------------------------ | ---------------------------------------------------------------------------------- |\n|           | An argument.                                                                       |\n| [entry]                | An optional entry.                                                                 |\n| [entryA│entryB│entryC] | Pick one of these. This is optional.                                               |\n| (entryA│entryB│entryC) | Pick one of these. This is required                                                |\n| ...                    | Some syntax is left out, you can find more about the command on its dedicated page |","url":"/wiki/commands/about/","tags":[]},{"title":"NBT","content":"NBT\n\nSNBT Format\nSNBT (Stringified Named Binary Tags) format is a JSON-like tree structure used in datapack development to manipulate the\nNBT data of an entity. SNBT is a human-readable version of NBT (Named Binary Tags), which is a format used by Minecraft\nto store data. NBT is used to store data about entities, items, blocks, structures, game saves, and more.\n\nSNBT consists of key/value pairs, which are represented as key:value. These are contained with compounds,\nmarked with curly brackets ({}). Compounds can contain multiple key/value pairs, which are separated with commas, like\nso: key:value,key:value,key:value\n\nAn example SNBT structure looks like:\n{name:\"Silabear\",age:102,friends:[\"Flynecraft\",\"Aandeel\",\"Cobblestone\"],socials:{discord:\"silabear\",twitch:\"silabearr\"}}\n\nData Types\n\nSNBT has a few data types you can use to represent different types of data, including whole numbers, decimal numbers,\nstring, text, booleans, and more.\n\nStrings\n\nStrings can store any text value, or more technically, any sequence of unicode characters.\n\nFormat: Strings are stored within either double or single quotes. For strings containing standard characters\n(A-Z, a-z, 0-9, -,_,+,.), the quotes are optional, but recommended. \"\" or ' ' or  \n\nExample: name:\"Silabear\", name:'Cobblestone', name:Aandeel\n\nWhole Numbers\n\nShort, Int, and Long data types all represent integers (whole numbers).\n\nByte** is an unsigned 8 bit integers, it can be any value from 0 to 255\nShort** is a signed 16 bit integer, it can be any value from -32,768 to 32,767\nInt** is a signed 32 bit integer, it can be any value from -2,147,483,648 to 2,147,483,647\nLong** is a signed 64 bit integer, it can be any value from -9,223,372,036,854,775,808 to\n9,223,372,036,854,775,807\n\nFormat: By default, numbers are stored as integers. To store a number in the other formats, you need to use the appropriate suffix.\nFor shorts, ints, and longs, the prefix is s, i, and l respectively.\n\nExample: count:1234s, bigNumber:1200000, reallyBigNumber:12123023687234L, byte:112b\n\nDecimal Numbers\n\nFloat and Double data types both represent decimal numbers.\n\nFloat** is a signed 32 bit floating point number, it can be any value from -3.4028235E38 to 3.4028235E38. It is precise to 7 decimal places.\nDouble** is a signed 64 bit floating point number, it can be any value from -1.7976931348623157E308 to\n1.7976931348623157E308. It is precise to 15 decimal places.\n\nFormat: By default, decimal numbers are stored as doubles. To store a number in the other formats, you need to use the\nappropriate suffix. For floats, the suffix is f. For doubles, the suffix is d.\n\nExample: pi:3.1415926535d, e:2.718281828459045d, phi:1.6180f\n\nBytes or Booleans\n\nIn older versions of Minecraft, booleans were stored as bytes with 0b representing \nfalse and 1b representing true. In newer versions, booleans were introduced.\nEssentially, booleans represent the old 0b and 1b with a more descriptive name.\nIt's recommended to use booleans instead of bytes whenever possible, as they are more readable.\n\nArrays\n\nArrays are used to store multiple values of the same type. There are currently 3 types of arrays:\n\nByte Array**: Used to store multiple bytes\nInt Array**: Used to store multiple integers\nLong Array**: Used to store multiple longs\n\nFormat: Arrays are defined using square brackets ([]), followed by the type of the array, a semicolon, and then your data. \nThe data still has to have prefixes if it needs it.\n\nExample: [B;1b,2B,true,false], [I;1,2,3,4,5], [L;1l,2l,3l,4l,5l]\n\nValidator\n\nBelow is a validator for SNBT. It will validate the input and show you if it is valid or not.","url":"/wiki/nbt/nbt/","tags":[]},{"title":"Storages","content":"Storages\n\nStorages are a way of storing NBT data in a world without attaching it to an entity or block. Storages\nare stored globally per world, and can only be manipulated with the /data command. Storages are identified by their\nresource location, and don't need to be initialized beforehand, unlike scoreboards.\n\nUnlike entity and block NBT, storages have no fixed structure, and can contain whichever arbitrary keys are added to it.\n\nExample\n\nStorages are defined when a /data command modifies them. Unlike scoreboards, storages do not need to be \"created\" -\nthe only code needed to initialize a storage is a /data modify or /data merge command to that storage, for example:\n\ndata merge storage example:main {number: 1, message: \"Hello!\"}\ndata modify storage example:main other_number set from storage example:main number\ndata modify storage compound.array append value 42\n\nAfter which, if no previous modifications had occurred, the example:main storage would now look like this:\n\n{\nnumber: 1,\nmessage: \"Hello!\",\nother_number: 1,\ncompound: {\narray: [42]\n}\n}\n`","url":"/wiki/nbt/storages/","tags":[]},{"title":"Tags","content":"Tags\n\nRegistry tags, not to be confused with entity tags, are essentially lists of groups such as blocks,\nitems, entity types, etc. They use JSON format and are located in the data/ /tags/  folder.\n\nSpecial tags\n\nMinecraft uses some tags internally for certain behaviours. These tags are located in the minecraft namespace. For\nexample:\n\nany functions in the #minecraft:load function tag will be automatically run when a datapack is loaded\nthe #minecraft:minable/pickaxe block tag lists blocks which are mined faster using a pickaxe.\n\nIn many cases, modifying these special tags allows you to configure certain aspects of how Minecraft behaves.\n\nRegistries\nTags group various types in a specific registry (category), such as items, blocks, functions, game events, chat types, etc.\n\nThis list shows some of the possible registry types, as well as the path their tags should be put in.\n\n| Registry Types    | Path                                               | Example Value                 |\n|-------------------|----------------------------------------------------|-------------------------------|\n| Items             | /tags/item                                       | \"minecraft:apple\"           |\n| Blocks            | /tags/block                                      | \"minecraft:grass_block\"     |\n| Entity types      | /tags/entity_type                                | \"minecraft:pig\"             |\n| Functions         | /tags/function                                   | \"namespace:some_function\"   |\n| Fluids            | /tags/fluid                                      | \"minecraft:water\"           |\n| Game Events       | /tags/game_event                                 | \"minecraft:container_open\"  |\n| Chat Types        | /tags/chat_type                                  | \"minecraft:say_command\"     |\n| Damage Types      | /tags/damage_type                                | \"minecraft:fly_into_wall\"   |\n| Banner patterns   | /tags/banner_pattern                             | \"minecraft:square_top_right\"|\n| Cat variants      | /tags/cat_variant                                | \"minecraft:jellie\"          |\n| Enchantments      | /tags/enchantment                                | \"minecraft:sharpness\"       |\n| Goat horns        | /tags/instrument                                 | \"minecraft:seek_goat_horn\"  |\n| Paintings         | /tags/painting_variant                           | \"minecraft:skull_and_roses\" |\n| Entity POI        | /tags/point_of_interest_type                     | \"minecraft:cleric\"          |\n| Biome             | /tags/worldgen/biome                             | \"minecraft:plains\"          |\n| Flat world preset | /tags/worldgen/flat_level_generator_preset       | \"minecraft:classic_flat\"    |\n| Structures        | /tags/worldgen/structure                         | \"minecraft:village\"         |\n| World preset      | /tags/worldgen/world_preset                      | \"minecraft:large_biomes\"    |\n\nJSON format\n\nTags have a very simple format, with two fields.\n\nreplace\n\nreplace is a boolean field which decides whether the tag should replace other tags with the same path, or merge with\nthem. For example, if \"replace\": true is added to the tick.json function tag, only the tick functions in that\ndatapack would load, as it would replace all other defined tick tags. If replace is false, it will merge with any\nvalues in tick.json within other packs. replace is an optional field, and if not specified will default to false.\n\nvalues\n\nValues (values) is an array containing everything to group under this tag. Each element is either a string or an\nobject containing an id field and a required field (object example {\"required\": false, \"id\":\"minecraft:stick\"} ).\nThe plain string and the id field contain either the ID of the entry (such as minecraft:diamond_block), or the ID of\nanother tag, beginning with a # (such as #minecraft:logs). The required field in the object is a boolean (true\nor false) which defines if this entry can be ignored if the id cannot be found.\n\nExample\nHere is an example item tag file:\n\n{\n\"replace\": true,\n\"values\": [\n\"#minecraft:logs\", \n\"#minecraft:planks\", \n\"minecraft:chest\", \n\"minecraft:stick\"\n]\n}\n:::info\nTag files can also reference other tags. In this case, #minecraft:logs and #minecraft:planks are two vanilla item tags. This item tag will contain whatever is defined in those two item tags as well.\n:::","url":"/wiki/files/tags/","tags":[]},{"title":"Functions","content":"Functions\n\nFunctions are files essentially containing a list of Minecraft commands. Function files end in .mcfunction, and are\nlocated in the data/ /function folder. Functions can be called (ran) using the function command. (See\n/function for more information)\n\nThe function folder can contain sub-folders for organisation. This changes their reference accordingly - for example,\na function located at data/ /function/sub_folder/my_func.mcfunction would be called using\nfunction :sub_folder/my_func.\n\nWhen a function is run, the commands within it are executed in order. If the return command is run, the function stops\nexecuting immediately and any commands after the return are ignored.\n\nAny line in a function which starts with a # is a comment, and the game ignores it. Any other line is interpreted\nas a command\n\nExample\n\nThis function will give every player an apple, then tell them to enjoy the apple.\n\nGive a player the apple\ngive @a minecraft:apple\n\nTell them to enjoy the apple\nsay Enjoy the apple!\n\nMacro functions\n\nMacros can dynamically change part of a function by inserting NBT into it. Any function can define a macro within it. A\nmacro is a command beginning with $. Macros can use a special syntax: $(). This will substitute for any\nvalue provided as   when run.\n\nThe /function command can specify a NBT compound to use as the macro values. In traditional programming, this is best\nrepresented as someFunction(foo, bar)\n\nExample\n\nIn this example, we write a function that gives the player a number of diamonds using a macro.\n\nWhen called, $(count) will be replaced with some number, producing a valid command\n$give @s diamond $(count)\n\nfunction example:macro {count: 7}\n\nThis also works\ndata modify storage example:storage count set value 12\nfunction example:macro with storage example:storage\n`","url":"/wiki/files/functions/","tags":[]},{"title":"Recipes","content":"Recipes\n\nRecipes are files which define crafting recipes in-game. They can be used to add new recipes, or overwrite existing\nones.  \nRecipes are JSON files located in the data/ /recipe folder.\n\nJSON format\n\nSince recipe files represent a variety of different recipe types, the format can vary. However, there are some fields\nwhich appear in every recipe file.\n\ntype\n\nDetermines which type of recipe this is. Possible values:\n\n| Type                     | Description                                                                                                                              |\n| ------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| blasting               | A recipe for a blast furnace                                                                                                             |\n| campfire_cooking       | A recipe for cooking items on a campfire                                                                                                 |\n| crafting_shaped        | A shaped crafting recipe in a crafting table. Ingredients must be placed in the correct pattern to craft                                 |\n| crafting_shapeless     | A shapeless recipe in a crafting table. Ingredients can be placed in any pattern to craft                                                |\n| crafting_special_*     | A crafting recipe handled using built-in logic, and not displayed in the recipe book. Only useful for disabling/enabling certain recipes |\n| crafting_decorated_pot | The recipe for crafting decorated pots. Also handled with built-in logic, but does show up in the recipe book                            |\n| smelting               | A recipe for a furnace                                                                                                                   |\n| smithing_transform     | A recipe to upgrade an item in a smithing table                                                                                          |\n| smithing_trim          | A recipe to add an armor trim to an item in a smithing table                                                                             |\n| smoking                | A recipe for a smoker                                                                                                                    |\n| stonecutting           | A recipe for a stonecutter                                                                                                               |\n\ncategory\n\nWhich category the recipe appears in the recipe book. If not provided, defaults to misc.  \nPossible values: blocks, building, equipment, food, misc, redstone\n\ngroup\n\nAn identifier to group multiple recipes in the recipe book. For example, recipes to craft planks use this.  \nAllowed in most recipe types, except: crafting_decorated_pot, crafting_special_*, smithing_transform,\nsmithing_trim\n\nCooking fields\n\nThese fields are present in blasting, campfire_cooking, smelting and smoking recipes.\n\n| Field         | Format                                     | Default value                          | Description                                         |\n| ------------- | ------------------------------------------ | -------------------------------------- | --------------------------------------------------- |\n| ingredient  | An ingredient | required                             | The ingredient which gets cooked                    |\n| result      | A single result          | required                             | The result of cooking the ingredient                |\n| experience  | A number                                   | 0                                    | The amount of experience gained from this recipe    |\n| cookingtime | An integer                                 | 100, or 200 for smelting recipes | The number of ticks it takes to cook the ingredient |\n\n:::tip\nThe vanilla recipes range between 0.1 and 1 experience, and take 200 ticks (10 seconds) for smelting, 100 ticks\nfor blasting and smoking, and 600 ticks for campfire cooking\n:::\n\ncrafting_shaped fields\n\nThese fields are present in shaped crafting recipes.\n\n| Field     | Format                              | Description                                                                                                                                                                                                                              |\n| --------- | ----------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| pattern | An array of strings                 | The pattern for the crafting recipe. Represents rows of the crafting grid. Each row contains up to three characters, each representing an ingredient, spaces can be used to indicate an empty slot. All rows must be of the same length. |\n| key     | An object                           | A map of characters to ingredients. Determines what the characters in pattern represent. Each key is the character which represents it, and the value being an ingredient.                                |\n| result  | A counted result | The result of the recipe                                                                                                                                                                                                                 |\n\n:::info \nIf the rows are less than three characters long, or there are fewer than three rows, the recipe can be moved\naround the crafting grid. Recipes with two or fewer rows and columns can be crafting in the 2x2 crafting grid in the\ninventory. \n:::\n\n:::tip \nThis can be a bit hard to understand from the description; it may be helpful to read the\nexample to understand it better.\n:::\n\ncrafting_shapeless fields\n\nThese fields are present in shapeless crafting recipes.\n\n| Field         | Format                                               | Description                                |\n| ------------- | ---------------------------------------------------- | ------------------------------------------ |\n| ingredients | An array of ingredients | The ingredients needed to craft the recipe |\n| result      | A counted result                  | The result of the recipe                   |\n\ncrafting_special_* fields\n\nThe crafting_special_* recipes don't have extra fields, but there are many possible values of the type field which\ncount as special crafting recipes.  \nPossible special recipes:\n\n| Recipe Type                           | Description                                          |\n| ------------------------------------- | ---------------------------------------------------- |\n| crafting_special_armordye           | The recipe for dyeing leather armor                  |\n| crafting_special_bannerduplicate    | The recipe for copying banners                       |\n| crafting_special_bookcloning        | The recipe for copying written books                 |\n| crafting_special_firework_rocket    | The recipe for crafting firework rockets             |\n| crafting_special_firework_star-     | The recipe for crafting firework stars               |\n| crafting_special_firework_star_fade | The recipe for adding fade colors to firework stars  |\n| crafting_special_mapcloning         | The recipe for copying maps                          |\n| crafting_special_mapextending       | The recipe for extending maps                        |\n| crafting_special_repairitem         | The recipe for repairing items with durability       |\n| crafting_special_shielddecoration   | The recipe for adding banners to shields             |\n| crafting_special_shulkerboxcoloring | The recipe for dyeing shulker boxes                  |\n| crafting_special_tippedarrow        | The recipe for adding potion effects to arrows       |\n| crafting_special_suspiciousstew     | The recipe for crafting suspicious stew from flowers |\n\nSmithing fields\n\nThese fields are present in smithing_transform and smithing_trim recipes.\n\n| Field      | Format                                    | Description                                                            |\n| ---------- | ----------------------------------------- | ---------------------------------------------------------------------- |\n| template | An ingredient | The item to be used as the template in the recipe                      |\n| base     | An ingredient | The base item to be upgraded or trimmed                                |\n| addition | An ingredient | The item used to upgrade or trim the base                              |\n| result   | A counted result       | The result of the recipe, only present in smithing_transform recipes |\n\nstonecutting\n\nThese fields are present in stonecutting recipes.\n\n| Field        | Format                                    | Description                   |\n| ------------ | ----------------------------------------- | ----------------------------- |\n| ingredient | An ingredient              | The ingredient for the recipe |\n| result     | A counted result       | The result of the recipe      |\n\nCommon data structures\n\nThis is a list of common data structures used in different recipe formats.\n\nIngredient\n\nRepresents possible ingredients for a recipe. Can be an item's resource location, the hash-prefixed resource location of an item tag (e.g. #minecraft:logs), or an array of valid item resource locations.\n\n:::info \nUnfortunately, components cannot be detected for recipe ingredients \n:::\n\nSingle result\n\nRepresents a single item, the result of a recipe. An object containing:\n\n| Field                   | Format    | Description                                                                                       |\n| ----------------------- | --------- | ------------------------------------------------------------------------------------------------- |\n| id                    | A string  | The id of the resulting item                                                                      |\n| components (optional) | An object | A map of component names to values, added to the resulting item |\n\nCounted result\n\nRepresents the result of a recipe. A single result, with an optional count field, an integer\nspecifying the count of the resulting item. If not included, the count defaults to 1.\n\nExample\n\nThis file adds a shaped crafting recipe to craft bedrock out of beds and rock (stone). For examples of every recipe\ntype, see the examples repository.\n\nThis file should be placed in the data/ /recipe folder. \n\n:::info\nminecraft:beds is an\nitem tag provided by Minecraft containing all colors of beds.\n:::\n\n{\n\"type\": \"minecraft:crafting_shaped\",\n\"pattern\": [\n\"_\",\n\" X \",\n\"_\"\n],\n\"key\": {\n\"_\": \"#minecraft:beds\",\n\"X\": \"minecraft:stone\"\n},\n\"result\": {\n\"id\": \"minecraft:bedrock\"\n}\n}\n`","url":"/wiki/files/recipes/","tags":[]},{"title":"Breaking Changes","content":"List of breaking changes\n\nThis is list of all breaking changes to datapacks (excluding resource packs). Special thanks to Misode's Technical\nChangelog for the source of many of these.\n\n1.21.4\nItem Components\nField model in equippable component has been renamed to asset_id.\nThe dyed component now tint's based on the model, not item ID.\nThe custom_model_data component has new fields floats, flags, strings, colors.\nItem blocks with block_entity_data component will now set block entity data only if id tag matches type of placed block entity\n\nRenames\nThe TNTFuse field of TNT Minecarts has been renamed to fuse\nChanged some Furnace, Smoker and Blast Furnace data. From camelCase to snake_case.\nRenamed CookTime to cooking_time_spent\nRenamed CookTimeTotal to cooking_total_time\nRenamed BurnTime to lit_time_remaining\n\nOther\nRemoved #tall_flowers block tag. With that the #flowers and #tall_flowers item tags were also removed.\nThe trail particle has a new required field: duration - Indicates, in ticks, for how long the particles should travel to its destination.\n🎨 The item model resource pack format got completely changed, now allowing for tinting, layered, conditional, and much more!\n\n1.21.2\nItem Components\nThe food item component no longer automatically allows for consumption of food, and now only holds the data relating to it (meaning nutrition, saturation and can_always_eat are the only fields left in the component)\n🛠️ To fix this, just add the consumable component: consumable={}. You can customize this component even more, you can read about it here.\nThe lock has been changed into an item predicate, with a format of lock={ITEM_PREDICATE}\n🛠️ The previous lock=\"MyKey\" would now look like lock={components:{\"minecraft:custom_name\":\"'MyKey'\"}}\nThe fire_resistant component has been renamed to damage_resistant, with a new field\ntypes - A # damage type tag. Items in entity form or worn by players with this component will be resistant to the damage types included in the tag.\n\nLoot Tables\nThe /loot command now returns an error when trying to drop from block without loot table (like air)\nThe special loot table empty has been removed.\nSheep now always use a single loot table entities/sheep, but wool drops are still defined in sub-tables in  entities/sheep/ \n\nOther\nAttribute IDs now don't have the generic., player. or zombie. prefixes anymore (generic.scale → scale).\nboat and chest_boat entity types have been split into separate types, one per variant (Type=oak →\nminecraft:oak_boat,...)\nWith that the minecraft:boat entity sub-predicate has been removed.\nThe previous Lock field of containers has been renamed to lock and is now an item predicate.\nYou now cannot ride Leash Knots, Lighting Bolts and Fishing Bobbers with /ride command.\nThe killed_by_crossbow advancement was renamed to killed_by_arrow, and will now trigger whenever an arrow kills an entity, not just when fired from a crossbow.\nRenamed effect type damage_item to change_item_damage, which now also supports negative amounts.\nRemoved liquid carvers and changed biome format (the carvers field is now just a list of carvers)\n\n1.21\nGeneral Renames\nAll folders which previously had plural names (except tags) now have singular names. A list of all changed folders can be found below:\nstructures → structure\nadvancements → advancement\nrecipes → recipe\nloot_tables → loot_table\npredicates → predicate\nitem_modifiers → item_modifier\nfunctions → function\ntags/functions → tags/function\ntags/items → tags/item\ntags/blocks → tags/block\ntags/entity_types → tags/entity_type\ntags/fluids → tags/fluid\ntags/game_events → tags/game_event\nThe uuid and name arguments have been replaced with a singular namespaced id argument.\n🛠️ For example: attribute ... modifier add 0.5 add_value would now look like attribute ... modifier add 0.5 add_value\n\nEntity NBT\nEntity attribute format has changed:\nAttributes → attributes\nName → id\nBase → base\nModifiers → modifiers (Now stores modifiers in the same format as modifiers in the minecraft:attribute_modifiers item component)\nUUID → uuid\nName → id\nAmount → amount\nOperation → operation (This is now a named constant instead of an int)\nadd_value - now a string, previously 0\nadd_multiplied_base - now a string, previously 1\nadd_multiplied_total - now a string, previously 2\n🛠️ For example: summon ... {Attributes:[{Name:\"generic.scale\",Base:2,Modifiers:[{UUID:[I;1,0,0,0],Name:\"example_modifier\",Amount:1,Operation:0}]}]} would now look like summon ... {attributes:[{id:\"generic.scale\",base:2,modifiers:[{id:\"tutorial:example_modifier\",amount:1,operation:\"add_value\"}]}]}\nReplaced the power NBT tag with an acceleration_power tag. This controls the projectile's acceleration (and maximum speed).\nThis applies to: dragon_fireball, large_fireball, small_fireball, fireball, breeze_wind_charge, wind_charge, wither_skull.\nThe field ShotFromCrossbow from projectile NBT has been removed. A new weapon field has been added to replace this feature.\n🛠️ For example: @e[type=arrow,nbt={ShotFromCrossbow:1b}] would now look like @e[type=arrow,nbt={weapon:{id:\"minecraft:crossbow\"}}]\n\nTags\nRemoved the #minecraft:music_discs item tag\n\nPredicates\nSome predicate fields have been renamed:\nkiller → attacker\ndirect_killer → direct_attacker\nkiller_player → attacking_player\nThe random_chance_with_looting has been renamed (because it's now controlled by enchantments) to random_chance_with_enchanted_bonus. The fields were updated accordingly:\nThe looting_multiplier field has been removed\nThe chance field has been removed.\nenchantment - is a new field containing the namespaced:id of the Enchantment that grants the bonus chance\nenchanted_chance is a new field for the chance for an enchanted item. A level-based value.\nunenchanted_chance - is a new field specifying the chance for an unenchanted item.\nIf you are testing for an enchantment on your item, the field enchantment → enchantments. Can be either an Enchantment, a list of Enchantments or an #Enchantment Tag.\n\nItem Modifiers\nThe looting_enchant field has been replaced by enchanted_count_increase. This has a new field enchantment (specifies which enchantment).\nUnder enchant_randomly the field enchantments is now called options.\nUnder enchant_with_levels the field treasure was removed.\nUnder copy_name the field killer → attacking_entity and killer_player → last_damage_player\n\n1.20.2\nEntity effects in NBT now use namespaced IDs instead of numbers.\nThe structure for entity effects in NBT has been changed from PascalCase to snake_case.\nFor mob effect instances:\nId → id\nAmbient → ambient\nAmplifier → amplifier\nDuration → duration\nShowParticles → show_particles\nShowIcon → show_icon\nHiddenEffect → hidden_effect\nFactorCalculationData → factor_calculation_data\nFor others:\nCustomPotionEffects → custom_potion_effects (potion, lingering_potion, splash_potion, tipped_arrow, arrow)\nEffects → effects (suspicious_stew, area_effect_cloud)\nEffectId → id` (suspicious_stew)\nEffectDuration → duration (suspicious_stew)\nEffectId and EffectDuration → stew_effects (mooshroom)\nActiveEffects → active_effects (player, armor_stand, mobs)\nPrimary → primary_effect (beacon)\nSecondary → secondary_effect (beacon)","url":"/wiki/info/breaking-changes/","tags":[]},{"title":"MCFunction vs Coding","content":"MCFunction vs Traditional Coding\n\nMany people will join the datapack community with experience with traditional programming languages. While this can be\nhelpful for understanding topics, there are a lot of differences between the two, many of which can seem confusing when\nyou are used to a more traditional programming language. In this guide we touch on some common questions and problems people run into when\ntrying to apply traditional coding logic to MCFunction.\n\nQ: How do you do variables in MCFunction?\n\nMCFunction isn't like most programming languages, MCFunction uses scoreboards, storages and macros (1.20.2+) as their variables.\n\nScoreboards are like a table. They store a name and a value which you can then retrieve and modify later. You can use both entity names/UUIDs and \"fake player\" \nnames (names not associated with any player), allowing for easy combination of variables and entity scores. Scoreboards can only hold 32-bit integers and other data \ntypes (such as floats, doubles or strings) can not be stored this way.\n\nStorages are a way of storing NBT data without attaching it to an entity or block. Storages are stored globally per \nworld and unlike scoreboards, don’t need to be initialized beforehand. Unlike entity and block NBT, storages have no fixed structure, and can contain whichever \narbitrary keys are added to it.\n\nMacros are like fancy string templating, when a function is supplied with macros, it will go through the function file\nand replace the macro with its value (block, entity, storage). Interestingly, this also works function-wide, meaning you could use them as mock arguments.\n\n:::warning\nMacros can be significantly slower than other methods, it is best to only use them when necessary or in non-performance-critical code.\n:::\n\nBelow are some examples of their usage:\n\nScoreboards\ncreates a new table called storage\n(dummy means it does not track any statistic)\nscoreboard objectives add storage dummy\n\nadds a fake player named \"$steps\" to storage (using prefix \"$\" to avoid collisions with real players, good practice)\nscoreboard players set $steps storage 41\n\nsets the value of a player to 42\nscoreboard players set Cbble_ storage 42\n\nMacros\nRun cool function with a macro\nfunction dph:cool_function with block   ~ Items\nfunction dph:cool_function with entity @e[type=minecraft:squid,limit=1,sort=nearest] CustomName\nfunction dph:cool_function {Potato:true}\n\nUsage with entity NBT:\nexecute as @p run dph:cool_function with entity @s SelectedItem\n\nthis is in the dph:cool_function function\n$say The player running this function is holding $(count) items with ID $(id)!\n\nStorages\ndata merge storage example:main {number: 1, message: \"Hello!\"}\ndata modify storage example:main other_number set from storage example:main number\ndata modify storage example:main compound.array append value 42\n\n(Get more info on storages on the wiki page)\n\nQ: How do you loop in MCFunction?\n\nLooping in most cases is done with 1 of 2 methods, depending on the use case:\n\nRecursive Function Calls: This is when a function calls itself which will loop until some end condition is met, or forever, if one is never met.\nTick Functions (#minecraft:tick): This is a special tag you can declare that will run every function declared in it every tick, it is best\npractice to only have one of these function in a datapack at a time.\n\nQ: How do you make functions/methods?\n\nEvery MCFunction file is its own function which you can run with the function command. MCFunction does not support inheritance and inherited functions, \nbut you can call any function from anywhere in your datapack.\n\nfunction [...]\n\nQ: How do I do conditionals?\n\nYou can also do some basic conditionals with selectors, but most if not all conditionals are done with the \nexecute if subcommand, which accepts a variety of different inputs and check if they match/are equal. \nYou can learn more about execute if on the execute page.\n\nQ: How do you do math/expressions?\n\nMCFunction does math in an interesting way; it uses scoreboard operations in order to do math. Using the scoreboard players operation subcommand, you can do a \nvariety of math operations.\n\n:::note\nMCFunction does not come with complex math like trigonometry, absolutes, a pre-defined Pi, or even square root! These all must be implemented either by \nhand or with a third-party library.\n:::","url":"/guide/mcfunction-vs-coding/","tags":[]},{"title":"Slowcast","content":"Slowcasting\n\nA Slowcast is similar to a raycast, but unlike a standard Raycast, it is not instant.\n\nIn some cases it is enough to use a simple tp command that teleports a marker a bit forward every tick. If you wanted it\nto move faster, however, you have to increase the distance it teleports and this could result in skipping over entities\nor blocks you might want to detect.\n\nA slowcast solves this problem by teleporting multiple times within a single tick to travel faster but still checking if\nit hits something on its way.\n\n:::info\nThis tutorial uses a thing called a recursive function. A recursive function is a function that runs\nitself over and over again.\n:::\n\nSlowcasting to an entity\n\nThis method shows you how you can create and shoot a slowcast to detect entities on its way.\n\nSlowcasts can be useful if you want to create fast but not instantaneous moving projectiles for magic spells for\nexample.\n\nTo make a slowcast, you need:\n\nset up a projectile with all the data it needs\na duration function to manage the travel distance\na step function that teleports the projectile and checks if it hit something\na temporary loop that calls the step function for all active projectiles.\n\nLet's start by creating all the necessary scoreboards in the load function.\n\nscoreboard objectives add temp dummy\nscoreboard objectives add slowcast.steps dummy\nscoreboard objectives add slowcast.duration dummy\n\nThe next step is to initialize the projectile. This is done by running the following function as and at the player. It\nsummons a new marker entity (any other entity works too) and runs the setup function as that entity.\n\nexecute anchored eyes positioned ^ ^ ^.3 summon minecraft:marker run function :setup\n\nSadly it is not possible to add nbt data in the summon sub-command so we have to add it in the setup function too. We\nwill give it a tag that marks it as a slowcast projectile. After that, we set all the scores it needs to function\nproperly. In this example, you will see that instead of setting the scores directly it copies from temporary\nscoreboards. This is so that the values are not hardcoded and can be different for different projectiles without having\nto create a new setup function for each projectile. At the end, we then call the temporary loop function.\n\ntag @s add slowcast\n\nscoreboard players operation @s slowcast.steps = maxSteps temp\nscoreboard players operation @s slowcast.duration = duration temp\n\nfunction :temp_tick\n\nThe projectile is all set up and the loop function is called. The loop function is the part of this whole system that\nkeeps everything running as long as there are active slowcast projectiles.\n\nexecute as @e[type=marker,tag=slowcast,scores={slowcast.duration=1..}] at @s run function :duration\n\nexecute if entity @n[type=marker,tag=slowcast] run schedule function :temp_tick 1t\n\nNow the actual slowcast logic which handles the movement, travel distance, and hit detection.\n\nIn the looping function the duration function is called, let's make this one first. This function is responsible for the\nslowcasts travel distance and calling the step function for the actual movement.\n\ndecrease the duration score\nstores the projectile step count in a temporary scoreboard\ncalls the step function 0.2 blocks further in the facing direction\nkill the projectile should it have a distance score of below 1 at the end of the function\n\nscoreboard players remove @s slowcast.duration 1\n\nscoreboard players operation steps temp = @s slowcast.steps\nexecute positioned ^ ^ ^.1 run function :step\n\nexecute unless score @s slowcastDuration matches 1.. run kill\n\nIn the called step function we handle the teleportation between the current and target position and check if the\nprojectile has hit something on its way there.\n\ndecrement the step score in the temporary scoreboard _(we still need the step score stored in the projectile for the\nnext time we call the step function)_\nmake some particles for the visuals (you could replace the particle command with another function call that does more\ncomplex stuff)\nexecute a command as every entity (excluding entities with the slowcast tag and players) whose hit box intersects\nwith both virtual volumes run the hit\nfunction and kill the projectile.\ntp the projectile to the current position _(until now it only executed the command at this position but is still 0.1\nblock further back)_\nexecute this function again one 0.1 block step forward should the temporary step counter still be over 1\n(recursion)\n\nscoreboard players remove steps temp 1\n\nparticle flame   ~ .1 .1 .1 0 1\n\nexecute as @e[type=!player,type=!marker,dx=0] positioned -.99 -.99 -.99 if entity @s[dx=0] positioned .99 .99 .99 unless function :hit run kill @n[tag=slowcast]\n\ntp   ~\n\nexecute if score slowcastSteps temp matches 1.. positioned ^ ^ ^.1 run function :step\n\nThe hit function called in the hit detection does whatever you want it to do when hitting an entity. It could spawn an\nexplosion, apply an effect, or simply deal some damage. \n:::tip\nWhen you make the hit function have a successful return\nvalue, it will not kill the projectile in the step function. You could use this to make a piercing projectile for\nexample.\n:::","url":"/guide/technical/slowcasts/","tags":[]},{"title":"Debugging your Datapacks","content":"Debugging your datapacks\n\nThere will come times when your datapack won't work, and you will have to figure out what exactly doesn't work in it.\nDon't worry if this happens to you, if you're like any of the rest of us, this will happen often. Code will almost never\nwork the first time you try it. An error in your code is referred to as a bug. Removing these bugs is called debugging.\nThis guide will teach you the best methods for debugging datapacks.\n\nWhat are bugs?\n\nBugs are a fancy programmer term for an error in your code. There are two main types of bugs:\n\nSyntax error**: This is a bug in the actual written code. This is caused by the code you write being incorrectly\nwritten so that the computer literally can't read it. For example, writing executr as @a would be a syntax error\nbecause executr isn't a command.\nLogic error**: This is a bug where the written code is correctly written, but the code doesn't do what you want it\nto. This is caused by a mistake in the code logic. In the simplest example, if you want to give a player 32 diamonds,\nbut you accidentally wrote 322.\n\nFinding and debugging syntax errors\n\nSyntax errors are pretty easy to spot and fix, due to Minecraft's output logs, which literally tell you if your code is\nincorrect. When you're coding datapacks, its a good idea to always have the logs open if you need to double check it.\nYou can open the logs by opening the default Minecraft launcher and clicking \"Settings\", and then enabling \"Open output\nlog when Minecraft: Java Edition starts\", then just starting the game.\n\nA guide on how to open the Minecraft launchers output logs\n\nSyntax errors will show up in red text when you /reload your datapack. But sometimes other errors can also show in\nyellow text instead.\n\nLets take this image as an example: Output log with an error. Here, the\nerror tells you exactly where the error is - in this case it's in the function \"be:give\" at line 1 after \".... give @s\".\nAnd indeed I did spell \"loot\" as \"lot\", which caused the error.\nCode with a syntax error\n\nFinding logic errors\n\nLogic errors are more difficult to find because there's nothing actually incorrect with the code you wrote, it just does\nsomething other than what you want it to do.\n\nAn easy way to find where a logic error is in the code is to make use of the say or tellraw command. These commands\nwill send any message to the chat, making it easy for you to know when and if your code actually runs **as you\nexpect it to**. You can easily put a say Function ran correctly command in your function - If the\nfunction runs, then it will send a message to the chat. It will also send the **name of the entity that ran the\nfunction** to the chat, so you can see if your function is executed by the correct entity.\n\nSimilarly, you can use the tellraw command for more advanced debugging. The tellraw command also has the capability to\nshow you the value of scoreboards and NBT values, so you can check what data your code is using. For instance, if you\nwant to check the value of a scoreboard, you could use the following command:\n\ntellraw @a {\"score\":{\"name\":\"@s\",\"objective\":\"some_scoreboard_objective\"}}\n\nBased on the output of these commands in chat, you can use this to tell where your code goes wrong. (Just make sure to\nremove them after you've found the error, otherwise it can get annoying).\n\nYou may want to keep the debug messages in the datapack, but you don't want it to be sent to every player. Fortunately\nfor us, with the tellraw command, you can specify to who the message will be sent. This means you could only send the\ndebug messages to those who have the tag debug:\n\ntellraw @a[tag=debug] {\"text\":\"Debug message sent only to people with the debug tag!\"}\n\nDebugging logic errors\n\nUnfortunately, debugging logic errors in your code isn't as easy as fixing one spelling mistake. But yet there are still\ntechniques that we can use.\n\nOne way to solve logic errors is to recreate the error in a separate project. When you remove all the other context of\nthe pack, you can focus just on the bit which doesn't work. You can just copy out the code you want to fix into a\nseparate datapack, then fix it there. Once you've identified and fixed the problem, you'll know how to fix it in the\nreal project.\n\nSummary\n\nThe first main method for debugging datapacks is using Minecraft's output logs, we've already learnt how to use those in\nthe first part of this guide. The second method is using the in-game commands, like /say and /tellraw to print\ninformation in real-time about how your datapack works. But those are not the only ones, you can use the\n/scoreboard objectives setdisplay  command to show the values of a scoreboard on your screen in real-time,\nor you can use /data get ..., which will print the value of any NBT data in chat.\n\nA scoreboard on screen\n\nYou might also find that some other methods that suit you the best, for example you might find the\nData Reload mod useful for displaying errors in chat, or a completely different\nmethod, that is up to you.","url":"/guide/technical/debugging/","tags":[]},{"title":"Player ID System","content":"Give each player a unique ID\n\nCreate a scoreboard in a load function that runs on /reload\n\nnamespace:load\nscoreboard objectives add playerid dummy\n\nCreate a function to assign a unique id to the player\n\nnamespace:assign_id\nscoreboard players add .global playerid 1\nscoreboard players operation @s playerid = .global playerid\n\nCreate a tick advancement to assign an id to a player when they first join\n\n{\n\"criteria\": { \"requirement\": { \"trigger\": \"minecraft:tick\" } },\n\"rewards\": { \"function\": \"namespace:assign_id\" }\n}\n\nCheck if an entity has the same ID as the player\n\nCreate a predicate that compares the id\n\n{ \"condition\": \"minecraft:entity_scores\", \"entity\": \"this\", \"scores\": {\n\"playerid\": {\n\"min\": { \"type\": \"minecraft:score\", \"target\": { \"type\": \"minecraft:fixed\", \"name\": \"#this\" }, \"score\": \"playerid\" },\n\"max\": { \"type\": \"minecraft:score\", \"target\": { \"type\": \"minecraft:fixed\", \"name\": \"#this\" }, \"score\": \"playerid\" }\n}}\n}\n\nTo use it in a function, you can do that following\n\nscoreboard players operation #this playerid = @s playerid\nsay @e[predicate=namespace:match_id] HAVE THE SAME PLAYERID\n`","url":"/guide/technical/player-id-system/","tags":[]},{"title":"Generating Random Numbers","content":"Generating Random Numbers using Datapacks!\n\nGenerating a random number is very useful in programming for a variety of reasons, so lets learn how to do it with a\ndatapack! The method you will need to use will vary based on your datapack's Minecraft version.\n\n1.20.2+\n\nBecause of the /random added in 1.20.2, it is much simpler to generate random numbers. It now only requires a single\ncommand:\n\nexecute store result . . . run random value 1..10\n\nIn the command you can change the values 1 and 10 to change the range. If you leave it as it is, it generates a random\nnumber between 1-10 and stores it in your preferred way (can be a scoreboard, storage,...).\n\n1.20.1 and below\n\nLets begin by creating a new file in data/ /loot_tables/. We will call it rng.json, with that done, lets\nput this inside:\n\n{\n\"pools\": [\n{\n\"rolls\": {\n\"min\": 1,\n\"max\": 10\n},\n\"entries\": [\n{\n\"type\": \"minecraft:item\",\n\"name\": \"minecraft:stone\",\n\"functions\": [\n{\n\"function\": \"minecraft:set_count\",\n\"count\": 0\n}\n]\n}\n]\n}\n]\n}\n\nYou can change the values 1 and 10 to change the range. If you leave it as it is, it generates a random number between\n1-10.\n\nSee it in action!\n\nTo use this, you will just have to store the result of summoning this loot table. So you can just do this:\n\nexecute store result . . . run loot spawn   ~ loot :rng\n\nThis will store the random number in wherever you specified (Can be a scoreboard, storage, ...).","url":"/guide/technical/random-numbers/","tags":[]},{"title":"Raycasts","content":"Raycasting\n\nRaycasting is when we shoot a line from the player's eyes in the direction they are looking. We use this to get what the\nplayer is looking at and do something to it, such as spawning an explosion.\n\n:::info\nThis tutorial uses a neat thing called a recursive function. A recursive function is a function that\nruns itself over and over again.\n:::\n\nRaycast to an entity\n\nThis method will show you how to find what entity that a player is looking at. This is useful for many reasons - if you\nwanted to make a gun datapack, you'd need to damage the entity that a player is looking at in order to damage them.\n\nTo do this, you have to run a recursive function which will start at the eyes of the player and keep running itself\n0.1 blocks forward until it hits an entity. When it does hit an entity, you can easily get the entity and do\nsomething to it.\n\nFirstly, we'll make the function which, when you run it, will start the raycast. In this function, we'll want to:\n\nset the maximum distance for the raycast, so it won't go on forever if it never hits an entity.\nrun the function at the eyes of the player\n\nTo set a maximum distance, we store the maximum amount of times we want the function to run in a scoreboard. Every time\nthe recursive function runs, we want to subtract one from that scoreboard, and only continue if the score is more\nthan 0.\n\nFirst, you need to create a scoreboard in your load function.\n\nscoreboard objectives add temp dummy\n\nThen, we can use this scoreboard to set the limit of the raycast before we run it _(In this case we set it to 1000 which\nis 100 blocks. 1000 steps \\* 0.1 blocks/step = 100 blocks)_.\n\nWe also tag the entity executing the raycast so we can exclude it later for hit detection.\n\nCall The raycasts function one step further in the facing direction.\n\nRemove the tag at the end of the function so it does not interfere with other raycasts that might be executed within the\nsame tick.\n\ntag @s add raycaster\n\nscoreboard players set raycastLimit temp 1000\n\nexecute at @s anchored eyes positioned ^ ^ ^.1 run function :raycast\n\ntag @s remove raycaster\n\nIn the raycast function, we want to check if the function has hit an entity, and if not, run it again until it does, hit\na wall, or reaches the raycasts limit, moving a bit forward each time.\n\nWe first decrement the limit value by 1.\n\nThen we make the path of the raycast visible by summoning a few particles. Instead of summoning particles, it could also\nrun another function for more complex behavior.\n\nThe next step is a bit more complex. We execute a command as every entity that is not the caster and whose hit box\nintersects with the two differently offset\nvirtual volumes. Near the end you see\nunless function :hit this will run the function as the hit entity and, because all functions without a\nreturn command return false and we check for unless, this condition resolves to true and will return with the number\n0, ending the raycast. Should no entity be in both volumes and the function doesn't get run, the return command at the\nend won't be reached and the raycast will continue.\n\nThe last command checks if the raycast hit a wall. If it does, the raycast will end. If it doesn't, it will then check\nif the limit is reached, again ending if it is. Should the limit not be reached yet, it will move 0.1 blocks forward and\ncall the raycast function again (recursion).\n\nscoreboard players remove raycastlimit temp 1\n\nparticle minecraft:flame\n\nexecute positioned -.99 -.99 -.99 as @e[dx=0,tag=!raycaster] positioned .99 .99 .99 as @s[dx=0] unless function :hit run return 0\n\nexecute if block   ~ #minecraft:replaceable if score raycastLimit temp matches 1.. positioned ^ ^ ^0.1 run function :raycast\n`","url":"/guide/technical/raycasts/","tags":[]},{"title":"Right Click Detection Summary","content":"Right Click Detection Summary\n\nIf you already know which right click detection technique you are going to use, you can get more information about them on their dedicated pages:\n\nUsing a Carrot on a stick/WFOAS\nUsing a Food Component\nUsing an Eye of Ender\nClicking an Interaction Entity\n\nPros and Cons of each method\n\n| Method             | Pros                                | Cons                                                                                | Difficulty to make | X clicks/second                                         | Player/Location                 |\n| ------------------ | ----------------------------------- | ----------------------------------------------------------------------------------- | ------------------ | ------------------------------------------------------- | ------------------------------- | ----------------------------- |\n| COAS/WFOAS         |                                     | Attracks pigs/striders when held, requires a command that runs every tick           | Easy               | Detects up to 5 clicks/second when holding right click  | Bound to player, not location   |\n| Food Component     | Can detect clicks from any item,    | Only works 1.20.5+, slows player down when holding right click                      | Medium             | Detects up to 20 clicks/second when holding right click | Bound to player, not location   | Bound to player, not location |\n| Eye Of Ender       |                                     | Slows player down when holding right click, only works in worlds without stronghold | Medium             | Detects up to 20 clicks/second when holding right click | Bound to player, not location   |\n| Interaction Entity | Also detects left clicks, an entity | Players can't break/hit/place through, requires an entity                           | Medium             | detects up to 5 clicks/second when holding right click  | Bound to location, not a player |\n\nAdditional Info\n\nCOAS/WFOAS - This method works by using an item.used scoreboard objective which triggers when using either of the two items and then running commands as/at players with a score of 1 or higher.\nFood Component - This method works by using an item with a very long eating time which will never finish, in combination with an advancement to detect when you begin eating it.\nEye Of Ender - This method works by using an advancement to detect whenever a player uses an eye of ender and then executing code as/at them.\nInteraction Entity - This method works by using an advancement to check whether a player interacted with an interaction entity and then executing code.","url":"/guide/right-click/","tags":[]},{"title":"Using an Eye of Ender for RC detection","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nPros and cons\nPros:\nDoesn't require additional entities\nDoesn't need to run every tick\nDoesn't attract mobs\n\nCons:\nOnly works in worlds without strongholds\nSlows player down when holding right click\n\nOther:\nDetects up to 20 clicks/second when holding right click\nBound to the player, not a specific location\n\nUsing an Eye of Ender for Right Click Detection\n\n:::warning\nThis only works in world without strongholds, if you don't want that, you can either use a similiar method that works everywhere (using the Food Component method) or do some chnages to these functions, as specified at the end of this guide.\n:::\n\nThis is just a guide, so you'll need to change a few things for your actual datapack:\nChange   to your namespace\nChange   to whatever custom data you want\n\nUsing an Eye of Ender is a very similiar method to using the Food Component, with the difference that this can only be used in worlds without strongholds. With that out of the way, the first file we will need to create will be an advancement. Located in data/ /advancement/, we will need to create a .json file, we are going to call it used_eye_of_ender.json for the rest of he guide.\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:using_item\",\n\"conditions\": {\n\"item\": {\n\"items\": [\n\"minecraft:ender_eye\"\n],\n\"predicates\": {\n\"minecraft:custom_data\": {\"\": true}\n}\n}\n}\n},\n\"rewards\": {\n\"function\": \":rightclick_run\"\n}\n}\n\nNow that we have the advancement, we can detect if the player is holding right click and call our function, that is located in data/ /function/. You will have to call this function the same name as you did in the advancement, for us that is rightclick_run.mcfunction.\n\nRevoke the advancement from the player so it can be used again\nadvancement revoke @s only :used_eye_of_ender\nAnnounce the use of the item in chat, feel free to replace this with whatever\nyour logic here...\nsay I successfully used EoE detection!\n\nIf you want this method to work in worlds with strongholds, you can either block the target of ender eyes in the pack.mcmeta or killing the eye and giving it back after it being used.","url":"/guide/right-click/eoe/","tags":[]},{"title":"Using the Food Component for RC detection","content":"Food Right Click Detection\n\nPros and cons\n\nPros:\n\nCan detect clicks from any item\nWorks in any world\nDoesn't require additional entities\nDoesn't need to run every tick\nDoesn't attract mobs\n\nCons:\n\nOnly works in 1.20.5+\nSlows player down when holding right click\n\nOther:\n\nDetects up to 20 clicks/second when holding right click\nBound to the player, not a specific location\n\nUsage\n\nUsing the food component for right-click detection is one of the most flexible methods, simply because you can put it\non (almost) ANY item. This method is not limited to a single item, like using a coas. You can use any item you want.\n\nThis is just a guide, so you'll need to change a few things for your actual datapack:\n\nChange   to the item you want to detect\nChange   to your namespace\nChange   to whatever custom data you want\n\n:::warning\nYou can use any item for the method, but if the item already has an existing right-click functionality (like\nplacing a block), it will keep that.\n:::\n\nThe first step will be creating the advancement that detects when a player is \"using\" (in this case eating) the item,\nthe name can be whatever you want ending in json, but for the purpose of this tutorial we will call it\nclick_food.json. Then put this file into data/ /advancement/\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:using_item\",\n\"conditions\": {\n\"item\": {\n\"items\": [\n\"minecraft:\"\n],\n\"predicates\": {\n\"minecraft:custom_data\": {\"\": true}\n}\n}\n}\n}\n},\n\"rewards\": {\n\"function\": \":rightclick_run\"\n}\n}\n\nAs you can see, the advancement runs a function when it detects a player eating our custom item, so the next step is\ncreating the actual function logic. This is pretty simple, just create a .mcfunction file in\ndata/ /function/. Make sure you call the function the same, as you did in the advancement file, in our case\nrightclick_run.mcfunction\n\nYou can put whatever commands you want into this function, but make sure you revoke the advancement from the player, so\nthe item can be clicked again.\n\nRevoke the advancement from the player so it can be used again\nadvancement revoke @s only :click_food\nAnnounce the use of the item in chat, feel free to replace this with whatever\nyour logic here...\nsay I successfully used food component detection!\n\nSee it in action!\n\nAfter /reloading the datapack, we will now need to give ourselves the actual item with the custom food component. (You\ncan run this in the chat to test it, or put it in a function to trigger when you want):\n\ngive @s stick[minecraft:food={nutrition:0, saturation:0, can_always_eat:true, eat_seconds:999999999}, minecraft:custom_data={ :true}]\n\nHow it works\n\nWe've added a food component to our custom stick item, allowing it to be consumed like food. The player won't actually\neat it, since eat_seconds is set to 999999999, so it would take them over 30 years. The food component lets the\nplayer try to eat it, which can be detected using an advancement. That advancement runs a function which removes the\nadvancement so it can be triggered again next tick, and runs whatever code you want to the item to trigger.","url":"/guide/right-click/food_component/","tags":[]},{"title":"Using an Interaction Entity for RC detection","content":"Interaction Right Click Detection\n\nPros and cons\n\nPros:\n\nCan also detect left clicks\nWorks in any world\nDoesn't need to run every tick\nDoesn't attract mob\n\nCons:\n\nOnly works in 1.19.4+\nSlows player down when holding right click\nRequires an additional entity\nCan't be interacted through (e.g. can't build,attack,... through it)\n\nOther:\n\nDetects up to 5 clicks/second when holding right click\nBound to a specific location, not player\n\nUsage\n\nFirstly we will need to create an advancement, located in data/ /advancement/. You can call it however you\nwant, but for the purpose of this guide we will call it interacted_with_interaction.json. This advancement is used to\ndetect when a player clicks on an interaction entity.\n\n:::tip\nIf you don't want to detect a click on every interaction, you can detect it on only some by checking their NBT\ndata, and using Tags to differentiate them.\n:::\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:player_interacted_with_entity\",\n\"conditions\": {\n\"entity\": {\n\"type\": \"minecraft:interaction\"\n}\n}\n}\n},\n\"rewards\": {\n\"function\": \":rightclick_run\"\n}\n}\n\nThen just create a simple function in data/ /function/, and call it the same as you did in the advancement,\nfor us that would be rightclick_run.mcfunction\n\nRevoke the advancement so we can detect the click again\nadvancement revoke @s only namespace:interacted_with_interaction\nAnnounce that the player clicked on the interaction in chat, feel free to replace this with whatever you want it to do\nyour logic here...\nsay Used interaction\n\nNow you can summon the interaction entity by doing /summon interaction   ~ {width:2f,height:3f}.\n\nThat's it, you should now have working right click detection using an interaction entity.","url":"/guide/right-click/interaction/","tags":[]},{"title":"Using COAS/WFOAS for RC detection","content":"Carrot on a Stick Right Click Detection\n\nUsing a carrot on a stick (or a warped fungus on a stick) is perhaps one of the simplest methods of right-click\ndetection, requiring only a single tick command and a scoreboard. This method works due to the used:carrot_on_a_stick\nstatistic detecting right clicks on any carrot_on_a_stick item.\n\n:::info\nFor the sake of simplicity, we will use a carrot on a stick, shortened to COAS. This method also works with\nwarped fungus on a stick (WFOAS) items.\n:::\n\nCOAS and WFOAS items have a unique property that means that right clicking the item counts as \"using\" an item, and will\ntherefore increase the used:carrot_on_a_stick statistic. We can track changes to this statistic using a scoreboard.\nWhen it goes up, we know that the player has right clicked a COAS, and we can run a command when that happens.\n\nMethod\n\nTo get started, we need to create a scoreboard with the criteria item.used:minecraft.carrot_on_a_stick, so that we can\nlater detect when a player uses the COAS (by right clicking on it).\n\nIf you don't already have it, you'll need to create a load function with a command that creates a new scoreboard\nobjective. You can name the objective whatever you want. We recommend naming it something like .rc_coas. In\nyour load function, put a scoreboard command such as this:\n\nscoreboard objectives add.rc_coas minecraft.used:minecraft.carrot_on_a_stick\n\nThis scoreboard will go up by 1 every time a player right clicks a COAS - when this happens we can execute our\nfunction. Note that this command must run every tick, otherwise it won't be able to detect right clicking. Put this in\nyour tick/loop function:\n\nThis will run the \"rightclick_run\" function as the player who uses the COAS.\nexecute as @a[scores={.rc_coas=1..}] run function :rightclick_run\nscoreboard players reset @a[scores={.rc_coas=1..}].rc_coas\n\nIn the rightclick_run.mcfunction file, you can do whatever you like as a result of right clicking the COAS. As an\nexample, putting this in rightclick_run.mcfunction will make the player say Used COAS when they right click a COAS\nitem.\n\nsay Used COAS\n\n:::note\nAdd another subheading for detecting clicks on a specific item with NBT, explaining how to check the currently\nheld item.\n:::","url":"/guide/right-click/coas/","tags":[]},{"title":"Getting Started","content":"Getting Started\n\nIf you're new to datapacks, you're at the right place. Looking around, getting into datapack creation might seem\nconfusing, but once you've grasped the basics, you'll be off to a good start!\n\n:::info\nIf you don't know what datapacks are, then take this explanation. Datapacks are essentially add-ons to Minecraft\nwhich can change the game, whether by adding a simple game mechanic, or creating completely new experiences! The best\npart is that they're really easy to create, even if you have little coding knowledge\n:::\n\nThis guide will help you to create your first datapack, whether you've never tried coding before or if you've got loads\nof experience. The process of coding a datapack is a bit different to other typical programs. By the end of this\ntutorial, you'll have made a simple datapack which makes arrows explode when they land!\n\nSetting up an empty datapack\n\nThe first step when creating a datapack is to make a new world to test it in. Go ahead and do that now - make sure\nthat your world has cheats enabled and it is set to creative mode. Once you've created the world, the next step\nis to find and open your world folder:\n\nSave and quit your world\nGo to your world in the Singleplayer menu and hit \"Edit\"\nPress \"Open World Folder\"\n\nThe folder that opens contains all the data in your Minecraft world. You should see that there's lots of other subfolders in\nthis folder. Find the one which is called datapacks, and open it. This folder is where the world's datapacks are stored. \nCreate a folder - this will be the root folder of your datapack project. The name doesn't matter. \nI'm just going to call it Example Datapack. Open this new folder. Inside this folder is where all the data starts from.\n\n:::tip\nBefore we go further, if you have downloaded and installed Visual Studio Code and the relevant extensions, then\nyou should be able to right click inside the new folder that you created and \"Open in Code\". If not, then no worries, it\nisn't required.\n:::\n\nThe first file we want to create is the pack.mcmeta file. This file will tell Minecraft that the folder is a datapack,\nas well as holding the basic information of the pack. Create pack.mcmeta, and put this inside it:\n\n{\n\"pack\": {\n\"description\": \"DATAPACK NAME HERE\",\n\"pack_format\": 48\n}\n}\n\nIf you're interested, here's what this file means:\n\npack is an object containing the metadata of the file.\ndescription is the name of your datapack, usually along with a short description of what your pack does.\npack_format tells Minecraft what versions this datapack works in. 48 is the latest for 1.21\n\nWriting your first function\n\n:::info\nWhat are functions? In short, functions are the majority of what makes up most datapacks. A function is a file\ncontaining Minecraft commands. When a function is ran, every command in the function is ran in order. Functions are\nalways ran as an entity (or as the Server) and at a position\n:::\n\nLet's get started by writing one simple function. In\ntraditional programming fashion, let's make a function to show you \"Hello World\" when it is ran.\n\nCreate a folder in your datapack called data.\nIn the data folder, create a new folder. This folder is your namespace - it will contain all the data specific\nto your datapack. Usually this needs to have a unique name (one which other people would not have picked), but\nfor this tutorial just call it example.\nIn the example folder, create a folder called function. This folder will contain all the mcfunction files.\n\nYou should now have a folder structure that looks something like this:\n\n/world/datapacks/Example Datapack/data/example/function\n\n:::warning\nIn versions earlier than 1.21, the function folder should be called functions, due to some pesky name changes\nMojang introduced in a recent update.\n:::\n\nOnce you're sure that's correct, you can start writing the actual function.\n\nIn the function folder, create an empty file called hello_world.mcfunction. Open this file with any text editor (we\nrecommend Visual Studio Code)\n\nInside hello_world.mcfunction, put the following:\n\nShow the player Hello World on their screen\ntitle @s title \"Hello World!\"\n\nGive the player a diamond\ngive @s diamond\n\nIt's that simple! Once you save that file, rejoin your world and then run /reload, you should be able to use\nthe following command to run the function:\n\n/function example:hello_world\n\nWhat's next?\n\nNow you know how to create a basic function and run it, we'll next start to think about how to create our project. For\nmore advanced projects, this can sometimes be the most difficult part. Luckily for us, what we want to create won't be\ntoo difficult.\n\nLet's break down the idea into smaller steps. Remember, we want to create a datapack which makes arrows explode.\n\nDetect when an arrow lands on the ground. We can do this by running a command on a loop which will select any\narrow on the ground and then run a function.\nCreate an explosion. This is as simple as summoning a TNT at the position of the arrow.\nRemove the arrow. If you don't do this, then it will keep on exploding forever.\n\nThe next steps of this guide will guide you through the typical process of each of those steps.\n\nRunning functions on a loop\n\nThe first step on our list is to detect arrows which land on the ground. To do this, we need to run a command on a loop.\nLuckily, Minecraft makes this pretty easy for us.\n\nFirstly, let's make the function which you want to run on a loop. In the function folder, create a new mcfunction\nfile - call this one loop.mcfunction.\n\nFor now, let's just make it say \"Hi\" every time it loops. You can do this by putting this in the new function:\n\nsay Hi\n\nTo make this function run on a loop, we need to create a JSON file which tells Minecraft \"run this command every tick\"\n(every tick = 20 times per second)\n\nIn the data folder, create the minecraft folder.\nIn the minecraft folder, create a tags folder\nIn the tags folder, create a function folder\nIn the new function folder, create a new file: tick.json\n\ntick.json is NOT a function. In tick.json, we are going to put a list of functions which we want to run\nevery tick. If you put any commands in tick.json, it will break your pack.\n\nIn tick.json, put the following:\n\n{\n\"values\": [\"example:loop\"]\n}\n\nvalues is a list of function references which will be run on a loop.\nexample:loop is a reference to the loop.mcfunction file we created earlier. example refers to the namespace (the\nfolder in data), and loop refers to the mcfunction file name.\n\nIf you save this file, go back to your world, and run /reload, you should see that the chat is being spammed with \"Hi\"\nover and over again!\n\nSelecting the arrows\n\nNow we've created a function which will run infinitely on a loop, we can move on to detecting when an arrow is in the\nground.\n\nAs far as the game is concerned, an arrow is an entity, just like a pig, cow or zombie. Minecraft gives us a special\nway to select any types of entities with target selectors. Once we've selected an\nentity, we can use the /execute command to run a command as the entity.\n\nWe can use these to select all arrows which are in the ground, and then run a command to make them explode (and then\nremove themselves).\n\nAs mentioned, to select an entity, we need to use a target selectors. I'm going to teach you a bit about target\nselectors. You should pay attention here, but if you only want the code, scroll past this section.\n\nWhat are target selectors?\n\nTarget selectors are a special bit of code we can use to find an entity in the world. They all start with an @ symbol.\nThere are 6 base target selectors:\n\n| Target Selector | Description                                                                                                                                                                |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| @e            | All Entities - By itself, this selector will select every single entity which is currently loaded in the world                                                         |\n| @s            | This Entity - This selector will select the entity which is currently running the command. For example, if I run a command as @s, then it will run the commands as me. |\n| @a            | All Players - This selects all currently online players. (All players are always loaded in the world).                                                                 |\n| @r            | Random Player - This selects one random player.                                                                                                                        |\n| @p            | Nearest Player - This selects the nearest player to the position this command is ran from.                                                                             |\n| @n            | Nearest Entity - This selects the nearest entity (player or non-player) to the position this command is ran from.                                                      |\n\nOn it's own, a base target selector (like in the table) does not do much. We can narrow down the selection even more by\nusing criteria. Criteria are put in square brackets after the base selector.\n\nFor example, we can use @e with a type criteria to select all entities of a certain type - for example,\n@e[type=minecraft:cow] would select all cow entities.\n\nI'm not going to explain every single criteria you can use - you can view a list\nhere. These are the basic ones which you might see quite often:\n\n| Criteria                 | Description                                                                                                                                                                                                                                                      |\n| ------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [type=minecraft:arrow] | Entity Type - This criteria will narrow down the selection to only include entities of a certain type. For good pack optimisation, you should use this often.                                                                                                |\n| [distance=..5]         | Distance to entity - This criteria will only include entities based on their distance to their distance to the current position. .. can be used to represent a greater/less than symbol - for example, ..5 means less than 5 blocks away.                |\n| [limit=2]              | Limit selection - Using the limit criteria, you can make specify a max amount of entities to be selected. This is often used in conjunction with the sort criteria. For example, @e[sort=nearest,limit=1] would select the nearest entity of any type. |\n| [nbt={key:value}]      | Entity Data - This criteria will select entities if their NBT (entity data) matches a pattern.                                                                                                                                                               |\n\nHow are we going to use them?\n\nWe can use these selectors to only select arrows which are in the ground. We can select all arrows with\n@e[type=arrow], but this will also include arrows in the air. To select arrows in the ground, we can check if they\nhave the data {inGround:1b}, so we would use @e[type=arrow,nbt={inGround:1b}]\n\nThis target selector can be used in an execute command to run a command as the entity. Try putting this in your\nloop.mcfunction:\n\nexecute as @e[type=arrow,nbt={inGround:1b}] at @s run say I'm an arrow, I'm in the ground!\n\nReload your datapack and fire an arrow at at a block. You should see that your chat is spammed with messages, meaning\nthat we successfully selected arrows in the ground, and executed a command as them!\n\nMake it go boom\n\nNow we can move onto the fun part! We have a simple command which will run another command as any arrow in the ground.\nWe only need to do two things with this command:\n\nSpawn an explosion at the position of the arrow\nKill the arrow so that it only explodes once\n\nTo create an explosion in Minecraft, we can simply summon a TNT entity. When a TNT entity is summoned, it will explode\ninstantly.\n\nexecute as @e[type=arrow,nbt={inGround:1b}] at @s run summon tnt\n\nThen, we just need to copy this command and make it kill the arrow after the explosion has happened. This is as simple\nas it sounds - we can use /kill to remove the arrow. Your finished loop.mcfunction should look like this:\n\nexecute as @e[type=arrow,nbt={inGround:1b}] at @s run summon tnt\nkill @e[type=arrow,nbt={inGround:1b}]\n\n:::info\nIn reality, this method isn't the best one to use. Instead of having two commands for this, you can just execute\na function as the arrow which will summon the TNT at @s's position, and then kill @s. By only using the @e selector once\nand then referring to @s, you remove extra stress from the computer. For now, it doesn't matter - this guide is designed\nto give you a better idea of the logic rather than the little details.\n:::\n\nYou're done! Once you /reload your pack, you should be free to play around with a simple exploding arrows datapack\nwhich you made with the help of this tutorial. Take a break to play around with it - you deserve one!\n\nAnd when you want to move on to other datapack ideas you might have, feel free to join our Discord server for extra\nsupport from our team of helpers. We're more than happy to help you on your journey to creating awesome Minecraft\ndatapacks!","url":"/guide/getting-started/","tags":["guide","beginner"]},{"title":"Recipes for your Custom Items","content":"Creating Custom Items\nIn this guide, we will go over the basics explaining how custom items work, as well as how to make your own using item components. This guide will not go over how to give your custom items a texture or model.\n\nSince 1.21, it has been easy to create custom items in Minecraft. 1.21 introduced item components, which are like tags you can put on items to change their appearance or functionality. This is the basis for how custom items work - we take an item which already exists, then add or remove item components from that item to give it the desired feel and functionality.\n\nIn this guide we will create a custom edible item which can mine sand instantly and makes the player glow who eats it.\n\nHow do custom items work?\nCustom items are items with a unique set of item components to change their appearance and functionality. As of 1.21, we cannot create fully custom items - instead, we need to take an item which exists, and add, remove, or edit their item components to customise it. \n\nItem components cannot cover every desired functionality. An example of this is doing something when the item is right clicked. We still have to use workarounds for this, such as giving the item a food component to make it edible, then detecting when a player starts eating it. You can read more about this in our right click detection guide.\n\nCreating our custom item\nWe are going to create a custom item with the following properties:\nIt can mine sand very quickly\nIt is edible, and players who eat it will start glowing\nIt will be called Sandy McDesertface\n\nWe will use item components to give the item those properties. Item components are put after the item in our item's give command. For example:\n/give @s flint[minecraft:item_name=\"Sharp Rock\"]\nThese are all the item components which we are going to use.\n\n| Property | Component needed | Our component |\n| - | - | - |\n| Mines sand very quickly | minecraft:tool is used to make items mine different blocks quickly | [tool={default_mining_speed:1.5,damage_per_block:0,rules:[{blocks:\"minecraft:sand\",speed:100}]}] |\n| Is edible, makes the player glow | minecraft:food makes items edible. We can also use it to specify an effect for the player to recieve. | [food={nutrition:3,saturation:1,can_always_eat:true,effects:[{id:\"minecraft:glowing\",duration:100}]}] |\n| Is called Sandy McDesertface | minecraft:item_name overrides our item name. | [item_name=\"Sandy McDesertface\"] |\n\nCombining all of these together, we can create a give command for our custom item:\n/give @s minecraft:stick[tool={default_mining_speed:1.5,damage_per_block:0,rules:[{blocks:\"minecraft:sand\",speed:100}]},food={nutrition:3,saturation:1,can_always_eat:true,effects:[{id:\"minecraft:glowing\",duration:100}]},item_name=\"Sandy McDesertface\"]\n:::info\nminecraft:stick can be any item you want. All custom items need to be based on an existing item. We do not yet have the functionality to create our own item IDs. However, we can make use of the custom_model_data (or custom_model in recent snapshots) component to change the model or texture of the item.\n:::","url":"/guide/adding-new-features/custom-items/intro/","tags":["beginner","guide","custom_items","item_components"]},{"title":"Recipes for your Custom Items","content":"Creating Recipes for your Custom Items\n\nThere are two ways to add recipes to your custom items, they differentiate based on what Minecraft version you are\ndeveloping for. The first one is for the Minecraft version 1.20.5+ (Datapack format 34+), here items can be directly\nspecified in the output with item components. The second method is for all version\nbefore 1.20.5.\n\nAfter 1.20.5\n\nThis is the easier method of the two, only requiring you to put the item id and components into the recipe output.\n\n:::info\nNote that there is currently no way to specify item components in the recipe's input items, only in the result.\nMeaning your custom item can't (easily) be crafted out of different custom items.\n:::\n\nThe instructions here will be very simple, requiring you to only create one file, that being the actual crafting recipe\nfile. This file can be named whatever, but has to end in the .json file format.\n\nHere is an example of a recipe with the output of a custom item:\n\n{\n\"type\": \"minecraft:crafting_shaped\",\n\"pattern\": [\n\"ttt\",\n\" s \",\n\" s \"\n],\n\"key\": {\n\"t\": {\n\"item\": \"minecraft:turtle_scute\"\n},\n\"s\": {\n\"item\": \"minecraft:stick\"\n}\n},\n\"result\": {\n\"id\": \"minecraft:iron_pickaxe\",\n\"count\": 1,\n\"components\": {\n\"minecraft:tool\": {\n\"rules\": [\n{\n\"blocks\": \"minecraft:turtle_egg\",\n\"speed\": 6,\n\"correct_for_drops\": true\n}\n],\n\"default_mining_speed\": 3,\n\"damage_per_block\": 1\n},\n\"minecraft:item_name\": \"\\\"{\\\\\\\"text\\\\\\\":\\\\\\\"sCUTE-axe\\\\\\\"}\\\"\"\n}\n}\n}\n\nIn the example, you can see that the result has a \"components\" field, where you can list the components that your\ncustom item should have. I can also recommend a useful site for generating recipes with specified components:\nhttps://misode.github.io/recipe/\n\nBefore 1.20.5\n\n**This part of the guide assumes that you already knowledge some basic commands and how crafting recipes and\nadvancements work.**\n\nTo create a crafting recipe for one of your custom items, you need just a little bit more than for a normal recipe. This\nis because of the fact that you couldn't use NBT in recipes before 1.20.5 dropped, so that's why we need a small\nworkaround.\n\nLets create the recipe first:\n\n{\n\"type\": \"minecraft:crafting_shaped\",\n\"pattern\": [\n\"ttt\",\n\" s \",\n\" s \"\n],\n\"key\": {\n\"t\": {\n\"item\": \"minecraft:turtle_scute\"\n},\n\"s\": {\n\"item\": \"minecraft:stick\"\n}\n},\n\"result\": {\n\"item\": \"minecraft:knowledge_book\"\n}\n}\n\nAs mentioned before, we can't use the custom item as output, so we use the knowledge book as a placeholder.\n\nTo switch the knowledge book with our custom item, we need an advancement to react when we craft the recipe. For this we\nuse the recipe_crafted trigger. _With some trickery, here it is also possible to make the ingredients require certain\nnbt._\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:recipe_crafted\",\n\"conditions\": {\n\"recipe_id\": \":scuteaxe\"\n}\n}\n},\n\"rewards\": {\n\"function\": \":craft_scuteaxe\"\n}\n}\n\nLastly we have to make the actual function that handles the item switching. You can either use a give command or, what\nI recommend more, define the item in a separate loot table and then use the loot command.\n\nclear @s knowledge_book\nadvancement revoke @s only :craft_scuteaxe\nAny code can go here, this will run when the player crafts the item.\nloot give @s loot :\nYou can also you a give command here instead\n\n:::tip\nIf you want to create more recipes, you can just copy, rename and configure all the files we've just created.\n:::\n\nAnd that's it, you should now have a custom working recipe for your item.","url":"/guide/adding-new-features/custom-items/crafting/","tags":[]},{"title":"Adding Jukebox Songs","content":"How to add custom jukebox songs\n\nIn this guide, we will not only learn how to create custom jukebox songs, but also how to give yourself a custom music\ndisc item and implement custom sounds!\n\nThis will only work in 1.21+, as custom enchantments were added in the snapshot 24w21a. \n:::info \nThis guide requires you\nto have at least a small understanding of datapacks, if you don't understand this guide, you can read the Getting Started\nguide. \n:::\n\nSetting up the datapack\n\nTo start you will need a basic datapack, if you don't know how to make one, see the\nGetting Started guide.\n\nFirstly, we are going to create the actual jukebox song file in the directory data/ /jukebox_song/.\nThe file can be named whatever, but it has to be in the .json file format. For the purposes of this tutorial, we're\ngonna call it example_jukebox_song.json. Inside, we will put and configure this:\n\n{\n\"comparator_output\": 13,\n\"description\": {\n\"text\": \"ARTIST - SONG NAME\"\n},\n\"length_in_seconds\": 69.0,\n\"sound_event\": {\n\"sound_id\": \":\"\n}\n}\n\nThis is a run-down of the fields in that file:\n\ncomparator_output: A value between 1 and 15, representing the redstone output when a comparator is placed next to\nthe jukebox playing this song.\ndescription: The description of the enchantment (should be a JSON text component).\nlength_in_seconds: The length of the song (in seconds)\nsound_event: The ID of the sound (from the resource pack) to play.\n\nIf you don't understand what to put in sound_event, don't worry, the next part is going to focus specifically on this!\n\nAdding custom music - Resource Pack\n\nThis part is going to be optional in the case, that you only want a vanilla Minecraft sound to play from the jukebox. In\nthat case, change the sound_id in the example_jukebox_song.json file from the datapack to the sounds ID. (for\nexample: \"sound_id\": \"minecraft:music_disc.cat\").\n\nIf you don't want to use a default Minecraft sound, then a resource pack is required to add the custom sound (in this\ncase, the music on the disc) to Minecraft, so that the datapack can read it.\n\n:::info\nMinecraft handles sound in .ogg files. There are many different converters you can use to convert an MP3, WAV,\nor other audio file to .ogg.\n:::\n\nYou need to add your .ogg file (the audio of your music disc) to assets/ /sounds/.ogg. Make sure\nthat   and   are the same values you put in the datapack's JSON file (the\nexample_jukebox_song.json file in our case).\n\nThen, if you haven't already, you need to create a sounds.json file at the position assets/ /sounds.json.\nThis file tells Minecraft what audio files map to what IDs. Put this inside:\n\n{\n\"music_disc.\": {\n\"sounds\": [\n{\n\"name\": \":\",\n\"stream\": true\n}\n]\n}\n}\n\nSee it in action\n\nOnce you save the above files, you need to activate the resource pack, and reload it with the keybind F3 + T\nin-game. You will also need to leave and rejoin the world to update the datapack.\n\n:::warning\nFor this to work, you will need to leave and rejoin the world, just using the /reload command won't do the\ntrick here!\n:::\n\nTo get the music disc, you need to get an item which has the minecraft:jukebox_playable component. This can be any\nitem - it doesn't have to necessarily be an already existing music disc (but you can if you want)\n\ngive @s minecraft:YOUR_ITEM[minecraft:jukebox_playable={song:\":example_jukebox_song\"}]\n\nThen, you can use this item on a jukebox, and it should start playing your song!","url":"/guide/adding-new-features/jukebox-songs/","tags":[]},{"title":"Installing a Datapack","content":"Introduction\n\nSo you've found a nice datapack for Minecraft, and the next step is to get it into your game. This guide will explain\nhow to install a datapack onto a world which exists, a new world.\n\nInstalling a datapack to an existing world\n\nIn your world menu, find the world which you want to install the datapack on. Click Edit.\nThe singleplayer menu\nOpen the world folder. The edit menu\nIn the world folder, open the datapacks folder.\nWorld folder with datapacks highlighted\nPut the datapack zip file into the folder.\nzip folder in datapacks folder\nIf the zip folder contains a folder which contains data and pack.mcmeta, then put that folder in the datapacks\nfolder instead of the full zip. Putting the zip in the datapacks folder only works when data and\npack.mcmeta are directly in the root folder of the zip.\nRejoin the world and run /reload. Reload command in chat\n\nInstalling a datapack to an new world\n\nGo to the Create New World screen. Make sure that you enable cheats.\nCreate new world screen\nNavigate to the Data Packs screen. This is under the \"More\" tab in the latest versions.\nThe Data Packs screen option\nDrag and drop the datapack zip into this screen.\nThe Data Packs screen after I dragged and dropped something in\nIf it doesn't show up, then it's likely that the zip file contains a folder which contains the datapack, and not\nthe zip file just containing the datapack. You need to take the folder out of the datapack, and put it in the\ndatapacks folder (click the \"Open Packs Folder\" button to open it.)\nClick on the datapack icon to apply it to the world\nThe Data Packs screen after I clicked the icon\nCreate the world, and then run /reload in chat.\nReload command in chat\n\nInstalling a datapack to a realm\n\nTo install a datapack to a realm, you need to basically do this:\n\nDownload the world from the realm into your singleplayer worlds.\nFollow the steps in \"Installing a datapack to an existing world\" to install a datapack on that world\nUpload that world to your realm.","url":"/guide/installing-a-datapack/","tags":[]},{"title":"Choosing a Server","content":"Choosing a Server\n\nWhen you join a Minecraft server, you are playing on a computer running a special software. This software allows you to\ninteract with other players on the server and play the game. There are so many different choices when it comes to\nchoosing Minecraft server JARs that it can easily become overwhelming.\n\nIn this guide, we focus on multiple aspects of the various servers, from performance, to datapack support to even\nfeatures that are exclusive to certain server softwares.\n\nBackground Information\n\nBefore we dive into the different server JARs, we need to talk about the different types of Minecraft servers.\nThroughout this guide, we will be using the term \"server JAR\" to refer to the actual Minecraft server file. These JARs\nare Java executable files that run the Minecraft server.\n\nThere are a few common types of Minecraft servers:\n\nVanilla**: The vanilla server is the most basic server software, it's just the vanilla game.\nBukkit-based**: Bukkit is a plugin-based server software that is used by most Minecraft servers. It is the most\npopular of the server softwares as it provides a wide range of plugins and features.\nModded**: Modded servers are based on the Fabric or Forge, which are mod-based server softwares. They are more\ncustomizable than Bukkit-based servers, but are not as popular. The use of modded servers is still very limited,\nmaking it hard to find a mod for some purposes.\nSponge-based**: Sponge is a plugin-based server software that is used by many Minecraft servers. It is similar to\nBukkit-based servers, but is more customizable and has support for mods with SpongeForge.\n\nVanilla\n\nThe vanilla server is the most basic server software, and is the one that you get when you download the jar file from\nthe official website. It does not come with mod or plugin support.\nBeyond datapacks, it is not customizable at all.\n\n| Pros                                            | Cons                    |\n| ----------------------------------------------- | ----------------------- |\n| Easy to set up                                  | No mod support          |\n| Fastest to update (comes out with every update) | Mediocre performance    |\n| Designed with exclusively datapacks in mind     | Limited customizations  |\n| No additional bug fixes                         | No additional bug fixes |\n\n:::info\nFor some, a lack of bug fixes can be both positive and negative. Mileage may vary!\n:::\n\n:::info\nEven if it says bad performance, many servers in this list are still quite fast. For small servers on decent\nhardware, it doesn't really matter what you choose\n:::\n\nSpigot\n\nSpigot is another popular server software, it comes with some basic performance\noptimizations, and is not as customizable as Paper. It can cause some issues with datapacks but mitigating\ndatapack-related bugs is significantly easier when compared to Paper. If you want plugins and datapacks, this is likely\nthe one you want.\n\n| Pros                                       | Cons                                                |\n| ------------------------------------------ | --------------------------------------------------- |\n| Popular and well-supported                 | Bad datapack support by default                     |\n| Comes with basic performance optimizations | A bit older, May be lacking APIs other servers have |\n| Datapack bugs are less common              | Not as customizable as other server softwares       |\n\nPaper\n\nPaper is a fork of Spigot, and it's the most popular Bukkit server JAR according to\nbStats. It is one of the most customizable server software on this list and comes\nwith excellent plugin support and amazing performance optimizations. Unfortunately, it is notorious for breaking\ndatapacks and even some plugins for the sake of performance, modernity and bug fixes.\n\n| Pros                                                         | Cons                                                                  |\n| ------------------------------------------------------------ | --------------------------------------------------------------------- |\n| Popular and well-supported                                   | Breaks many datapacks due to destructive performance optimizations    |\n| Numerous performance optimizations                           | Only designed for plugins                                             |\n| Modern and forward-looking                                   | Can take a while to update due to relying on Spigot as a base         |\n| Comes with extensive documentation and configuration options | Some useful bugs are fixed by default (TNT duping, sand duping, etc.) |\n\nForge\n\nForge is a mod-based server software used primarily by older Minecraft servers. Forge is\nthe gold standard for mods for versions >1.13 while still offering support for latest versions. Many mod packs such as\nRLCraft, Pixelmon, ATM (All The Mods) will only run on Forge.\n\n| Pros                                  | Cons                                                    |\n| ------------------------------------- | ------------------------------------------------------- |\n| Great for older Minecraft versions    | By choosing older versions, you miss out on DP features |\n| Large mod catalog spanning many years | Different mod loaders are recommended nowadays          |\n| Many mods do not affect DP features   |                                                         |\n\n:::note\nIt's recommended to use NeoForge on the latest version when possible. This will offer the bestest\nof Datapack features and the most modern mods\n:::\n\n:::warning\nBy choosing an older Minecraft version you will lose out on a lot of cool datapack features.\n:::\n\nNeoForge\n\nNeoForge is a mod-based server software used by many Minecraft servers. It is a fork of Forge\ndesigned to be cleaner and more modern, with significant reworks to many bloated parts of Forge. It is designed to be\nused with new versions of Minecraft and many mods that did target the latest version of Forge will now target NeoForge\nor both!\n\n| Pros                                | Cons                                                       |\n| ----------------------------------- | ---------------------------------------------------------- |\n| Great for newer Minecraft versions  | Finding mods in general is hard                            |\n| Great modding community             | Different mod loaders may provide a larger catalog of mods |\n| Many mods do not affect DP features |                                                            |\n\nFabric\n\nFabric is another mod-based server software. Fabric is used by most modern modded servers due\nto its fast boot time, flawless injection and great mods. Fabric is likely the best modded server for use with datapacks\ndue to how cleanly code is injected.\n\n| Pros                               | Cons                                            |\n| ---------------------------------- | ----------------------------------------------- |\n| Popular and well-supported         | Finding server-side mods are hard               |\n| Mods rarely affect datapacks       | Hard to troubleshoot                            |\n| Great for newer Minecraft versions | Support for older Minecraft versions is limited |\n\n:::tip\nYou may see people talk about Cardboard. It's a mod that can add the Paper API to your Fabric server, but the\nactual functionality is very limited and its slow to update.\n\nWe do not recommend you use it! Instead, try find native Fabric alternatives!\n:::\n\nSpongeVanilla\n\nSpongeVanilla is the vanilla version of Sponge. It is an\nalternative to Bukkit-based server jars with incredible extensibility. It is very rarely used due to the lack of\nmods/plugins supporting it.\n\n| Pros                               | Cons                                                 |\n| ---------------------------------- | ---------------------------------------------------- |\n| High quality plugins are common    | Support for newer Minecraft versions is experimental |\n| Generally fast                     | Server support is hard to find                       |\n| Great for older Minecraft versions | Finding Sponge mods are hard                         |\n\nSpongeForge\n\nSpongeForge is a version of Sponge with support for Forge mods.\nSimilarly to SpongeVanilla, it is very rarely used due to the lack of mods supporting it.\n\n| Pros                               | Cons                                                                             |\n| ---------------------------------- | -------------------------------------------------------------------------------- |\n| Support for plugins and mods       | Support for newer Minecraft versions is experimental                             |\n| Plugins are well integrated        | Generally not as popular as Bukkit-based servers                                 |\n| Great for older Minecraft versions | Finding Sponge mods are hard, support for Forge mods is pinned at lower versions |\n\nHonorable Mentions\n\nMinestom\n\nMinestom is a very high performance, lightweight server jar designed for extreme customizability at the expense of doing\neverything yourself.\n\n:::warning\nThis server jar is basically an empty shell and is only recommended for highly technical purposes. You need\nto program everything you want into this server yourself, including features you may expect to come with the jar\n(lighting). You have been warned!\n:::\n\n| Pros                                                | Cons                                           |\n| --------------------------------------------------- | ---------------------------------------------- |\n| Extremely high performance                          | Almost everything must be manually implemented |\n| Uber customizable, anything you dream is possible!  | HIGHLY TECHNICAL! Expect many errors with DIY  |\n| Absolutely no obfuscation, the protocol is readable | An understanding of networking may be required |\n\nProxies (BungeeCord, Velocity, Waterfall, etc.)\n\nThese \"servers\" are different from the rest, as they themselves are not servers, but rather\nproxies.\n\nMost Minecraft servers can't handle more than a hundred-or-so people at once, so how do giant servers like Hypixel have\ntens of thousands of people on at one time? Imagine a large server with many mini games. Every time you teleport to a\ngame, a proxy is sending you to a completely different server, usually dedicated to running just that game. Larger\nservers can have thousands of people online at a time because not everyone is in one server, they are split between tens\nor hundreds of servers. Simply put, the proxy is like glue, sticking servers together and allowing people to \"teleport\"\nbetween them.","url":"/guide/choosing-a-server/","tags":[]},{"title":"Page Formatting","content":"Page Formatting\n\nLast Updated: 12-13-2024\n\nThis section goes over how we format wiki pages. We like to be consistent, so please read through this section carefully\nand use these features to your advantage:\n\nBasic Writing Guidelines\n\nWhen writing for the wiki, write in a way that is easy to understand and easy for beginners to understand. Put\nyourself in the viewer's shoes. What confused you when you first learned about the topic? What new terms did you learn?\nAvoid using technical terms without explaining them or point to a resource that explains them.\n\nDocumentation and tutorials are a great way to learn, but sometimes you don't need to read every part of a page to\nunderstand it. When writing for the wiki, write in a way that makes it easy to scan and understand quickly. Some\nrecommendations are using white space to your advantage to break your page into easily digestible chunks.\n\nWhen learning a concept, it is helpful to have concrete examples that people can refer to instead of\njust using a concept. This will help wiki-goers understand the concept better and make it easier to remember.\n\nWriting Style\n\nThe datapacking community is a diverse group of people with different backgrounds; many people don't speak English as\ntheir first language!\n\nWhen writing, try to follow these guidelines:\n\nUse the active voice. For example, instead of The player can use the command, write Players can use the command.\nDon't use unnecessary adverbs or adjectives\nDon't use the words: obvious, simple, basic, easy, actual, just, clear, and however\nExplicitly reference what you are explaining\nUse 's for indicating possession\nUse the Oxford comma\n\nTechnical information\n\nAll content on the website (except a few small exceptions) are made using a technology called mdsvex. This technology\nenables people like you to insert Markdown with svelte components.\n\nIt is recommended to know what the proper way to format Markdown is in order to stay consistent and prevent confusion.\n\nThe front matter title is the same as the title in the sidebar and the title on the page (heading 1 or single\n#)\nUse bold and italics sparingly and only when emphasis is needed\nUse headings to break up the page into sections\nCode blocks are used to show code snippets or commands\nAdmonitions are used to show important information unrelated to the content of the page\nTables are used to show large amounts of data\n\n:::warning\nMany markdown formatters do not work well with admonitions. We recommend manually formatting whenever\npossible. Break up lines to make it easier to read in the source and on the page.\n\nKeep lines under 100 characters.\n:::\n\nEach page is made of 3 parts:\n\nfront matter (metadata about the page such as title, description, tags, versions, etc.)\ncontent (the actual content of the page)\ncomponents (custom components that allow for interactivity or other features not able to be reproduced with markdown)\n\nEach is crucial to making the page look and feel how it does.\n\nThere is also a component called Version which is used to display the Minecraft version\nthe page is validated and up to date with.\n\n\n\nThis component should be used at the top of all pages, specifying that the page is validated and up to date with the latest Minecraft version.\n\nFrontmatter\n\nWe try to keep the front matter as minimal as possible, but it is still required. Without it, the page\nwill not display correctly on search engines or other sites. The front matter for this page looks like\nthis:\n\ntitle: \"Site Development\"\ndescription: \"This page is meant to be an introduction to formatting a page for the wiki. In it is multiple examples which you can examine raw in the site source code.\"\n\nFront matter is denoted with triple hyphens (---) at the top of the page and the end of the front matter.\nThe title should be the same as the title in the sidebar in order to reduce confusion. The description should be a short\nsummary of the content of the page in order to show people what all is covered in the article.\n\nCustom Elements\n\nOur markdown system adds unlimited customizability to the way we format our pages. As of the time of writing, we have the following features:\n\nAdmonitions\nCode Titles\nMCFunction Formatting (Thanks Snave!)\nHighlighting\n\nAdmonitions are a way to warnings, info or tips, or other important information to your page.\n\n:::info\nThis is an example of an info box.\n:::\n\n:::info\nThis is an example of an info box.\n:::\n\nCode blocks are a way to format code in your page. These code blocks come with the option to add a title to the code\nblock for clarity. The Datapack Wiki supports syntax highlighting for MCFunction which are used for code samples\nwhenever possible.\n\nfunction example() {\nconsole.log(\"Hello World!\");\n}\n\nHighlighting is a way to highlight specific text. It isn't commonly used, but exists.\n\nHighlighted Text like this.\n\nStandardized Elements\n\nThe wiki uses a few elements that are standardized across the entire wiki. Right now this only consists\nof command syntax. You can find the command syntax we use in the commands page.","url":"/contribute/formatting/","tags":[]},{"title":"Git Practices","content":"Git Practices\n\nLast Updated: 12-13-2024\n\nThis page is an introduction to how we use Git in the wiki repository. In order to keep the wiki consistent and\nreputable, we have a few rules that we follow.\n\nGit provides a lot of features that are great for collaboration, and we try to use them as much as possible.\n\nBranching and PRs\n\nBranches are a great way to work on the wiki without introducing unfinished pages, changes, etc. Branches allow you to\nwork on a page without affecting the main (production) branch and allow us to review your changes before they are\nmerged.\n\nBranch Naming\n\nWe use kebab-case for branch names meaning the branch name should be all lowercase with hyphens to\nseparate words. For example, if you are working on a page called \"Adding New Features\", the branch name should be\nadding-new-features.\n\nBranch Workflow\n\nWhen you are ready to merge your changes into the main branch, create a pull request (PR) and assign it to a\nreviewer. The reviewer will review your changes and either approve or request changes. Once approved, the changes will\nbe merged into the main branch.\n\nWe recommend deleting the branch after it has been merged into the main branch. This will keep the repository clean and\nreduce confusion. An exception to this is if you are working on a very large feature that will take a while to merge, or\nif you plan to merge multiple features from one branch.\n\nForking\n\nForking is another way to work on the wiki without affecting the main branch. This is useful if you are a first-time\ncontributor and don't have write access. You can click the \"Fork\" button in the top right corner of the repository to\ncreate a fork of the repository. This will create a copy of the repository that you can work on.\n\nOnce you have forked the repository, you can clone it to your local machine.\n\nWhen it comes time to merge your changes, you can create a pull request in the same way as you would with a branch, just\nreplace the branch name with the name of your fork's branch name.\n\nCommit Messages\n\nCommit messages are a great way to keep track of what changes have been made to the wiki. Summarize the changes in the\ncommit message and use the imperative mood.\n\nFor example, if you are adding a new page called \"Adding New Features\", the commit message should be\nAdd new page for adding new features. If you are fixing a typo on a page, the commit message could be\nFix typo in page about adding new features.\n\nOptionally, you can add a short description of the changes in the commit message. This is not required, but it is\nrecommended.\n\nMerging\n\nWhenever you start working on a new branch or features, pull the latest changes from the main branch. This\nwill ensure that you have the most up-to-date changes.\n\nYou will likely run into an issue with the search.json file, which is used to generate the search index. This file is\ngenerated automatically and should not be manually edited. A solution to this is to remove the search.json file and\nrun the search index generation script. This will regenerate the file and you can commit it.\n\nnode run ./gen_search_indexes_node.js\n\nOR\n\nbun ./gen_search_indexes.js\n\nOther Important Information\n\nAlways use the main branch as the base branch for your PRs. This will reduce the chances of conflicts and ensure\nthat your changes are merged correctly.\nMake a description of your changes in your PR.\nReviewers: Proofread changes before approving them.\nReviewers: It's not required, but it's recommended the changes follow American English for consistency sake.","url":"/contribute/git-practices/","tags":[]},{"title":"Resources","content":"Resources\n\nListed here are links to credible and reliable places and libraries to aid in command/datapack support and creation.\n\nCommunities\n\nDiscord Datapack Hub Discord\n\nWebsite Smithed\n\nDiscord Smithed Discord\n\nDiscord ShaderLABS\nDiscord Blockbench Discord\nDiscord Optifine Discord\nDiscord FabricMC Discord\nDiscord Minecraft Discord\nDiscord Animated Java Discord\nDiscord Datapack Jam Discord\nDiscord Dataworld Discord [FRENCH\nONLY]\n\nGenerators\n\nWebsite Misode Data Pack Generator\nWebsite TheDestruc7i0n Recipe\nGenerator\nWebsite Minecraft Tools\nWebsite Minecraft JSON (JSON\ntext/tellraw)\n\nWebsite MCStacker Website\n\nTemplates/Reference\n\nWebsite Minecraft Wiki\nWebsite Misode's MCMeta\n\nTutorials/Content Creation\n\nWebsite Cloud Wolf\nWebsite\nStructure Generation Guide\nWebsite\nWorld Generation Guide\n\nLibraries\n\nLibrary TagLib\nLibrary Smithed (Libraries)","url":"/resources/","tags":[]},{"title":"Credits","content":"Credits\n\nThe Datapack Wiki is managed by Datapack Hub, based on an original design and idea by\nAandeel. All of the content on this wiki is made possible thanks to the dedication of our\nawesome contributors! You can contribute to this wiki on our GitHub - click the Edit button on any page.\n\nAdministrators\n\nThese people run and develop the site, making any and all important decisions.\n\nSilabear\nCobblestone\nAandeel\n\nEditors\n\nThese people are in charge of what contributions are added to the site, as well as planning and writing new pages.\n\nGears\n\nContributors\n\nThese people have written or edited pages for the wiki or guides.\n\nDiamond\nHeDeAn\n\n:::note\nIf you're contributing, feel free to add your username to this page! You can contribute by clicking the Edit\nbutton on any page.\n:::","url":"/credits/","tags":[]}]
