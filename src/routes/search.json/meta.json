[
  {
    "title": "MissingNo.",
    "content": "\n\tError: {$page.status} | Datapack Hub\nError {$page.status}: {$page.error.message}\nThere was an error when loading this page. Maybe it doesn't exist?\n\nIf you think this is an error, please report it in our discord.",
    "tags": [],
    "versions": "latest",
    "url": "/./+"
  },
  {
    "title": "Home",
    "content": "\nHeading 1\nParagraph text under heading 1\n\nHeading 2\nParagraph text under heading 2\n\nHeading 3\nParagraph text under heading 3\n\n\nI have some code for you. Here's some more:\n\n{\n    \"this.is\":\"cool!\"\n}\n\nI am a very important piece of information. Please dont ignore me. I'm only smol.\n\nThe stuff in this box is probably very important.\n\nYou can do this really cool thing. It'll make your life a lot better!\n\nThe latest pack format is",
    "tags": [],
    "versions": "latest",
    "url": "/./"
  },
  {
    "title": "Resources",
    "content": "Resources\n\nListed here are links to credible and reliable places to aid in command support and creation.\n\nMinecraft Commands\n\n\n&gt; Discord https://discord.gg/QAFXFtZ\n&gt;\n&gt; Reddit https://www.reddit.com/r/MinecraftCommands/\n\nMCStacker\n\n&gt; Website https://mcstacker.net/\n&gt;\n&gt; Discord https://discord.gg/WCb6GNf/\n\nData Pack Generators\n\n&gt; Website https://misode.github.io/\n\n",
    "tags": [],
    "versions": "latest",
    "url": "/./resources/"
  },
  {
    "title": "Getting Started",
    "content": "\nThis page is validated and up to date with Minecraft Java: 1.20.4\n\nGetting Started\nIf you're new to datapacks, you're at the right place. Looking around, getting into datapack creation might seem confusing, but once you've grasped the basics, you'll be off to a good start.\n\nThis Getting Started Page explains step-by-step, how to set up the file structure for a datapack, prominently for the use of .mcfunction files.\n\nWhat is a Datapack?\n\nIn hindsight a Datapack is a collection of .json files, and .mcfunction files, that provides a way to further customise the Minecraft Experience.\nDatapacks can be used to override or add new:\n  Advancements\n  Dimensions\n  Functions\n  Loot Tables\n  Predicates\n  Item Modifiers\n  Recipies\n  Structures\n  Tags\n  Damage Types\n  World Generation Settings\n  Biomes\n\nWhat will you need to make a Datapack?\n\nA reliable text-editor, we recommend: Visual Studio Code with the Data-Pack Helper Plus (Extention) in conjunction with the language-mcfunction (Extension). [These extensions will aid in command syntax when making .mcfunction files].\n\nHow to set up the base of the Datapack:\n\nTo start, in the selected world save folder of your choice, go to the world's datapack folder located here: .minecraft/saves/(world)/datapacks\nIn this directory, create a new folder. You can name this anything you want.\n\nThe pack.mcmeta file:\n\nEnter the folder, and create a new file with the name and extention: pack.mcmeta, this is what Minecraft Reads to identify the file as a datapack.\nInside the pack.mcmeta file you'll need to paste these lines of code:\n{\n\t\"pack\": {\n\t\t\"pack_format\": 26,\n\t\t\"description\": \"(Fill this with your datapack's description.)\"\n\t}\n}\n\nPlease note that the pack_format number can change depending on future Minecraft Updates. 26 is the current major release datapack format number for 1.20.4.\n\nSave the pack.mcmeta file and in the same directory, create a new file named: data.\nInside the new data folder create 2 new folders. One named: minecraft and another named whater you wish. The name you choose for this folder will impact the way you execute functions in future. So keep it short and simple. examples: main or map. This is the folder where we'll be adding all of the .mcfunction files. (In these docs, foo will be used as the example.)\n\nTick and Load .json files:\n\nThe tick.json file allocates a select file in our yet to be created functions folder to be the designated .mcfunction file that runs every tick (A bit like a repeating command block.)\nThe load.json file allocates a select file in out yet to be created functions folder to be the designated .mcfunction file that runs every time the datapack is reloaded in-game with /reload.\n\nInside the new minecraft folder create another folder named tags, and inside that another folder named functions, in this we'll be allocating our load and tick json files.\n\nCreate a new file called load.json, and inside paste this code:\n{\n\t\"values\": [\n\t\t\"foo:load\"\n\t]\n}\n&gt; Replace the foo with the name of the folder you chose that effects your functions. (Provided examples were main or map)\n\n\nAnd in the same folder create another new file called tick.json, and inside pase this code:\n{\n\t\"values\": [\n\t\t\"foo:tick\"\n\t]\n}\n&gt; Replace the foo with the name of the folder you chose that effects your functions. (Provided examples were main or map)\n\nWorking with .mcfunction files:\n\nBack to the data folder, go into the folder you named for your functions, and create a folder within named: functions\nThis functions folder is where all of your .mcfunction files will be held. Create a new file and name it tick.mcfunction and another named load.mcfunction These are the two files we setup the allocation for prior.\n\nFinal File Structure:\n\n.minecraft/saves/(world)/datapacks\n    └(your-datapack-name)\n      ├pack.mcmeta\n      └(data)\n        ├(minecraft)\n        |  └(tags)\n        |    └(functions)\n        |      ├load.json\n        |      └tick.json\n        └(foo)\n           └(functions)\n             ├load.mcfunction\n             └tick.mcfunction\n\nTo test that the datapack works, in the load.mcfunction file, type say hello new datapack. Save it and in-game, type the command /reload, If everything is setup correctly, the Say command should execute.\n\nPlease note, that .mcfunction files do NOT use the / prefix for commands. Adding a / will cause the datapack to not load, until it is removed from all commands that contain the prefix.\n",
    "tags": [],
    "versions": "latest",
    "url": "/./getting-started/"
  },
  {
    "title": "Commands",
    "content": "\nCommands\nCommands tell the game to do things. Functions are files which are made up of many commands",
    "tags": [],
    "versions": "latest",
    "url": "/./basics/commands/"
  },
  {
    "title": "Target Selectors",
    "content": "\nThis page is validated and up to date with Minecraft Java: 1.20.4\n\nTarget Selectors\nTarget Selectors are used as an argument in commands to select entities and players in the world. We use target selectors to find players or mobs and do things to them.\n\nExample: tellraw @a[distance=..10] \"You're within 10 blocks of me\". The target selector is @a[distance=..10], and tells the game to only send the message to players within 10 blocks.\n\nBase target selectors\nIn Java Edition, there are 5 base target selectors:\n\n@e**: @e selects all entities, no matter what type or where they are.\n@a*: @a selects all players. *This is equivalent to @e[type=player]\n@s**: @s selects the current entity who is running the command or function.\n@p*: @p selects the nearest player to the position of execution. *This is equivalent to @e[type=player,limit=1,sort=nearest]\n@r*: @r selects a random player. *This is equivalent to @e[type=player,limit=1,sort=random]\n\n@e only selects entities in a loaded chunk. If an entity exists but is not currently being loaded, it will not select that entity.\n\nAdditional arguments\nTarget selectors can (and usually are) followed by additional arguments to filter the selection even more to only find the entities that you want. Target selector arguments are contained within square brackets after the base selector (@e[...]) and are written as [:,=,...]\n\nExample: In our previous example (@a[distance=..10]), we use the argument distance=..10 to specify that we only want to target entities which are less than 10 blocks away.\n\nMost target selectors can be inverted by using =! meaning it will only select entities who do not match the argument.\n\ntype argument\nThe type= argument will filter the selection to only include entities of a certain type, or those in an entity_type tag.\n\n` must be a valid entity ID or entity_type tag ID. This argument can only be used with @e or @s`.\n\nExamples:\n@e[type=minecraft:pig]: Selects all pigs\n@e[type=#minecraft:aquatic]: Selects all aquatic animals\n\nname argument\nThe name= argument will filter the selection to only include entities who have a specific name.\n\n`` is a string (it cannot be a JSON text component).\n\nExamples:\n@e[name=Aron]: Selects all entiies named Aron\n@e[name=\"Aron Aronson\"]: Selects entiies named Aron Aaronson\n\ndistance argument\nThe distance= argument will filter the selection to only include entities who are within a distance range.\n\n` can either be a value (such as 7) or a range (such as ..8 or 21..`)\n\nExamples:\n@e[distance=6]: Selects all entities which are exactly 6 blocks away from the execution position.\n@e[distance=..20]: Selects all entiies within 20 blocks of the execution position.\n@e[distance=3..]: Selects all entiies that are more than 3 blocks away from the execution position.\n@e[distance=12..15]: Selects all entiies between 12 and 15 (inclusive) blocks from the execution position.\n\nnbt argument\nThe nbt= argument will filter the selection to only include entities which have or do not have specific NBT data.\n\n`` is an NBT compound. The entity must match everything within the compound.\n\nExamples:\n@a[nbt={SelectedItem:{id:\"minecraft:stone\"}}]: Selects all players who are holding stone\n@e[type=minecraft:arrow,nbt={inGround:1b}]: Selects all arrow entities who are in a block.\n\nsort and limit arguments\nThe sort=,limit= will limit the amount of possible entities it will select and will select entities based on the priority defined in ``.\n\n`` can be one of the following:\narbitrary: does not sort in any guaranteed order\nnearest: sort in increasing order of distance\nfurthest: sort in decreasing order of distance\nrandom: sort randomly (default type for @r)\n\n`` can be any integer.\n\nExamples:\n@e[limit=1,sort=nearest]: Selects the nearest entity to the position of execution\n@e[limit=5,sort=furthest]: Selects the furthest 5 entities from the position of execution.\n@e[limit=7,sort=random,type=minecraft:cow]: Selects 7 random cows..\n\nx/y/z arguments\nThe x/y/z= arguments do not directly change the selection, but are used alongside other arguments to specify a starting position to work from.\n\nThis argument(s) will affect the arguments distance, dx/dy/dz and sort/limit.\n\nExamples:\n@e[x=10,y=9,z=-5,distance=..5]: Selects all entities less than 5 blocks away from the position X=10/Y=9/Z=-5\n\ndx/dy/dz arguments\nThe dx/dy/dz= arguments will select any entities if their hitbox is partially inside a cuboid defined by the `s of dx (width), dy (height), and dz (length). ` can be any number.\n\nThe dx/y/z arguments create a cuboid of width dx, height dy, and length dz, starting from the point of execution OR the coordinates defined by the x/y/z arguments, and will only select entities if their hitbox partially or fully instersects with the cuboid.\n\nIf dx/dy/dz is set to 0, then it will select any entities if their hitbox contains the point of execution OR the coordinates defined by the x/y/z arguments.\n\nExamples:\n@e[x=10,y=13,z=87,dx=10,dy=20,dz=5]: Selects any entities if any part of their hitbox is within the cuboid w=10,h=20,l=5 starting from the position x=10,y=13,z-87\n@e[x=7,y=3,z=9,dx=0,dy=0,dz=0]: Selects any entities if their hitbox contains the point x=7,y=3,z=9\n\ntag argument\nThe tag= argument will select entities which have the specified tag. `` is any tag string (no spaces).\n\nEntities do not naturally have tags - these are separate from entity_type tags such as that used in the type argument. Instead, these select entities based on the tags added with the /tag command or Tags[] NBT.\n\nExamples:\n@a[tag=CustomTag]: Selects all players with the tag CustomTag\n@e[tag=!ignore]: Selects all entities which do not have the ignore tag.\n\nteam argument\nThe team= argument will select entiies which are in a specific team. Since entities can only be in one team at a time, you cannot use team= more than once, however you can duplicate negated team arguments (team=!).\n\n`` is any tag string (no spaces).\n\nExamples:\n@a[team=red]: Selects all players in the red team\n@e[team=Bears]: Selects all entities in the Bears team\n@e[team=!blue]: Selects all entities which are not in the blue team\n\nscores argument\nThe scores={=,...} argument will select entities based on their value on a scoreboard.\n\n` is a scoreboard objective which must exist already. ` can be either an integer or a range.\n\nExamples:\n@e[scores={foo=10}]: Selects all entiies with a score of exactly 10 on the foo scoreboard.\n@e[scores={foo=5,bar=7}]: Selects all entities with a score of exactly 5 on the foo scoreboard and exactly 7 on the bar scoreboard.\n@e[scores={foo=8..}]: Selects all entities with a score of 8 or more on the foo scoreboard.\n\npredicate argument\nThe predicate= argument will select players based on whether they pass a predicate check. `` is a predicate ID.\n\nExamples:\n@e[predicate=namespace:my_predicate]: Selects all entities who pass the predicate in /data/namespace/predicates/my_predicate.- - @e[predicate=!namespace:another_predicate]: Selects all entities who fail the predicate in /data/namespace/predicates/another_predicate.json`\n\ngamemode argument\nThe gamemode=(survival|creative|adventure|spectator) argument will select players who are in a specific game mode.\n\nExamples:\n@a[gamemode=creative]: Selects all players in creative mode\n\nadvancements argument\nThe advancements={=(true/false)} argument will select players based on whether they've unlocked an advancement. `` is an advancement ID.\n\nExamples:\n@a[advancements={minecraft:story/follow_ender_eye=true}]: Selects all players who have unlocked the follow_ender_eye advancement.\n@a[advancements={minecraft:story/follow_ender_eye=false}]: Selects all players who have not unlocked the follow_ender_eye advancement.\n\nadvancements argument\nThe advancements={=(true/false)} argument will select players based on whether they've unlocked an advancement. `` is an advancement ID.\n\nExamples:\n@a[advancements={minecraft:story/follow_ender_eye=true}]: Selects all players who have unlocked the follow_ender_eye advancement.\n@a[advancements={minecraft:story/follow_ender_eye=false}]: Selects all players who have not unlocked the follow_ender_eye advancement.\n\nlevel argument\nThe level= argument selects players based on their current XP level (not amount of points).\n\n`` can be an integer or range.\n\nExamples:\n@a[level=10]: Selects all players who have an XP level of exactly 10.\n@a[level=4..]: Selects all players who have an XP level of 4 or more.\n\nTODO x_rotation and y_rotation",
    "tags": [],
    "versions": "latest",
    "url": "/./basics/target_selectors/"
  },
  {
    "title": "Credits",
    "content": "\nCredits\nThe Datapack Wiki is brought to you by Datapack Hub in collaboration with Aandeel.\n\nDevelopers\nSilabear\nCobblestone\n\nEditorial Team\nAandeel\n\nContributors\nWant to be on this list? Anyone can contribute to our GitHub!\n",
    "tags": [],
    "versions": "latest",
    "url": "/./credits/"
  },
  {
    "title": "/function",
    "content": "\n This page is up to date and validated for the Minecraft version: 1.20.4\n\n/function command\nThis command runs any .mcfunction file when called. You can also pass in a NBT compound or NBT source path if the function is a macro function. All functions are run independently and one after another - for example, if you run function1 and then function2, then function2 will only run once function1 has finished.\n\nSyntax\nfunction :**: Runs the .mcfunction file at data//functions/\nfunction : {key:value}**: Runs the .mcfunction file at data//functions/, and uses the {key:value} if the function is a macro function.\n`function : with (block |entity |storage )",
    "tags": [],
    "versions": "latest",
    "url": "/./command/function/"
  },
  {
    "title": "Functions",
    "content": "\nThis page is validated and up to date with Minecraft Java: 1.20.6\n\nFunctions\nA function is a file containing a list of Minecraft commands.\nFunction files end in .mcfunction, and are located in the data//functions folder.\nFunctions can be called using the function command. (See function for more information)\n\nFunctions can be located in sub-folders within the base functions folder. This changes how they are called. For example, a function located at data//functions/sub_folder/my_func.mcfunction would be called using function :sub_folder/my_func.\n\nWhen a function is run, the commands within it get executed from top to bottom. If the return command is run, the function stops executing immediately and any commands after the return are ignored.\n\nMacros\nMacros allow you to insert values into commands dynamically, based on an NBT value.\n\nAny function can define a macro within it. A macro is a command beginning with $.\nMacros can use a special syntax: $(). This will substitute for any value provided as `` when run.\n\nWhen a macro function is called, it will be passed an NBT compound. It will then look in that compound for the key-names matching each of its arguments. If any are missing, it can't run.\nIf all arguments are present, it substitutes each argument with the SNBT representation of the given value. It then tries to run the commands with those substituted values.\n\nIn this example, we write a function that gives the player a number of diamonds using a macro.\ndata/example/functions/macro.mcfunction\n\nWhen called, $(count) will be replaced with some number, producing a valid command\n$give @s diamond $(count)\n\ndata/example/functions/give.mcfunction\nfunction example:macro {count: 7}\n\nThis also works\ndata modify storage example:storage count set value 12\nfunction example:macro with storage example:storage\n",
    "tags": [],
    "versions": "latest",
    "url": "/./files/functions/"
  },
  {
    "title": "Tags",
    "content": "\nThis page is validated and up to date with Minecraft Java: 1.20.6\n\nTags\nTags, not to be confused with entity tags, are files in a datapack that allow grouping of multiple blocks, items, etc.\nTags are JSON files located in the data//tags/ folder.\n\nSpecial tags\nMinecraft uses some tags internally for certain behaviour. For example, you will already have seen that the minecraft:load function tag controls which functions get run when a datapack is loaded, or the minecraft:minable/pickaxe block tag which controls what blocks are mined faster with a pickaxe.\nModifying these tags allows you to configure how Minecraft behaves in certain cases.\n\nCategories\nTags can be used to group various things of one category. Here is a list of possible categories, along with the subfolder needed to put them in.\nItems (items)\nBlocks (blocks)\nEntities (entity_types)\nFunctions (functions)\nFluids (fluids)\nGame Events (game_events)\nChat Types (chat_type)\nDamage Types (damage_type)\n\nJSON format\nTags have a very simple format, with two fields.\n\nReplace\nReplace (replace) is a boolean field which decides whether the tag should replace other tags with the same path, or merge with them.\nFor example, if \"replace\": true was added to the tick.json function tag, only the tick functions in that datapack would load, as it would replace all other defined tick tags. If replace is false, tags with the same path will be merged.\nreplace is an optional field, and if not specified will default to false.\n\nValues\nValues (values) is a list containing everything to group under this tag. Each element is a string, containing either the id of the entry (like minecraft:diamond_block), or the id of another tag, beginning with a # (E.g. #minecraft:logs).\n\nExample tag\nHere is an example tag, located in data/example/tags/items/wood.json (example is the namespace being used).\n\n#minecraft:logs and #minecraft:planks are two item tags provided by Minecraft.\n\n\n{\n  \"replace\": true,\n  \"values\": [\n    \"#minecraft:logs\",\n    \"#minecraft:planks\",\n    \"minecraft:chest\",\n    \"minecraft:stick\"\n  ]\n}\n",
    "tags": [],
    "versions": "latest",
    "url": "/./files/tags/"
  }
]
