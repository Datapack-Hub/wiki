[{"title":"Home","content":"Welcome to the Datapack Wiki!\r\nThis is a community-built wiki documenting features of Minecraft Datapacks. On this site, you can find all you need to know to start making your own datapacks, as well as resources for more advanced datapackers.\r\nWhat are Datapacks?\r\nDatapacks are similar to mods, but they are vanilla,\r\n\r\nWith datapacks you can:\r\n\r\nAdd and modify custom recipes,\r\nModify existing or create new loot tables,\r\nAdd new advancements and enchantments,\r\nCreate unique structures,\r\nAnd much more!\r\n\r\nReady to learn? Click here to get started.\r\nJoin the community!\r\nHave questions, ideas, or datapack creations you want to share? Join the Datapack Hub Discord server to connect with other datapackers!\r\n\r\n:::info\r\nIf you're contributing, feel free to add your username to this page! You can contribute by clicking the Edit button on any page.\r\n:::","tags":[],"versions":"latest","url":"/"},{"title":"SNBT Format","content":"SNBT Format\r\nSNBT (Stringified Named Binary Tags) format is a JSON-like tree structure used in datapack development to manipulate the NBT data of an entity. SNBT is a human-readable version of NBT (Named Binary Tags), which is a format used by Minecraft to store data. NBT is used to store data about entities, items, blocks, structures, game saves, and more.\r\n\r\nSNBT consists of key/value pairs, which are represented as key:value. These are contained with compounds, marked with curly brackets ({}). Compounds can contain multiple key/value pairs, which are separated with commas, like so: key:value,key:value,key:value\r\n\r\nAn example SNBT structure looks like: {name:\"Silabear\",age:102,friends:[\"Flynecraft\",\"Aandeel\",\"Cobblestone\"],socials:{discord:\"silabear\",twitch:\"silabearr\"}}\r\nData Types\r\nSNBT has a few data types you can use to represent different types of data, including whole numbers, decimal numbers, string, text, booleans, and more.\r\nStrings\r\nStrings can store any text value, or more technically, any sequence of unicode characters.\r\n\r\nFormat: Strings are stored within either double or single quotes. For strings containing standard characters (A-Z, a-z, 0-9, -,_,+,.), the quotes are optional, but recommended. \"\" or ' ' or  \r\n\r\nExample: name:\"Silabear\", name:'Cobblestone', name:Aandeel\r\nShort/Int/Long\r\nShort, Int, and Long data types all represent integers (whole numbers).\nShort** is a signed 16 bit integer, it can be any value from -32,768 to 32,767\r\nInt** is a signed 32 bit integer, it can be any value from -2,147,483,648 to 2,147,483,647\r\nLong** is a signed 64 bit integer, it can be any value from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\r\n\r\nFormat: Strings are stored within either double or single quotes. For strings containing standard characters (A-Z, a-z, 0-9, -,_,+,.), the quotes are optional, but recommended. \"\" or ' ' or  \r\n\r\nExample: name:\"Silabear\", name:'Cobblestone', name:Aandeel","tags":[],"versions":"latest","url":"/wiki\\nbt\\snbt\\"},{"title":"Tags","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nTags\r\nRegistry tags, not to be confused with entity tags, are essentially lists of groups such as blocks, items, entity types, etc. They use JSON format and are located in the data/ /tags/  folder.\r\nSpecial tags\r\nMinecraft uses some tags internally for certain behaviours. These tags are located in the minecraft namespace. For example:\r\nany functions in the #minecraft:load function tag will be automatically run when a datapack is loaded\r\nthe #minecraft:minable/pickaxe block tag lists blocks which are mined faster using a pickaxe.\nIn many cases, modifying these special tags allows you to configure certain aspects of how Minecraft behaves.\r\nRegistries\r\nTags group various types in a specific registry (category).\nThis list shows all of the possible registry types, as well as the path their tags should be put in.\r\nItems (/tags/item)\r\nBlocks (/tags/block)\r\nEntity types (/tags/entity_type)\r\nFunctions (/tags/function)\r\nFluids (/tags/fluid)\r\nGame Events (/tags/game_event)\r\nChat Types (/tags/chat_type)\r\nDamage Types (/tags/damage_type)\r\nBanner patterns (/tags/banner_pattern)\nCat variants (/tags/cat_variant)\r\nEnchantments (/tags/enchantment)\nGoat horns (/tags/instrument)\nPaintings (/tags/painting_variant)\nEntity POI (/tags/point_of_interest_type)\nBiome (/tags/worldgen/biome)\nFlat world preset (/tags/worldgen/flat_level_generator_preset)\nStructures (/tags/worldgen/structure)\nWorld preset (/tags/worldgen/world_preset)\nJSON format\r\nTags have a very simple format, with two fields.\r\nreplace\r\nreplace is a boolean field which decides whether the tag should replace other tags with the same path, or merge with them. For example, if \"replace\": true is added to the tick.json function tag, only the tick functions in that datapack would load, as it would replace all other defined tick tags. If replace is false, it will merge with any values in tick.json within other packs.\r\nreplace is an optional field, and if not specified will default to false.\r\nvalues\r\nValues (values) is an array containing everything to group under this tag. Each element is either a string or an object containing an id field and a required field (object example {\"required\": false, \"id\":\"minecraft:stick\"} ). The plain string and the id field contain either the ID of the entry (such as minecraft:diamond_block), or the ID of another tag, beginning with a # (such as #minecraft:logs). The required field in the object is a boolean (true or false) which defines if this entry can be ignored if the id cannot be found.\r\nExample\r\nHere is an example tag, located in data/ /tags/item/wood.json.\n:::info\r\n#minecraft:logs and #minecraft:planks are two item tags provided by Minecraft.\r\n:::\r\n\r\n`json\r\n{\r\n\"replace\": true,\r\n\"values\": [\r\n\"#minecraft:logs\",\r\n\"#minecraft:planks\",\r\n\"minecraft:chest\",\r\n\"minecraft:stick\"\r\n]\r\n}\r\n`","tags":[],"versions":"latest","url":"/wiki\\files\\tags\\"},{"title":"Functions","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nFunctions\r\nFunctions are files essentially containing a list of Minecraft commands. Function files end in .mcfunction, and are located in the data/ /function folder. Functions can be called (ran) using the function command. (See /function for more information)\r\n\r\nThe function folder can contain sub-folders for organisation. This changes their reference accordingly - for example, a function located at data/ /function/sub_folder/my_func.mcfunction would be called using function :sub_folder/my_func.\r\n\r\nWhen a function is run, the commands within it are executed in order. If the return command is run, the function stops executing immediately and any commands after the return are ignored.\r\n\r\nAny line in a function which starts with a # is a comment, and the game ignores it. Any other line is interpreted as a command\r\nExample\r\nThis function will give every player an apple, then tell them to enjoy the apple.\r\n`\r\nGive a player the apple\r\ngive @a minecraft:apple\r\nTell them to enjoy the apple\r\nsay Enjoy the apple!\r\n`\r\nMacro functions\r\nMacros can dynamically change part of a function by inserting NBT into it. Any function can define a macro within it. A macro is a command beginning with $. Macros can use a special syntax: $(). This will substitute for any value provided as   when run.\r\n\r\nThe /function command can specify a NBT compound to use as the macro values. In traditional programming, this is best represented as someFunction(foo, bar)\r\nExample\r\nIn this example, we write a function that gives the player a number of diamonds using a macro.\r\n`mcfunction\r\ndata/example/function/macro.mcfunction\r\nWhen called, $(count) will be replaced with some number, producing a valid command\r\n$give @s diamond $(count)\r\n`\r\n\r\n`\r\ndata/example/function/give.mcfunction\r\nfunction example:macro {count: 7}\r\nThis also works\r\ndata modify storage example:storage count set value 12\r\nfunction example:macro with storage example:storage\r\n`","tags":[],"versions":"latest","url":"/wiki\\files\\functions\\"},{"title":"Target Selectors","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nTarget Selectors\r\nTarget Selectors are used as an argument in commands to select entities and players in the world. We use target selectors to find players or mobs and do things to them. Many commands need to be given a target selector as an argument, or otherwise require being executed as an entity.\r\n\r\nAll target selectors start with an @ symbol, followed by a base selector (see the table below), and optionally any other criteria which will narrow down the selection further.\r\n\r\nExample: tellraw @a[distance=..10] \"You're within 10 blocks of me\". The target selector is @a[distance=..10], and tells the game to only send the message to players within 10 blocks.\r\nBase target selectors\r\nIn Java Edition, there are 6 base target selectors:\r\n\r\n| Target Selector | Description |\r\n|---|---|\r\n| @e | All Entities - By itself, this selector will select every single entity which is currently loaded in the world |\r\n| @s | This Entity - This selector will select the entity which is currently running the command. For example, if I run a command as @s, then it will run the commands as me. |\r\n| @a | All Players - This selects all currently online players. (All players are always loaded in the world). |\r\n| @r | Random Player - This selects one random player. |\r\n| @p | Nearest Player - This selects the nearest player to the position this command is ran from. |\r\n| @n | Nearest Entity - This selects the nearest entity (player or non-player) to the position this command is ran from. |\r\n\r\n:::warning\r\n@e only selects entities in a loaded chunk. If an entity exists but is not currently being loaded, it will not select that entity.:::\r\nAdditional arguments\r\nTarget selectors can (and usually are) followed by additional arguments to filter the selection even more to only find the entities that you want. Target selector arguments are contained within square brackets after the base selector (@e[...]) and are written as [ :, =,...]\r\n\r\nExample: In our previous example (@a[distance=..10]), we use the argument distance=..10 to specify that we only want to target entities which are less than 10 blocks away.\r\n\r\n:::tip\r\nMost target selectors can be inverted by using =! meaning it will only select entities who do not match the argument. (E.g. @e[type=!minecraft:creeper] will select every entity that is NOT a creeper) :::\r\n\r\n| Argument | Example | Description |\r\n|--|--|--|\r\n| type | @e[type=minecraft:pig] | Filters to only include entities of a certain type or entity_type tag. Valid with @e, @s and @n. type can be any entity ID or entity_type tag. |\r\n| name | @e[name=Aron] | Filters to include entities with a specific name. name is a string - it cannot be JSON text. |\r\n| distance | @e[distance=6] | Filters to include entities within a certain distance or range. .. is used to represent \"greater/less than\" operations - for example, ..6 means less than 6 and, 8.. means more than 8. |\r\n| nbt | @a[nbt={SelectedItem:{id:\"minecraft:stone\"}}] | Filters to include entities with specific NBT data. NBT data will be partially matched - as long as the specified data exists on the entity, it doesn't matter what other data it has. |\r\n| sort and limit| @e[limit=1,sort=nearest] | These two arguments are often used together to find entities based on ordering. For example, limit=5,sort=furthest selects the 5 entities which are furthest away from the current position. |\r\n| x/y/z | @e[x=10,y=9,z=-5,distance=..5] | Specifies a starting position to work from; affecting distance, dx/dy/dz, and sort/limit. If left blank, it defaults to   ~. |\r\n| dx/dy/dz | @e[x=10,y=13,z=87,dx=10,dy=20,dz=5] | Creates a selection area (cuboid) which will only select entities if any of their hitbox is within the area. x/y/z is needed to specify the position of the bottom right corner of the cuboid - if it is left out it defaults to the current position. If all the dxyz values are 0 (or one is set to 0 and no others are set), then it will select any entities if the current position is inside their hitbox.|\r\n| tag | @a[tag=CustomTag] | Selects entities with a specified tag added with the /tag command or Tags[] NBT. No entities have tags by default - tags can only be added by the datapack or by commands. |\r\n| team | @a[team=red] | Selects entities in a specific team. |\r\n| scores | @e[scores={foo=10}] | Selects entities based on their value on a scoreboard. Like distance, you can use .. to specify ranges. |\r\n| predicate | @e[predicate=namespace:my_predicate] | Selects entites based on whether they pass a custom predicate check. |\r\n| gamemode | @a[gamemode=creative] | Selects players in a specific game mode. |\r\n| advancements | @a[advancements={minecraft:story/follow_ender_eye=true}] | Selects players based on whether they have unlocked a specific advancement. |\r\n| level | @a[level=10] | Selects players based on their current XP level (not amount of points). |\r\n\r\nMore information about the arguments:\r\ntype argument\r\nThe type=  argument will filter the selection to only include entities of a certain type, or those in an entity_type tag.\n  must be a valid entity ID or entity_type tag ID. This argument can only be used with @e or @s.\r\n\r\nExamples:\n@e[type=minecraft:pig]: Selects all pigs\r\n@e[type=#minecraft:aquatic]: Selects all aquatic animals\r\nname argument\r\nThe name=  argument will filter the selection to only include entities who have a specific name.\n  is a string (it cannot be a JSON text component).\r\n\r\nExamples:\n@e[name=Aron]: Selects all entities named Aron\r\n@e[name=\"Aron Aronson\"]: Selects entities named Aron Aaronson\r\ndistance argument\r\nThe distance=  argument will filter the selection to only include entities who are within a distance range.\n  can either be a value (such as 7) or a range (such as ..8 or 21..)\r\n\r\nExamples:\n@e[distance=6]: Selects all entities which are exactly 6 blocks away from the execution position.\r\n@e[distance=..20]: Selects all entities within 20 blocks of the execution position.\r\n@e[distance=3..]: Selects all entities that are more than 3 blocks away from the execution position.\r\n@e[distance=12..15]: Selects all entities between 12 and 15 (inclusive) blocks from the execution position.\r\nnbt argument\r\nThe nbt= argument will filter the selection to only include entities which have or do not have specific NBT data.\n`` is an NBT compound. The entity must match everything within the compound.\r\n\r\nExamples:\n@a[nbt={SelectedItem:{id:\"minecraft:stone\"}}]: Selects all players who are holding stone\r\n@e[type=minecraft:arrow,nbt={inGround:1b}]: Selects all arrow entities who are in a block.\r\nsort and limit arguments\r\nThe sort=,limit=  will limit the amount of possible entities it will select and will select entities based on the priority defined in  .\n  can be one of the following:\r\narbitrary: does not sort in any guaranteed order\r\nnearest: sort in increasing order of distance\r\nfurthest: sort in decreasing order of distance\r\nrandom: sort randomly (default type for @r)\r\n\r\n  can be any integer.\r\n\r\nExamples:\n@e[limit=1,sort=nearest]: Selects the nearest entity to the position of execution\r\n@e[limit=5,sort=furthest]: Selects the furthest 5 entities from the position of execution.\r\n@e[limit=7,sort=random,type=minecraft:cow]: Selects 7 random cows..\r\nx/y/z arguments\r\nThe x/y/z=  arguments do not directly change the selection, but are used alongside other arguments to specify a starting position to work from.\nThis argument(s) will affect the arguments distance, dx/dy/dz and sort/limit.\r\n\r\nExamples:\r\n@e[x=10,y=9,z=-5,distance=..5]: Selects all entities less than 5 blocks away from the position X=10/Y=9/Z=-5\r\ndx/dy/dz arguments\r\nThe dx/dy/dz arguments will create a cuboid that is at least 1x1x1 blocks big and each value above 0 will increase the size of the cuboid in that direction by a full block.\r\n\r\nAny entity fully or partially inside the cuboid will be selected.\r\n\r\nYou can mix and match dx, dz, and dz however you want. To create the cuboid at least 1 of the three has to be there.\r\n\r\n:::info\r\nThe generated cuboid does not snap to the block grid:::\r\n:::info\r\nThe base cuboid that gets generated with dx/dz/dz=0 will always stretch from the command origin to positive x/y/z:::\r\n\r\nExamples:\n@e[x=10,y=13,z=87,dx=10,dy=20,dz=5]: Selects any entities if any part of their hitbox is within the cuboid w=10,h=20,l=5 starting from the position x=10,y=13,z-87\r\n@e[x=7,y=3,z=9,dx=0,dy=0,dz=0]: Selects any entities if their hitbox contains the point x=7,y=3,z=9\r\ntag argument\r\nThe tag=  argument will select entities which have the specified tag.   is any tag string (no spaces).\r\n\r\nEntities do not naturally have tags - these are separate from entity_type tags such as that used in the type argument. Instead, these select entities based on the tags added with the /tag command or Tags[] NBT.\r\n\r\nExamples:\r\n@a[tag=CustomTag]: Selects all players with the tag CustomTag\r\n@e[tag=!ignore]: Selects all entities which do not have the ignore tag.\r\nteam argument\r\nThe team=  argument will select entities which are in a specific team. Since entities can only be in one team at a time, you cannot use team= more than once, however you can duplicate negated team arguments (team=!).\r\n\r\n  is any tag string (no spaces).\r\n\r\nExamples:\r\n@a[team=red]: Selects all players in the red team\r\n@e[team=Bears]: Selects all entities in the Bears team\r\n@e[team=!blue]: Selects all entities which are not in the blue team\r\nscores argument\r\nThe scores={ =,...} argument will select entities based on their value on a scoreboard.\r\n\r\n  is a scoreboard objective which must exist already.   can be either an integer or a range.\r\n\r\nExamples:\r\n@e[scores={foo=10}]: Selects all entities with a score of exactly 10 on the foo scoreboard.\r\n@e[scores={foo=5,bar=7}]: Selects all entities with a score of exactly 5 on the foo scoreboard and exactly 7 on the bar scoreboard.\r\n@e[scores={foo=8..}]: Selects all entities with a score of 8 or more on the foo scoreboard.\r\npredicate argument\r\nThe predicate=  argument will select entities based on whether they pass a predicate check.   is a predicate ID.\r\n\r\nExamples:\r\n@e[predicate=namespace:my_predicate]: Selects all entities who pass the predicate in /data/namespace/predicates/my_predicate.- - @e[predicate=!namespace:another_predicate]: Selects all entities who fail the predicate in /data/namespace/predicates/another_predicate.json`\r\ngamemode argument\r\nThe gamemode=(survival|creative|adventure|spectator) argument will select players who are in a specific game mode.\r\n\r\nExamples:\r\n@a[gamemode=creative]: Selects all players in creative mode\r\nadvancements argument\r\nThe advancements={ =(true/false)} argument will select players based on whether they've unlocked an advancement.   is an advancement ID.\r\n\r\nExamples:\r\n@a[advancements={minecraft:story/follow_ender_eye=true}]: Selects all players who have unlocked the follow_ender_eye advancement.\r\n@a[advancements={minecraft:story/follow_ender_eye=false}]: Selects all players who have not unlocked the follow_ender_eye advancement.\r\nadvancements argument\r\nThe advancements={ =(true/false)} argument will select players based on whether they've unlocked an advancement.   is an advancement ID.\r\n\r\nExamples:\r\n@a[advancements={minecraft:story/follow_ender_eye=true}]: Selects all players who have unlocked the follow_ender_eye advancement.\r\n@a[advancements={minecraft:story/follow_ender_eye=false}]: Selects all players who have not unlocked the follow_ender_eye advancement.\r\nlevel argument\r\nThe level=  argument selects players based on their current XP level (not amount of points).\r\n\r\n  can be an integer or range.\r\n\r\nExamples:\r\n@a[level=10]: Selects all players who have an XP level of exactly 10.\r\n@a[level=4..]: Selects all players who have an XP level of 4 or more.\r\nTODO x_rotation and y_rotation","tags":[],"versions":"latest","url":"/wiki\\commands\\target_selectors\\"},{"title":"MissingNo.","content":"","tags":[],"versions":"latest","url":"/wiki\\commands\\namespaces\\"},{"title":"Target Selectors","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nItem Components\r\nItem components are data structures which can be applied to items in Minecraft to give them special attributes, such as a name, lore, being able to be eaten, etc. Each item has specific item components by default - for example, all food items will have the minecraft:food component, which makes the item edible.\r\n\r\nA command such as /give or /item can be used to create an item which has additional item components, or remove item components from any item.","tags":[],"versions":"latest","url":"/wiki\\commands\\item_components\\"},{"title":"Coordinates","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nCoordinates\r\nCoordinates in Minecraft are represented by an x, y, and z value. They are used to represent positions of entities, blocks, particles, sounds and more. In commands, they are represented as simply x y z, where x, y, and z are decimal numbers representing the coordinates on each axis.\r\n\r\nBlock coordinates are locked to the grid and are unique - there can only be one block per set of coordinates. Block coordinates are whole numbers, for example you can have a block at 123 86 94 but not 123.7 86.2 94.6. Entities are not locked to the grid - they can be at decimal positions (and usually are).\r\n\r\nx.0 y.0 z.0 represents the bottom left corner of a block, not the centre. The centre of a block would be represented by the coordinates x.5 y.5 z.5.\r\n\r\n:::info\r\nEvery command and function in Minecraft is always executed at a position. This is usually the world spawn. You can change this using the commands \"execute at\" or \"execute positioned\".:::\r\nExamples\n/setblock 123 86 94 minecraft:pink_concrete:\r\nIn this setblock command, we tell the game to put a pink concrete block at the coordinates 123 86 94.\r\n/tp @s 66.2 98 45.7:\r\nThis command would teleport the current entity to the exact coordinates 66.2 98 45.7\r\nRelative Coordinates\r\nUsing the symbols ~ and ^, we can reference coordinates relative to the current coordinates (for example, you can get the posiiton 7 blocks above the current position).\r\n\r\n represents the current position on any axis. For example, 12  76 would teleport me to x=12 z=76 but keep y as the current position. The coordinates   ~ would represent the position of the command - this is useful to do something at the current position such as placing a block or summoning an entity.\r\n\r\nThe  symbol can be followed by a number to include an offset to the current position. For example,  12  would represent the current postion offsetted by 10 blocks on the y-axis (or in simpler terms: the position 10 blocks above the current position). This can also be a negative number.\r\n\r\nSimilarly ^ represents a relative position, taking into account the current rotation too. The most common use for this is to get a position in front of the direction of rotation. For example, you can use ^ ^ ^5 to get the position 5 blocks in front of the current position in whatever direction the command or entity is rotated.","tags":[],"versions":"latest","url":"/wiki\\commands\\coordinates\\"},{"title":"Commands","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nCommands\r\nCommands are the basic building blocks of most datapacks. Each command is a simple instruction which can tell the game to do something. Most datapacks are made primarily of functions - functions are just lists of commands ran in order.\r\nCommand Syntax\r\nMost commands follow this basic syntax:\r\n`\r\ncommand ...\r\n`\r\ncommand would refer to the name of the command, and ... would be the arguments that come after the command, changing how it runs.\r\n\r\nMinecraft (and this wiki) use these for showing command syntax, to make it easier for you to understand:\r\n\r\nVariable | Meaning\r\n|---------\r\n  | An argument.\r\n[entry] | An optional entry.\r\n[entryA│entryB│entryC] | Pick one of these. This is optional.\r\n(entryA│entryB│entryC) | Pick one of these. This is required\r\n... | Some syntax is left out, you can find more about the command on its dedicated page","tags":[],"versions":"latest","url":"/wiki\\commands\\about\\"},{"title":"/summon","content":"This page is up to date and validated for the Minecraft version: 1.21\n\n/summon command\r\nThe /summon command is used to summon an entity at a position, along with any entity NBT.\r\nSyntax\r\nThe syntax of the /summon command is as follows:\r\n`\r\nsummon [position] [nbt data]\r\n`\r\n : an ID of a minecraft entity. For example: minecraft:cow, marker, zombie. If the namespace (minecraft:) is omitted, it will default to the minecraft namespace.\r\n[position] (optional): the coordinates at which the entity should be spawned. (Defaults to the current position).\r\n[nbt data] (optional): a compound containing the NBT (in SNBT format) which the entity should be spawned with. For example: {NoAI:1b}.\r\nExamples\r\nsummon minecraft:cow - Summons a cow at the current position.\r\nsummon minecraft:ender_dragon  50 ~ - Summons an ender dragon 50 blocks above the current position\r\nsummon minecraft:wither 29 372 121 - Summons a wither at the coordinates x=29, y=372, z=121\r\nsummon minecraft:zombie   ~ {NoAI:1b} - Summons a zombie at the current position with the NoAI NBT, meaning it will not move around or attack players.\r\nAlternatives\r\nThe execute summon  command can also be used to summon an entity. Using this execute subcommand will summon an entity at the current position, and then run the specified command as the newly summoned entity.\r\n\r\nHowever, execute summon cannot provide any NBT to give the entity upon being spawned. You will have to edit the nbt in the command/function which is executed, which can be a bit tedious. An alternative to execute summon minecraft:cow run function custom_function would be the following:\r\n`\r\nsummon minecraft:cow   ~ {Tags:[\"newly_summoned_cow\"]}\r\nexecute as @n[type=cow,tag=newly_summoned_cow] at @s run function custom_function\r\ntag @n[type=cow,tag=newly_summoned_cow] remove newly_summoned_cow\r\n`","tags":[],"versions":"latest","url":"/wiki\\command\\summon\\"},{"title":"/function","content":"This page is up to date and validated for the Minecraft version: 1.21\n\n/function command\r\nThis command runs any .mcfunction file when called. You can also pass in a NBT compound or NBT source path if the function is a macro function. All functions are run independently and one after another - for example, if you run function1 and then function2, then function2 will only run once function1 has finished.\r\nSyntax\r\nfunction : **: Runs the .mcfunction file at data/ /function/ \r\nfunction : {key:value}**: Runs the .mcfunction file at data/ /function/ , and uses the {key:value} if the function is a macro function.\r\nfunction : with (block |entity |storage ) **: Runs the .mcfunction file at data/ /function/ , and uses the NBT source if the function is a macro function.\r\n\r\n:::tip\r\nYou can stop a function running in real-time using the return command.:::","tags":[],"versions":"latest","url":"/wiki\\command\\function\\"},{"title":"/execute","content":"This page is up to date and validated for the Minecraft version: 1.20.6\n\n/execute command\r\nThe execute command is used to execute other commands conditionally, or in a different context. The execute command is made up of multiple subcommands, which can be chained repeatedly and in any order to modify context in various ways.\r\n\r\nEach subcommand has its own syntax, and most allow/require another subcommand to follow.\nContext\r\nEvery command is executed in a context. Various execute subcommands can modify the context in which other commands are run.\r\nThe context includes:\r\nPosition: The position at which the command is executed (the origin of relative coordinates)\r\nAnchor: Either eyes or feet. Specifies the origin of local coordinates to either the eyes or feet of an entity.\r\nExecutor: The entity executing the command (which entity the @s selector refers to)\r\nRotation: The rotation of the command\r\nDimension: The dimension in which the command is executed\r\nForking\r\nSome commands cause a fork. That is, the following chain of subcommands get executed more than once. When a command is forked, it executes the fork as a whole, then proceeds to the next fork.\r\n\r\nFor example, if there are two markers A and B, and the following command is run: execute as @e[type=marker] run function example\nAnd the example function contained the following commands:\r\n\r\n`\r\nsay first command\r\nsay second command\r\n`\r\n\r\nThe chat output would look like this:\r\n\r\n`\r\n[A] first command\r\n[A] second command\r\n[B] first command\r\n[B] second command\r\n`\r\nSubcommands\r\n:::info\r\nIn this documentation, ... represents another required subcommand, and [...] denotes that another subcommand is optional.\r\n:::\r\nexecute align...\r\nThe align  subcommand aligns the executing position to the specified axes (rounding down coordinates to integers).   can be any subset of xyz, in any order.\r\nExamples:\r\nexecute align xz ...\nexecute align yxz ...\r\nexecute anchored (eyes|feet) ...\r\nChanges the execution anchor to the eyes or feet of the entity.\nExamples:\r\nexecute anchored eyes ...\r\n\r\n:::warning\r\nWhen the position is changed not relative to the player, it resets back to feet. You can lock this though by using positioned ^ ^ ^ after it.\r\n:::\r\nexecute as...\r\nChanges the executor of the following subcommand to   (Does not modify any other context such as location).\nIf   refers to multiple entities, the following subcommand gets executed once for each referenced entity, with that entity as the executor.\nIf   refers to no entities, the execute chain terminates and no further subcommands are run.\nExamples:\r\nexecute as @a[distance=10..] ...\nexecute as @e[type=pig] ...\r\nexecute at...\r\nChanges the position and rotation of the following subcommand to that of   (Executor remains the same).\nForking rules apply the same as execute as.\nExamples:\r\nexecute at @s ...\nexecute at @p ...\r\nexecute facing...\r\nChanges the rotation of the following subcommand to face  .\n  can either be a set of coordinates, or entity (eyes|feet), which targets the eyes or feet of the given entity.\nExamples:\r\nexecute facing 0 0 0 ...\nexecute facing entity @e[type=marker,limit=1] feet\r\nexecute in...\r\nChanges the dimension of the following subcommand to  .\nApplies dimension scaling, meaning coordinates are divided by 8 when transferring from the overworld to the nether.\r\nExamples\r\nexecute in minecraft:nether ...\r\nexecute on...\r\nChanges executor to other entities based on their relation with the current executor. Same forking rules apply as execute as.\nPossible values for   are:\r\nattacker - The most recent entity to damage the current entity in the last 5 seconds.\r\ncontroller - The entity which is riding and in control of the current entity.\r\nleasher - The entity holding the the current entity on a lead.\r\norigin - The entity the current entity originated from, such as the player that shot an arrow.\r\npassengers - All entities riding the current entity (not including entities riding the passengers).\r\ntarget - The entity the current entity is trying to attack (angry at).\r\nvehicle - The entity that the current entity is riding.\r\nExamples\r\nexecute on passengers ...\nexecute on target ...\r\nexecute positioned...\r\nChanges the position (but not rotation) of the following subcommand to  . Also resets anchor.\n  can be a set of coordinates, as , or over .\npositioned as... is equivalent to at..., except that it doesn't change rotation or dimension.\npositioned over  sets the y coordinate of the position to be one above the specified heightmap.\r\nExamples:\r\nexecute position  0 -10 ...\nexecute positioned as @s ...\nexecute over world_surface ...\r\nexecute rotated...\r\nChanges the rotation of the following subcommand to  .\n  can either be rotation coordinates, or as , which changes the rotation to that of the specified entity. For rotated as , forking rules apply the same as as entity.\r\nExamples:\r\nexecute rotated ~10 0 ...\nexecute rotated as @e[tag=rotate] ...\r\nexecute summon...\r\nSummons the specified entity at the current position, and executes the following subcommand as that entity.\nNote: You cannot specify NBT data for the summoned entity.\r\nExamples:\r\nexecute summon iron_golem ...\nexecute summon marker ...\r\nexecute run \r\nRuns the specified command with the current context. Takes no further subcommands.\n:::info\r\nThis is useless by itself, and should always be preceded by other subcommands.\r\n:::\r\nExamples:\r\nexecute run say hi\nexecute at @e[type=sheep] run setblock   ~ stone\r\nexecute store (result|success)...\r\nStores an integer value somewhere. If storing result, this numeric value is taken from the output of the final subcommand (Either a run subcommand or a condition). If storing success, the value is either 1 if the final subcommand succeeds (condition passes or command successfully performs its function), or 0 otherwise.\ntarget can be one of the following:\r\nblock : Stores the value in the specified path of the given block in the format specified by type (Any numeric NBT type), and multiplied by scale. **Note: Even if type is a decimal type (float or double), the value is still rounded down.\r\nentity **: Stores the value in the specified path of the target entity, the same way as block. entity must only refer to a single entity.\r\nstorage **: Stores the value in the given path of the target storage in the same way as block and entity.\r\nscore **: Stores the value for the target entity in the provided scoreboard. target can refer to more than one entity.\r\nbossbar (value|max)**: Stores the value in a bossbar, changing either the current value or the maximum value.\r\nExamples:\r\nexecute store result entity @s Pos[1] double 1.5 ...\nexecute store success score $foo my_objective ...\nexecute store result bossbar foo_bar value ...\nexecute (if|unless) [...]\r\nExecutes the following subcommand under a given condition. unless inverts the condition, meaning the chain only continues if the condition not met.\r\n\r\nPossible values for condition:\r\nbiome **: Checks whether a specific biome is at the given position.\r\nblock **: Checks whether the given position is a certain block.\r\nblocks (all|masked)**: Compares two volumes of blocks: from start to end, and from destination such that the second volume is the same dimensions as the first. If all is specified, it checks all blocks. If mask is specified, air blocks are ignored.\r\ndata (block|entity|storage) **: Checks if the specified path matches the NBT data of target.\r\ndimension **: Checks if the execution is in the specified dimension.\r\nentity **: Checks whether target resolves to one or more entities.\r\nfunction **: Runs the specified function and tests the return value. If the function did not run the return command, or if it returns zero, the condition is not met. Must be followed by another subcommand.\r\nitems (block|entity) **: Checks if the given item matches the specified slot of the target block or entity. item is in the format  [ ].\r\nloaded **: Checks if the specified position is loaded.\r\npredicate **: Checks whether a predicate succeeds.\r\nscore (matches | )**: Checks whether a score is within a range (matches), or has a specified comparison to another score. operator can be on of:  =, >.\r\nExamples:\r\nexecute if biome   ~ minecraft:snowy_taiga ...\nexecute if block 16 -42 83 #minecraft:logs ...\nexecute if blocks    10 10 10 0 64 0 all ...\nexecute if data storage example:store path{thing:1} ...\nexecute if dimension minecraft:the_end ...\nexecute if entity @e[tag=existent] ...\nexecute if function example:my_fn ...\nexecute if items entity @s weapon.mainhand #minecraft:swords[minecraft:custom_data={foo:\"bar\"}] ...\nexecute if loaded 0 0 0 ...\nexecute if predicate example:check ...\nexecute if score @s score = @r score ...","tags":[],"versions":"latest","url":"/wiki\\command\\execute\\"},{"title":"Getting Started","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nSyntax\r\n\r\nVariable | Meaning\r\n|---------\r\n  | An argument.\r\n[entry] | An optional entry.\r\n[entryA│entryB│entryC] | Pick one of these. This is optional.\r\n(entryA│entryB│entryC) | Pick one of these. This is required\r\n... | Some syntax is left out, you can find more about the command on its dedicated page\r\nList of all commands\r\nPermission level 2+\r\nThese commands require a permission level same or bigger than 2 to run them.\r\n/advancement grant|revoke everything|only|from|through|until (|) - Gives, removes or checks player advancements\r\n/attribute get|base|modifier ... - Can change or read attributes\r\n/bossbar list|add|remove|set|get [ ] ... - Changes and creates bossbars\r\n/clear [ ] [ ] [ ] - Clears items from the players inventory\r\n/clone ... OR /clone from ... - Copies blocks in an area from one place to another\r\n/damage [ ] [at ]|[by ] [from ] - Damages selected entities\r\n/data get|merge|modify|remove ... - Changes block entity or entity NBT data (See more here: /data)\r\nData get: /data get (block |entity |storage ) [ ] [ ]\nData merge: /data merge (block |entity |storage ) \r\nData modify: /data modify |entity |storage ) (append|insert |merge)\r\nData remove: /data remove (block |entity |storage ) \r\n/datapack disable |enable (first|last|before|after)|list [available|enabled] - Enables and disables datapacks\r\n/debug start|stop|function  - Starts or stops a debug session.\r\n/difficulty [peaceful|easy|normal|hard] - Sets or gets the difficulty of a world\r\n/effect clear [ ] [ ]|give [ |infinite] [ ] [ ] - Changes the entity's effects\r\n/enchant [ ] -  Changes enchants of the item the entity is holding (NOTE: You can't enchant items with a level higher than what is possible in survival.)\r\n/execute ... - Executes a different command (See more here: /execute)\r\n/experience add|set|query... - Adds, removes or checks the players experience points (ALIAS: /xp)\r\n/fill [destroy|hollow|keep|outline|replace [ ]] -\n/fillbiome [replace ] -\n/forceload add [ ]|remove all OR [ ]|query [ ]> - Forces chunks to be loaded constantly\r\n/function |with (block |entity |storage ) [ ] - Triggers a function\r\n/gamemode [ ] - Changes the player's gamemode\r\n/gamerule [ ] - Changes or checks a gamerule\r\n/give [ ] - Gives an item to the player\r\n/item modify|replace (block |entity )... - Changes or copies items from inventories of entities or blocks\r\n/jfr start|stop - Starts or stops JFR(Java FlightRecorder + some other custom events) profiling.\r\n/kick [ ] - Kicks a player off a server. (NOTE: A player in a single player world or the host of a world cannot be kicked tho)\r\n/kill [ ] - Can kill entities\r\n/locate structure |biome |poi  - Displays the coordinates of the nearest biome, structure or a point of interest\r\n/loot loot  - Spawns a given loot table into a specified inventory or into the world\r\n/particle [ ] OR particle [force|normal] [ ] - Spawns a particle\r\n/place feature|jigsaw|structure|template ... - Places a structure, a feature, a structure template or a template pool\r\n/playsound [ ] [ ] [ ] [ ] -  Plays a specified sound to a player\r\n/random value|roll|reset ... -  Rolls a random number\r\n/recipe give|take  - Gives or takes recipes from the player\r\n/reload -  Reloads all datapacks in a world. (If there is a bug in the pack, it doesn't reload it and uses the previous version)\r\n/return |fail|run  -  Control execution flow inside functions and change their return value\r\n/ride mount |dismount -  Used to make an entity ride or dismount a different entity\r\n/say  -  Sends a message into chat to all players\r\n/schedule function [append|replace] OR clear  -  Schedules a function\r\n/scoreboard objectives|players ... -  Manages scoreboard objectives and players\r\n/setblock [destroy|keep|replace] -  Changes or replaces a specified block with a different one\r\n/spawnpoint [ ] [ ] [ ] -  Changes the spawnpoint for a player\r\n/spectate [ ] -  Makes a player spectate an entity, the player has to be in spectator mode.\r\n/spreadplayers [under ]  -  Teleport entities randomly across a specified area\r\n/stopsound [ ] [ ] -  Stops any playing sound\r\n/summon [ ] [ ] -  Summons an entity\r\n/tag add |remove | list -  Adds, removes or lists entities tags\r\n/team list|add|remove|empty|join|leave|modify ... -  Manages teams\r\n/teleport [ ]... -  Teleport entities to a specified location. (ALIAS: /tp)\r\n/tellraw  -  Sends a JSON message to players\r\n/tick query|rate |freeze|unfreeze|step [|stop]|sprint [|stop] -  Controls or checks the tick rate of a world\r\n/time add |query (daytime|gametime|day)|set  - Controls or checks the time of a world\n/title (times clear|reset|title |subtitle |actionbar ) -  Displays text on the player's screen\r\n/weather weather (clear|rain|thunder) [ ] -  Changes the weather\r\n/worldborder add|center|damage|get|set|warning ... -  Controls the worldborder\r\nPermission level 0\r\nThese commands can be run by any player, no matter their permission level.\r\n/help [ ] - Shows the help menu for commands\r\n/list [uuids] - Lists players on the server.\r\n/random (roll|value)  - Creates a random value (\\ requires OP)\r\n/seed - Displays the world's seed (In multiplayer requires your op level to be 2+)\r\n/teammsg  - Sends a message to all players in the same team of the command runner. (Alias /tm)\r\n/me  - Displays a message about the sender.\r\n/msg  - Sends a private message to a player. (Alias /tell and /w)\r\n/tell  - Sends a private message to a player (Alias /msg and /w)\r\n/w  - Sends a private message to a player (Alias /tell and /msg)\r\n/trigger [add|set] [ ] - Displays the world's seed\r\nMultiplayer Commands\r\nThese commands can only be run only on a server.\r\n/ban [ ] - Adds the player profile into the server's blacklist\r\n/ban-ip [ ] - Adds the player's IP address into the server's blacklist\r\n/banlist [ips|players] - Displays the server's blacklist\r\n/op  - Makes a player operator\r\n/deop  - Removes a player operator status\r\n/pardon  - Removes player's profile from the server's blacklist\r\n/pardon-ip  - Removes player's IP address from the server's blacklist\r\n/perf start|stop - Captures info and metrics about the game for 10 seconds\r\n/save-all [flush] - Saves the server to a disk\r\n/save-on - Enables automatic server saves.\r\n/save-off - Disables automatic server saves.\r\n/setidletimeout  - Used to set the time before idle players are kicked (If 0 - disabled)\r\n/stop - Stops the server\r\n/transfer [ ] [ ] - Transfers a player to a different server\r\n/whitelist on|off|list|reload|remove|add ... - Can change the server's whitelist\r\nSingleplayer Commands\r\nThis command can only be run in singleplayer, not on a server.\r\n/publish [ ] [ ] [ ] -  Opens a singleplayer world to your local network","tags":[],"versions":"latest","url":"/wiki\\command\\all\\"},{"title":"Resources","content":"Resources\r\nListed here are links to credible and reliable places to aid in command support and creation.\r\nDatapack Hub\r\nDiscord\r\nMCStacker\r\nWebsite\r\nDiscord\r\nData Pack Generators\r\nWebsite","tags":[],"versions":"latest","url":"/resources\\"},{"title":"Slowcast","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nSlowcasting\r\n\r\nA Slowcast is similar to a raycast, but unlike a standard Raycast, it is not instant.\r\n\r\nIn some cases it is enough to use a simple tp command that teleports a marker a bit forward every tick.\r\nIf you wanted it to move faster, however, you have to increase the distance it teleports and this could result in skipping over entities or blocks you might want to detect.\r\n\r\nA slowcast solves this problem by teleporting multiple times within a single tick to travel faster but still checking if it hits something on its way.\r\n\r\n:::info\r\nThis tutorial uses a thing called a recursive function. A recursive function is a function that runs itself over and over again.\r\n:::\r\nSlowcasting to an entity\r\n\r\nThis method shows you how you can create and shoot a slowcast to detect entities on its way.\r\n\r\nSlowcasts can be useful if you want to create fast but not instantaneous moving projectiles for magic spells for example.\r\n\r\nTo make a slowcast, you need:\r\nset up a projectile with all the data it needs\r\na duration function to manage the travel distance\r\na step function that teleports the projectile and checks if it hit something\r\na temporary loop that calls the step function for all active projectiles.\r\n\r\nLet's start by creating all the necessary scoreboards in the load function.\r\n`mcfunction\r\nnamespace:load\r\n\r\nscoreboard objectives add temp dummy\r\nscoreboard objectives add slowcast.steps dummy\r\nscoreboard objectives add slowcast.duration dummy\r\n`\r\n\r\nThe next step is to initialize the projectile. This is done by running the following function as and at the player.\r\nIt summons a new marker entity (any other entity works too) and runs the setup function as that entity.\r\n`mcfunction\r\nnamespace:init\r\n\r\nexecute anchored eyes positioned ^ ^ ^.3 summon minecraft:marker run function :setup\r\n`\r\n\r\nSadly it is not possible to add nbt data in the summon sub-command so we have to add it  in the setup function too.\r\nWe will give it a tag that marks it as a slowcast projectile.\r\nAfter that, we set all the scores it needs to function properly.\r\nIn this example, you will see that instead of setting the scores directly it copies from temporary scoreboards.\r\nThis is so that the values are not hardcoded and can be different for different projectiles without having to create a new setup function for each projectile. At the end, we then call the temporary loop function.\r\n`mcfunction\r\nnamespace:setup\r\n\r\ntag @s add slowcast\r\n\r\nscoreboard players operation @s slowcast.steps = maxSteps temp\r\nscoreboard players operation @s slowcast.duration = duration temp\r\n\r\nfunction :temp_tick\r\n`\r\n\r\nThe projectile is all set up and the loop function is called.\r\nThe loop function is the part of this whole system that keeps everything running as long as there are active slowcast projectiles.\r\n`mcfunction\r\nnamespace:temp_tick\r\n\r\nexecute as @e[type=marker,tag=slowcast,scores={slowcast.duration=1..}] at @s run function :duration\r\n\r\nexecute if entity @n[type=marker,tag=slowcast] run schedule function :temp_tick 1t\r\n`\nNow the actual slowcast logic which handles the movement, travel distance, and hit detection.\r\n\r\nIn the looping function the duration function is called, let's make this one first.\r\nThis function is responsible for the slowcasts travel distance and calling the step function for the actual movement.\r\ndecrease the duration score\r\nstores the projectile step count in a temporary scoreboard\r\ncalls the step function 0.2 blocks further in the facing direction\r\nkill the projectile should it have a distance score of below 1 at the end of the function\r\n`mcfunction\r\nnamespace:duration\r\n\r\nscoreboard players remove @s slowcast.duration 1\r\n\r\nscoreboard players operation steps temp = @s slowcast.steps\r\nexecute positioned ^ ^ ^.1 run function :step\r\n\r\nexecute unless score @s slowcastDuration matches 1.. run kill\r\n`\r\n\r\nIn the called step function we handle the teleportation between the current and target position and check if the projectile has hit something on its way there.\r\ndecrement the step score in the temporary scoreboard (we still need the step score stored in the projectile for the next time we call the step function)\r\nmake some particles for the visuals (you could replace the particle command with another function call that does more complex stuff)\r\nexecute a command as every entity (excluding entities with the slowcast tag and players) whose hitbox intersects with both virtual volumes run the hit function and kill the projectile.\r\ntp the projectile to the current position (until now it only executed the command at this position but is still 0.1 block further back)\r\nexecute this function again one 0.1 block step forward should the temporary step counter still be over 1 (recursion)\r\n`mcfunction\r\nnamespace:step\r\n\r\nscoreboard players remove steps temp 1\r\n\r\nparticle flame   ~ .1 .1 .1 0 1\r\n\r\nexecute as @e[type=!player,type=!marker,dx=0] positioned -.99 -.99 -.99 if entity @s[dx=0] positioned .99 .99 .99 unless function :hit run kill @n[tag=slowcast]\r\n\r\ntp   ~\r\n\r\nexecute if score slowcastSteps temp matches 1.. positioned ^ ^ ^.1 run function :step\r\n`\r\n\r\nThe hit function called in the hit detection does whatever you want it to do when hitting an entity.\r\nIt could spawn an explosion, apply an effect, or simply deal some damage.\r\n:::tip\r\nWhen you make the hit function have a successful return value, it will not kill the projectile in the step function. You could use this to make a piercing projectile for example.\r\n:::","tags":[],"versions":"latest","url":"/guide\\technical\\slowcasts\\"},{"title":"Raycasts","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nRaycasting\r\n\r\nRaycasting is when we shoot a line from the player's eyes in the direction they are looking. We use this to get what the player is looking at and do something to it, such as spawning an explosion.\r\n\r\n:::info\r\nThis tutorial uses a neat thing called a recursive function. A recursive function is a function that runs itself over and over again.\r\n:::\r\nRaycast to an entity\r\n\r\nThis method will show you how to find what entity that a player is looking at. This is useful for many reasons - if you wanted to make a gun datapack, you'd need to damage the entity that a player is looking at in order to damage them.\r\n\r\nTo do this, you have to run a recursive function which will start at the eyes of the player and keep running itself 0.1 blocks forward until it hits an entity. When it does hit an entity, you can easily get the entity and do something to it.\r\n\r\nFirstly, we'll make the function which, when you run it, will start the raycast. In this function, we'll want to:\r\n\r\nset the maximum distance for the raycast, so it won't go on forever if it never hits an entity.\r\nrun the function at the eyes of the player\r\n\r\nTo set a maximum distance, we store the maximum amount of times we want the function to run in a scoreboard. Every time the recursive function runs, we want to subtract one from that scoreboard, and only continue if the score is more than 0.\r\n\r\nFirst, you need to create a scoreboard in your load function.\r\n`mcfunction\r\nnamespace:load\r\n\r\nscoreboard objectives add temp dummy\r\n`\r\n\r\nThen, we can use this scoreboard to set the limit of the raycast before we run it (In this case we set it to 1000 which is 100 blocks. 1000 steps * 0.1 blocks/step = 100 blocks).\r\n\r\nWe also tag the entity executing the raycast so we can exclude it later for hit detection.\r\n\r\nCall The raycats function one step further in the facing direction.\r\n\r\nRemove the tag at the end of the function so it does not interfere with other raycasts that might be executed within the same tick.\r\n`mcfunction\r\nnamespace:init\r\n\r\ntag @s add raycaster\r\n\r\nscoreboard players set raycastLimit temp 1000\r\n\r\nexecute at @s anchored eyes positioned ^ ^ ^.1 run function :raycast\r\n\r\ntag @s remove raycaster\r\n`\r\n\r\nIn the raycast function, we want to check if the function has hit an entity, and if not, run it again until it does, hit a wall, or reaches the raycasts limit, moving a bit forward each time.\r\n\r\nWe first decrement the limit value by 1.\r\n\r\nThen we make the path of the raycast visible by summoning a few particles. Instead of summoning particles, it could also run another function for more complex behavior.\r\n\r\nThe next step is a bit more complex.\r\nWe execute a command as every entity that is not the caster and whose hitbox intersects with the two differently offset virtual volumes.\r\nNear the end you see unless function :hit this will run the function as the hit entity and, because all functions without a return command return false and we check for unless, this condition resolves to true and will return with the number 0, ending the raycast.\r\nShould no entity be in both volumes and the  function doesn't get run, the return command at the end won't be reached and the raycast will continue.\r\n\r\nThe last command checks if the raycast hit a wall.\r\nIf it does, the raycast will end.\r\nIf it doesn't, it will then check if the limit is reached, again ending if it is.\r\nShould the limit not be reached yet, it will move 0.1 blocks forward and call the raycast function again (recursion).\r\n`mcfunction\r\nnamespace:raycast\r\n\r\nscoreboard players remove raycastlimit temp 1\r\n\r\nparticle minecraft:flame\r\n\r\nexecute positioned -.99 -.99 -.99 as @e[dx=0,tag=!raycaster] positioned .99 .99 .99 as @s[dx=0] unless function :hit run return 0\r\n\r\nexecute if block   ~ #minecraft:replaceable if score raycastLimit temp matches 1.. positioned ^ ^ ^0.1 run function :raycast\r\n`","tags":[],"versions":"latest","url":"/guide\\technical\\raycasts\\"},{"title":"Generating Random Numbers","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nGenerating a random number is very useful in programming for a variety of reasons, so lets lean how to do it with a datapack! The method for you will vary based on your datapack's Minecraft version, if you use 1.20.2+, it will be a bit easier, because of the acces to the random command.\r\n1.20.2+\r\n\r\nUse the /random command, TODO: put guide here.\r\n1.20.1 and below\r\n\r\nLets begin by creating a new file in data/ /loot_tables/. We will call it rng.json, with that done, lets put this inside:\rrng.json\r\n`json\r\n{\r\n\"pools\": [\r\n{\r\n\"rolls\": {\r\n\"min\": 1,\r\n\"max\": 10\r\n},\r\n\"entries\": [\r\n{\r\n\"type\": \"minecraft:item\",\r\n\"name\": \"minecraft:stone\",\r\n\"functions\": [\r\n{\r\n\"function\": \"minecraft:set_count\",\r\n\"count\": 0\r\n}\r\n]\r\n}\r\n]\r\n}\r\n]\r\n}\r\n`\r\n\r\nYou can change the values 1 and 10 to change the range. If you leave it as it is, it generates a random number between 1-10.\nSee it in action!\r\nTo use this, you will just have to store the result of summoning this loot table. So you can just do this:\r\n`\r\nexecute store result . . . run loot spawn   ~ loot :rng\r\n`\r\n\r\nThis will store the random number in wherever you specified (Can be a scoreboard, storage, ...).","tags":[],"versions":"latest","url":"/guide\\technical\\random-numbers\\"},{"title":"Player ID System","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nGive each player a unique ID\r\nCreate a scoreboard in a load function that runs on /reload\r\n`hs\r\nnamespace:load\r\nscoreboard objectives add playerid dummy\r\n`\r\nCreate a function to assign a unique id to the player\r\n`hs\r\nnamespace:assign_id\r\nscoreboard players add .global playerid 1\r\nscoreboard players operation @s playerid = .global playerid\r\n`\r\nCreate a tick advancement to assign an id to a player when they first join\r\n`json\r\n{\r\n\"criteria\": { \"requirement\": { \"trigger\": \"minecraft:tick\" }},\r\n\"rewards\": { \"function\": \"namespace:assign_id\" }\r\n}\r\n`\r\nCheck if an entity has the same ID as the player\r\nCreate a predicate that compares the id\rnamespace:match_id\r\n`json\r\n{ \"condition\": \"minecraft:entity_scores\", \"entity\": \"this\", \"scores\": {\r\n\"playerid\": {\r\n\"min\": { \"type\": \"minecraft:score\", \"target\": { \"type\": \"minecraft:fixed\", \"name\": \"#this\" }, \"score\": \"playerid\" },\r\n\"max\": { \"type\": \"minecraft:score\", \"target\": { \"type\": \"minecraft:fixed\", \"name\": \"#this\" }, \"score\": \"playerid\" }\r\n}}\r\n}\r\n`\r\nTo use it in a function, you can do that following\r\n`hs\r\nscoreboard players operation #this playerid = @s playerid\r\nsay @e[predicate=namespace:match_id] HAVE THE SAME PLAYERID\r\n`","tags":[],"versions":"latest","url":"/guide\\technical\\player-id-system\\"},{"title":"Debugging your Datapacks","content":"Debugging your datapacks\r\n\r\nThere will come times when your datapack won't work, and you will have to figure out what exactly doesn't work in it. Don't worry if this happens to you, if you're like any of the rest of us, this will happen often. Code will almost never work the first time you try it. An error in your code is referred to as a bug. Removing these bugs is called debugging. This guide will teach you the best methods for debugging datapacks.\r\nWhat are bugs?\r\n\r\nBugs are a fancy programmer term for an error in your code. There are two main types of bugs:\r\n\r\nSyntax error**: This is a bug in the actual written code. This is caused by the code you write being incorrectly written so that the computer literally can't read it. For example, writing \"executr as @a\" would be a syntax error because \"executr\" isn't a command.\r\nLogic error**: This is a bug where the written code is correctly written, but the code doesn't do what you want it to. This is caused by a mistake in the code logic. In the simplest example, if you want to give a player 32 diamonds, but you accidentally wrote 322.\r\nFinding and debugging syntax errors\r\n\r\nSyntax errors are pretty easy to spot and fix, due to Minecraft's output logs, which literally tell you if your code is incorrect. When you're coding datapacks, its a good idea to always have the logs open if you need to double check it. You can open the logs by opening the default Minecarft launcher and clicking \"Settings\", and then enabling \"Open output log when Minecraft: Java Edition starts\", then just starting the game.\r\n\r\nA guide on how to open the Minecraft launchers output logs\r\n\r\nSyntax errors will show up in red text when you /reload your datapack. But sometimes other errors can also show in yellow text instead.\r\n\r\nLets take this image as an example:\r\nOutput log with an error.\r\nHere, the error tells you exactly where the error is - in this case it's in the function \"be:give\" at line 1 after \".... give @s\". And indeed I did spell \"loot\" as \"lot\", which caused the error.\r\nCode with a syntax error\r\nFinding logic errors\r\n\r\nLogic errors are more difficult to find because there's nothing actually incorrect with the code you wrote, it just does something other than what you want it to do.\r\n\r\nAn easy way to find where a logic error is in the code is to make use of the say or tellraw command. These commands will send any message to the chat, making it easy for you to know when and if your code actually runs as you expect it to. You can easily put a say Function ran correctly command in your function - If the function runs, then it will send a message to the chat. It will also send the name of the entity that ran the function to the chat, so you can see if your function is executed by the correct entity.\r\n\r\nSimilarly, you can use the tellraw command for more advanced debugging. The tellraw command also has the capability to show you the value of scoreboards and NBT values, so you can check what data your code is using. For instance, if you want to check the value of a scoreboard, you could use the following command:\r\n\r\n`ansi\r\ntellraw @a {\"score\":{\"name\":\"@s\",\"objective\":\"some_scoreboard_objective\"}}\r\n`\r\n\r\nBased on the output of these commands in chat, you can use this to tell where your code goes wrong. (Just make sure to remove them after you've found the error, otherwise it can get annoying).\r\n\r\nYou may want to keep the debug messages in the datapack, but you don't want it to be sent to every player. Fortunately for us, with the tellraw command, you can specify to who the message will be sent. This means you could only send the debug messages to those who have the tag debug:\r\n`ansi\r\ntellraw @a[tag=debug] {\"text\":\"Debug message sent only to people with the debug tag!\"}\r\n`\r\nDebugging logic errors\r\n\r\nUnfortunately, debugging logic errors in your code isn't as easy as fixing one spelling mistake. But yet there are still techniques that we can use.\r\n\r\nOne way to solve logic errors is to recreate the error in a separate project. When you remove all the other context of the pack, you can focus just on the bit which doesn't work. You can just copy out the code you want to fix into a separate datapack, then fix it there. Once you've identified and fixed the problem, you'll know how to fix it in the real project.\r\nSummary\r\n\r\nThe first main method for debugging datapacks is using Minecrafts output logs, we've already learnt how to use those in the first part of this guide. The second method is using the in-game commands, like /say and /tellraw to print information in real-time about how your datapack works. But those are not the only ones, you can use the /scoreboard objectives setdisplay  command to show the values of a scoreboard on your screen in real-time, or you can use /data get ..., which will print the value of any NBT data in chat.\r\n\r\nA scoreboard on screen\r\n\r\nYou might also find that some other methods that suit you the best, for example you might find the Data Reload mod useful for displaying errors in chat, or a completely different method, that is up to you.","tags":[],"versions":"latest","url":"/guide\\technical\\debugging\\"},{"title":"Right Click Detection Summary","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nRight Click Detection Summary\r\n\r\nIf you alredy know which right click detection technique you are goin to use, you can get more information about them on their dedicated pages:\r\n\r\nUsing a Carrot on a stick/WFOAS\r\nUsing a Food Component\r\nUsing an Eye of Ender\r\nClicking an Interaction Entity\r\nPros and Cons of each method\r\n\r\n|Method | Pros | Cons | Difficulty to make | X clicks/second | Player/Location |\r\n|---|---|---|---|---|---|\r\n| COAS/WFOAS |  | Attracks pigs/striders when held, requires a command that runs every tick | Easy | Detects up to 5 clicks/second when holding right click | Bound to player, not location |\r\n| Food Component | Can detect clicks from any item,  | Only works 1.20.5+, slows player down when holding right click | Medium | Detects up to 20 clicks/second when holding right click | Bound to player, not location | Bound to player, not location |\r\n| Eye Of Ender |  | Slows player down when holding right click, only works in worlds without stronghold | Medium | Detects up to 20 clicks/second when holding right click | Bound to player, not location |\r\n| Interaction Entity | Also detects left clicks, an entity | Players can't break/hit/place through, requires an entity | Medium | detects up to 5 clicks/second when holding right click | Bound to location, not a player |\r\n\r\nAditional Info\r\nCOAS/WFOAS - This method works by using an item.used scoreboard objective which triggers when using either of the two items and then running commands as/at players with a score of 1 or higher.\r\nFood Component - This method works by using an item with a very long eating time which will never finish, in combination with an advancement to detect when you begin eating it.\r\nEye Of Ender - This method works by using an advancement to detect whenever a player uses an eye of ender and then executing code as/at them.\r\nInteraction Entity - This method works by using an advancement to check whether a player interacted with an interaction entity and then executing code.","tags":[],"versions":"latest","url":"/guide\\right-click\\"},{"title":"Using an Interaction Entity for RC detection","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nPros and cons\r\nPros:\r\nCan also detect left clicks\r\nWorks in any world\r\nDoesn't need to run every tick\r\nDoesn't attract mob\r\n\r\nCons:\r\nOnly works in 1.19.4+\r\nSlows player down when holding right click\r\nRequires an additional entity\r\nCan't be interacted through (e.g. can't build,attack,... throught it)\r\n\r\nOther:\r\nDetects up to 5 clicks/second when holding right click\r\nBound to a specific location, not player\r\nUsing an Interaction Entity for Right Click Detection\r\n\r\nFirstly we will need to create an advancement, located in data/ /advancement/. You can call it hovewer you want, but for the purpose of this guide we will call it interacted_with_interaction.json. This advancement is used to detect when a player clicks on an interaction entity.\r\n\r\n:::tip\r\nIf you don't want to detect a click on every interaction, you can detect it on only some by checking their NBT data, and using Tags to differentiate them.:::\rinteracted_with_interaction.json\r\n`json\r\n{\r\n\"criteria\": {\r\n\"requirement\": {\r\n\"trigger\": \"minecraft:player_interacted_with_entity\",\r\n\"conditions\": {\r\n\"entity\": {\r\n\"type\": \"minecraft:interaction\"\r\n}\r\n}\r\n}\r\n},\r\n\"rewards\": {\r\n\"function\": \":rightclick_run\"\r\n}\r\n}\r\n`\r\n\r\nThen just create a simple function in data/ /function/, and call it the same as you did in the advancement, for us that would be rightclick_run.mcfunction\rrightclick_run.mcfunction\r\n`hs\r\nRevoke the advancement so we can detect the click again\r\nadvancement revoke @s only namespace:interacted_with_interaction\r\nAnnounce that the player clicked on the interaction in chat, feel free to replace this with whatever you want it to do\r\nyour logic here...\r\nsay Used interaction\r\n`\r\n\r\nNow you can summon the interaction entity by doing /summon interaction   ~ {width:2f,height:3f}.\r\n\r\nThat's it, you should now have working right click detection using an interaction entity.","tags":[],"versions":"latest","url":"/guide\\right-click\\interaction\\"},{"title":"Using the Food Component for RC detection","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nPros and cons\r\nPros:\r\nCan detect clicks from any item\r\nWorks in any world\r\nDoesn't require additional entities\r\nDoesn't need to run every tick\r\nDoesn't attract mobs\r\n\r\nCons:\r\nOnly works in 1.20.5+\r\nSlows player down when holding right click\r\n\r\nOther:\r\nDetects up to 20 clicks/second when holding right click\r\nBound to the player, not a specific location\r\nUsing the Food Component for Right Click Detection\r\n\r\nUsing the food component for right-click detection is one of the most flexible methods, simply because you can put it on (almost) ANY item. This method is not limited to a single item, like using a coas. You can use any item you want.\r\n\r\nThis is just a guide, so you'll need to change a few things for your actual datapack:\r\nChange   to the item you want to detect\r\nChange   to your namespace\r\nChange   to whatever custom data you want\r\n\r\n:::warning\r\nYou can use any item for method, but if the item alredy has an existing right-click functionality (like placing a block), it will keep that.:::\r\n\r\nThe first step will be creating the advancement that detects when a player is \"using\" (in this case eating) the item, the name can be whatever you want ending in json, but for the purpose of this tutorial we will call it click_food.json. Then put this file into data/ /advancement/\rclick_food.json\r\n`json\r\n{\r\n\"criteria\": {\r\n\"requirement\": {\r\n\"trigger\": \"minecraft:using_item\",\r\n\"conditions\": {\r\n\"item\": {\r\n\"items\": [\r\n\"minecraft:\"\r\n],\r\n\"predicates\": {\r\n\"minecraft:custom_data\": {\"\": true}\r\n}\r\n}\r\n}\r\n}\r\n},\r\n\"rewards\": {\r\n\"function\": \":rightclick_run\"\r\n}\r\n}\r\n`\r\n\r\nAs you can see, the advancement runs a function when it detects a player eating our custom item, so the next step is creating the actual function logic. This is pretty simple, just create a .mcfunction file in data/ /function/. Make sure you call the function the same, as you did in the advancement file, in our case rightclick_run.mcfunction\r\n\r\nYou can put whatever commands you want into this function, but make sure you revoke the advancement from the player, so the item can be clicked again.\rrightclick_run.mcfunction\r\n`hs\r\nRevoke the advancement from the player so it can be used again\r\nadvancement revoke @s only :click_food\r\nAnnounce the use of the item in chat, feel free to replace this with whatever\r\nyour logic here...\r\nsay I successfully used food component detection!\r\n`\r\nSee it in action!\r\nAfter /reloading the datapack, we will now need to give ourselfs the actual item with the custom food component. (You can run this in the chat to test it, or put it in a function to trigger when you want):\r\n`hs\r\ngive @s stick[minecraft:food={nutrition:0, saturation:0, can_always_eat:true, eat_seconds:999999999}, minecraft:custom_data={ :true}]\r\n`\r\nHow it works\r\nWe've added a food component to our custom stick item, allowing it to be consumed like food. The player won't actually eat it, since eat_seconds is set to 999999999, so it would take them over 30 years. The food component lets the player try to eat it, which can be detected using an advancement. That advancement runs a function which removes the advancement so it can be triggered again next tick, and runs whatever code you want to the item to trigger.","tags":[],"versions":"latest","url":"/guide\\right-click\\food_component\\"},{"title":"Using an Eye of Ender for RC detection","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nPros and cons\r\nPros:\r\nDoesn't require additional entities\r\nDoesn't need to run every tick\r\nDoesn't attract mobs\r\n\r\nCons:\r\nOnly works in worlds without strongholds\r\nSlows player down when holding right click\r\n\r\nOther:\r\nDetects up to 20 clicks/second when holding right click\r\nBound to the player, not a specific location\r\nUsing an Eye of Ender for Right Click Detection\r\n\r\n:::warning\r\nThis only works in world without strongholds, if you don't want that, you can either use a similiar method that works everywhere (using the Food Component method) or do some chnages to these functions, as specified at the end of this guide.:::\r\n\r\nThis is just a guide, so you'll need to change a few things for your actual datapack:\r\nChange   to your namespace\r\nChange   to whatever custom data you want\r\n\r\nUsing an Eye of Ender is a very similiar method to using the Food Component, with the difference that this can only be used in worlds without strongholds. With that out of the way, the first file we will need to create will be an advancement. Located in data/ /advancement/, we will need to create a .json file, we are going to call it used_eye_of_ender.json for the rest of he guide.\rused_eye_of_ender.json\r\n`json\r\n{\r\n\"criteria\": {\r\n\"requirement\": {\r\n\"trigger\": \"minecraft:using_item\",\r\n\"conditions\": {\r\n\"item\": {\r\n\"items\": [\r\n\"minecraft:ender_eye\"\r\n],\r\n\"predicates\": {\r\n\"minecraft:custom_data\": {\"\": true}\r\n}\r\n}\r\n}\r\n},\r\n\"rewards\": {\r\n\"function\": \":rightclick_run\"\r\n}\r\n}\r\n`\r\n\r\nNow that we have the advancement, we can detect if the player is holding right click and call our function, that is located in data/ /function/. You will have to call this function the same name as you did in the advancement, for us that is rightclick_run.mcfunction.\r\n\r\nrightclick_run.mcfunction\r\n\r\n`\r\nRevoke the advancement from the player so it can be used again\r\nadvancement revoke @s only :used_eye_of_ender\r\nAnnounce the use of the item in chat, feel free to replace this with whatever\r\nyour logic here...\r\nsay I successfully used EoE detection!\r\n`\r\n\r\nIf you want this method to work in worlds with strongholds, you can either block the target of ender eyes in the pack.mcmeta or killing the eye and giving it back after it being used.","tags":[],"versions":"latest","url":"/guide\\right-click\\eoe\\"},{"title":"Using COAS/WFOAS for RC detection","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nDetecting right clicks: carrot on a stick\r\nUsing a carrot on a stick (or a warped fungus on a stick) is perhaps one of the simplest methods of right-click detection, requiring only a single tick command and a scoreboard. This method works due to the used:carrot_on_a_stick statistic detecting right clicks on any carrot_on_a_stick item.\r\n\r\n:::info\r\nFor the sake of simplicity, we will use a carrot on a stick, shortened to COAS. This method also works with warped fungus on a stick (WFOAS) items.\r\n:::\r\n\r\nCOAS and WFOAS items have a unique property that means that right clicking the item counts as \"using\" an item, and will therefore increase the used:carrot_on_a_stick statistic. We can track changes to this statistic using a scoreboard. When it goes up, we know that the player has right clicked a COAS, and we can run a command when that happens.\r\nMethod\r\nTo get started, we need to create a scoreboard with the criteria item.used:minecraft.carrot_on_a_stick, so that we can later detect when a player uses the COAS (by right clicking on it).\r\n\r\nIf you don't already have it, you'll need to create a load function with a command that creates a new scoreboard objective. You can name the objective whatever you want. We reccomend naming it something like .rc_coas. In your load function, put a scoreboard command such as this:\r\n\r\n`hs\r\nscoreboard objectives add.rc_coas minecraft.used:minecraft.carrot_on_a_stick\n`\r\n\r\nThis scoreboard will go up by 1 every time a player right clicks a COAS - when this happens we can execute our function. Note that this command must run every tick, otherwise it won't be able to detect right clicking. Put this in your tick/loop function:\r\n\r\n`\r\nThis will run the \"rightclick_run\" function as the player who uses the COAS.\r\nexecute as @a[scores={.rc_coas=1..}] run function :rightclick_run\nscoreboard players reset @a[scores={.rc_coas=1..}].rc_coas\r\n`\r\n\r\nIn the rightclick_run.mcfunction file, you can do whatever you like as a result of right clicking the COAS. As an example, putting this in rightclick_run.mcfunction will make the player say Used COAS when they right click a COAS item.\r\n\r\n`\r\nsay Used COAS\r\n`\r\n\r\n:::note\r\nAdd another subheading for detecting clicks on a specific item with NBT, explaining how to check the currently held item.\r\n:::","tags":[],"versions":"latest","url":"/guide\\right-click\\coas\\"},{"title":"Installing a Datapack","content":"Introduction\r\n\r\nSo you've found a nice datapack for Minecraft, and the next step is to get it into your game. This guide will explain how to install a datapack onto a world which exists, a new world.\r\nInstalling a datapack to an existing world\r\n\r\nIn your world menu, find the world which you want to install the datapack on. Click Edit.\r\nThe singleplayer menu\r\nOpen the world folder.\r\nThe edit menu\r\nIn the world folder, open the datapacks folder.\r\nWorld folder with datapacks highlighted\r\nPut the datapack zip file into the folder.\r\nzip folder in datapacks folder\rIf the zip folder contains a folder which contains data and pack.mcmeta, then put that folder in the datapacks folder instead of the full zip. Putting the zip in the datapacks folder only works when data and pack.mcmeta are directly in the root folder of the zip.\r\nRejoin the world and run /reload.\r\nReload command in chat\r\nInstalling a datapack to an new world\r\n\r\nGo to the Create New World screen. Make sure that you enable cheats.\r\nCreate new world screen\r\nNavigate to the Data Packs screen. This is under the \"More\" tab in the latest versions.\r\nThe Data Packs screen option\r\nDrag and drop the datapack zip into this screen.\r\nThe Data Packs screen after I dragged and dropped something in\rIf it doesn't show up, then it's likely that the zip file contains a folder which contains the datapack, and not the zip file just containing the datapack. You need to take the folder out of the datapack, and put it in the datapacks folder (click the \"Open Packs Folder\" button to open it.)\r\nClick on the datapack icon to apply it to the world\r\nThe Data Packs screen after I clicked the icon\r\nCreate the world, and then run /reload in chat.\r\nReload command in chat\r\nInstalling a datapack to a realm\r\n\r\nTo install a datapack to a realm, you need to basically do this:\r\n\r\nDownload the world from the realm into your singleplayer worlds.\r\nFollow the steps in \"Installing a datapack to an existing world\" to install a datapack on that world\r\nUpload that world to your realm.","tags":[],"versions":"latest","url":"/guide\\installing-a-datapack\\"},{"title":"Getting Started","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nGetting Started\r\nIf you're new to datapacks, you're at the right place. Looking around, getting into datapack creation might seem confusing, but once you've grasped the basics, you'll be off to a good start!\r\n\r\n:::info\r\nIf you don't know what datapacks are, then take this explanation. Datapacks are essentially add-ons to Minecraft which can change the game, whether by adding a simple game mechanic, or creating completely new experiences! The best part is that they're really easy to create, even if you have little coding knowledge\r\n:::\r\n\r\nThis guide will help you to create your first datapack, whether you've never tried coding before or if you've got loads of experience. The process of coding a datapack is a bit different to other typical programs. By the end of this tutorial, you'll have made a simple datapack which makes arrows explode when they land!\r\nGetting Started - Setting up an empty datapack\n\nThe first step when creating a datapack is to make a new world to test it in. Go ahead and do that now - make sure that your world has cheats enabled and it is set to creative mode. Once you've created the world, the next step is to find and open your world folder:\r\nSave and quit your world\r\nGo to your world in the Singleplayer menu and hit \"Edit\"\r\nPress \"Open World Folder\"\r\n\r\nThis folder opens contains all the data in your Minecraft world. You should see that there's lots of other subfolders in this folder. Find the one which is called datapacks, and open it.\r\n\r\nThis folder is where the world's datapacks are stored. Create a folder - this will be the root folder of your datapack project. The name doesn't matter. I'm just going to call it Example Datapack. Open this new folder. Inside this folder is where all the data starts from.\r\n\r\n:::tip\r\nBefore we go further, if you have downloaded and installed Visual Studio Code and the relevant extensions, then you should be able to right click inside the new folder that you created and \"Open in Code\". If not, then no worries, it isn't required.\r\n:::\r\n\r\nThe first file we want to create is the pack.mcmeta file. This file will tell Minecraft that the folder is a datapack, as well as holding the basic information of the pack. Create pack.mcmeta, and put this inside it:\r\n`json\r\n{\r\n\"pack\":{\r\n\"description\":\"DATAPACK NAME HERE\",\r\n\"pack_format\":48\r\n}\r\n}\r\n`\r\nIf you're interested, here's what this file means:\r\npack is an object containing the metadata of the file.\r\ndescription is the name of your datapack, usually along with a short description of what your pack does.\r\npack_format tells Minecraft what versions this datapack works in. 48 is the latest for 1.21\r\nWriting your first function\r\n:::info\r\nWhat are functions? In short, functions are the majority of what makes up most datapacks. A function is a file containing Minecraft commands. When a function is ran, every command in the function is ran in order. Functions are always ran as an entity (or as the Server) and at a position\r\n:::\r\nLet's get started by writing one simple function. In traditional programming function, let's make a function to show you \"Hello World\" when it is ran.\r\n\r\nCreate a folder in your datapack called data.\nIn the data folder, create a new folder.\nThis folder is your namespace - it will contain all the data specific to your datapack. Usually this needs to have a unique name (one which other people would not have picked), but for this tutorial just call it example.\r\nIn the example folder, create a folder called function. This folder will contain all the mcfunction files.\r\n\r\nYou should now have a folder structure that looks something like this:\r\n`\r\n/world/datapacks/Example Datapack/data/example/function\r\n`\r\n:::warning\r\nIn versions earlier than 1.21, the function folder should be called functions, due to some pesky name changes Mojang introduced in a recent update.\r\n:::\r\n\r\nOnce you're sure that's correct, you can start writing the actual function.\nIn the function folder, create an empty file called hello_world.mcfunction. Open this file with any text editor (we reccomend Visual Studio Code)\r\n\r\nInside hello_world.mcfunction, put the following:\r\n`\r\nShow the player Hello World on their screen\r\ntitle @s title \"Hello World!\"\r\nGive the player a diamond\r\ngive @s diamond\r\n`\r\nIt's that simple! Once you save that file, rejoin your world and then run /reload, you should be able to use the following command to run the function:\r\n`\r\n/function example:hello_world\r\n`\r\nWhat's next?\r\nNow you know how to create a basic function and run it, we'll next start to think about how to create our project. For more advanced projects, this can sometimes be the most difficult part. Luckily for us, what we want to create won't be too difficult.\r\n\r\nLet's break down the idea into smaller steps. Remember, we want to create a datapack which makes arrows explode.\r\n\r\nDetect when an arrow lands on the ground. We can do this by running a command on a loop which will select any arrow on the ground and then run a function.\r\nCreate an explosion. This is as simple as summoning a TNT at the position of the arrow.\r\nRemove the arrow. If you don't do this, then it will keep on exploding forever.\r\n\r\nThe next steps of this guide will guide you through the typical process of each of those steps.\r\nRunning functions on a loop\r\nThe first step on our list is to detect arrows which land on the ground. To do this, we need to run a command on a loop. Luckily, Minecraft makes this pretty easy for us.\r\n\r\nFirstly, let's make the function which you want to run on a loop. In the function folder, create a new mcfunction file - call this one loop.mcfunction.\nFor now, let's just make it say \"Hi\" every time it loops. You can do this by putting this in the new function:\r\n`\r\nsay Hi\r\n`\r\n\r\nTo make this function run on a loop, we need to create a JSON file which tells Minecraft \"run this command every tick\" (every tick = 20 times per second)\r\n\r\nIn the data folder, create the minecraft folder.\r\nIn the minecraft folder, create a tags folder\r\nIn the tags folder, create a function folder\r\nIn the new function folder, create a new file: tick.json\r\n\r\ntick.json is NOT a function. In tick.json, we are going to put a list of functions which we want to run every tick. If you put any commands in tick.json, it will break your pack.\r\n\r\nIn tick.json, put the following:\r\n`json\r\n{\r\n\"values\":[\r\n\"example:loop\"\r\n]\r\n}\r\n`\r\nvalues is a list of function references which will be run on a loop.\r\nexample:loop is a reference to the loop.mcfunction file we created earlier. example refers to the namespace (the folder in data), and loop refers to the mcfunction file name.\r\n\r\nIf you save this file, go back to your world, and run /reload, you should see that the chat is being spammed with \"Hi\" over and over again!\r\nSelecting the arrows\r\nNow we've created a function which will run infinitely on a loop, we can move on to detecting when an arrow is in the ground.\r\n\r\nAs far as the game is concerned, an arrow is an enity, just like a pig, cow or zombie. Minecraft gives us a special way to select any types of entities with target selectors. Once we've selected an entity, we can use the /execute command to run a command as the entity.\nWe can use these to select all arrows which are in the ground, and then run a command to make them explode (and then remove themselves).\r\n\r\nAs mentioned, to select an entity, we need to use a target selectors. I'm going to teach you a bit about target selectors. You should pay attention here, but if you only want the code, scroll past this section.\r\nWhat are target selectors?\r\nTarget selectors are a special bit of code we can use to find an entity in the world. They all start with an @ symbol. There are 6 base target selectors:\r\n\r\n| Target Selector | Description |\r\n|---|---|\r\n| @e | All Entities - By itself, this selector will select every single entity which is currently loaded in the world |\r\n| @s | This Entity - This selector will select the entity which is currently running the command. For example, if I run a command as @s, then it will run the commands as me. |\r\n| @a | All Players - This selects all currently online players. (All players are always loaded in the world). |\r\n| @r | Random Player - This selects one random player. |\r\n| @p | Nearest Player - This selects the nearest player to the position this command is ran from. |\r\n| @n | Nearest Entity - This selects the nearest entity (player or non-player) to the position this command is ran from. |\r\n\r\nOn it's own, a base target selector (like in the table) does not do much. We can narrow down the selection even more by using criteria. Criteria are put in square brackets after the base selector.\nFor example, we can use @e with a type criteria to select all entities of a certain type - for example, @e[type=minecraft:cow] would select all cow entities.\r\n\r\nI'm not going to explain every single criteria you can use - you can view a list here. These are the basic ones which you might see quite often:\r\n\r\n| Criteria | Description |\r\n|---|---|\r\n| [type=minecraft:arrow] | Entity Type - This criteria will narrow down the selection to only include entities of a certain type. For good pack optimisation, you should use this often. |\r\n| [distance=..5] | Distance to entity - This criteria will only include entities based on their distance to their distance to the current position. .. can be used to represent a greater/less than symbol - for example, ..5 means less than 5 blocks away. |\r\n| [limit=2] | Limit selection - Using the limit criteria, you can make specify a max amount of entities to be selected. This is often used in conjunction with the sort criteria. For example, @e[sort=nearest,limit=1] would select the nearest entity of any type. |\r\n| [nbt={key:value}] | Entity Data - This criteria will select entities if their NBT (entity data) matches a pattern. |\r\nHow are we going to use them?\r\nWe can use these selectors to only select arrows which are in the ground. We can select all arrows with @e[type=arrow], but this will also include arrows in the air. To select arrows in the ground, we can check if they have the data {inGround:1b}, so we would use @e[type=arrow,nbt={inGround:1b}]\r\n\r\nThis target selector can be used in an execute command to run a command as the entity. Try putting this in your loop.mcfunction:\r\n`\r\nexecute as @e[type=arrow,nbt={inGround:1b}] at @s run say I'm an arrow, I'm in the ground!\r\n`\r\nReload your datapack and fire an arrow at at a block. You should see that your chat is spammed with messages, meaning that we successfully selected arrows in the ground, and executed a command as them!\r\nMake it go boom!\r\nNow we can move onto the fun part! We have a simple command which will run another command as any arrow in the ground. We only need to do two things with this command:\r\nSpawn an explosion at the position of the arrow\r\nKill the arrow so that it only explodes once\r\n\r\nTo create an explosion in Minecraft, we can simply summon a TNT entity. When a TNT entity is summoned, it will explode instantly.\r\n`\r\nexecute as @e[type=arrow,nbt={inGround:1b}] at @s run summon tnt\r\n`\r\n\r\nThen, we just need to copy this command and make it kill the arrow after the explosion has happened. This is as simple as it sounds - we can use /kill to remove the arrow. Your finished loop.mcfunction should look like this:\r\n`\r\nexecute as @e[type=arrow,nbt={inGround:1b}] at @s run summon tnt\r\nkill @e[type=arrow,nbt={inGround:1b}]\n`\r\n\r\n:::info\r\nIn reality, this method isn't the best one to use. Instead of having two commands for this, you can just execute a function as the arrow which will summon the TNT at @s's position, and then kill @s. By only using the @e selector once and then referring to @s, you remove extra stress from the computer. For now, it doesn't matter - this guide is designed to give you a better idea of the logic rather than the little details\r\n:::\r\n\r\nYou're done! Once you /reload your pack, you should be free to play around with a simple exploding arrows datapack which you made with the help of this tutorial. Take a break to play around with it - you deserve one!\r\n\r\nAnd when you want to move on to other datpack ideas you might have, feel free to join our Discord server for extra support from our team of helpers. We're more than happy to help you on your journey to creating awesome Minecraft datapacks!","tags":[],"versions":"latest","url":"/guide\\getting-started\\"},{"title":"Adding Jukebox Songs","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nHow to add custom jukebox songs\r\nIn this guide, we will not only learn how to create custom jukebox songs, but also how to give yourself a custom music disc item and implement custom sounds!\r\n\r\nThis will only work in 1.21+, as custom enchantments were added in the snapshot 24w21a.\r\n:::info\r\nThis guide requires you to have atleast a small understanding of datapacks, if you don't understand this guide, you can read the Getting Started guide.\r\n:::\r\nSetting up the datapack\r\nTo start you will need a basic datapack, if you don't know how to make one, see the Getting Started guide.\r\n\r\nFirstly, we are going to create the actual jukebox song file in the directory data/ /jukebox_song/. The file can be named whatever, but it has to be in the .json file format. For the purposes of this tutorial, we're gonna call it example_jukebox_song.json. Inside, we will put and configure this:\r\n\r\n`json\r\n{\r\n\"comparator_output\": 13,\r\n\"description\": {\r\n\"text\": \"ARTIST - SONG NAME\"\r\n},\r\n\"length_in_seconds\": 69.0,\r\n\"sound_event\": {\r\n\"sound_id\": \":\"\r\n}\r\n}\r\n`\r\n\r\nThis is a run-down of the fields in that file:\r\ncomparator_output: A value between 1 and 15, representing the redstone output when a comparator is placed next to the jukebox playing this song.\r\ndescription: The description of the enchantment (should be a JSON text component).\nlength_in_seconds: The length of the song (in seconds)\r\nsound_event: The ID of the sound (from the resourcepack) to play.\r\n\r\nIf you don't understand what to put in sound_event, dont worry, the next part is going to focus specifically on this!\r\nAdding custom music - Resourcepack\r\nThis part is going to be optional in the case, that you only want a vanila Minecraft sound to play from the jukebox. In that case, change the sound_id in the example_jukebox_song.json file from the datapack to the sounds ID. (for example: \"sound_id\": \"minecraft:music_disc.cat\").\r\n\r\nIf you don't want to use a default Minecarft sound, then a resource pack is required to add the custom sound (in this case, the music on the disc) to Minecraft, so that the datapack can read it.\r\n\r\n:::info\r\nMinecraft handles sound in .ogg files. There are many different converters you can use to convert an MP3, WAV, or other audio file to .ogg.\r\n:::\r\n\r\nYou need to add your .ogg file (the audio of your music disc) to assets/ /sounds/.ogg. Make sure that   and   are the same values you put in the datapack's JSON file (the example_jukebox_song.json file in our case).\r\n\r\nThen, if you haven't already, you need to create a sounds.json file at the position assets/ /sounds.json. This file tells Minecraft what audio files map to what IDs. Put this inside:\r\n`json\r\n{\r\n\"music_disc.\": {\r\n\"sounds\": [\r\n{\r\n\"name\": \":\",\r\n\"stream\": true\r\n}\r\n]\r\n}\r\n}\r\n`\r\nSee it in action\r\nOnce you save the above files, you need to activate the resource pack, and reload it with the keybind F3 + T in-game. You will also need to leave and rejoin the world to update the datapack.\r\n\r\n:::warning\r\nFor this to work, you will need to leave and rejoin the world, just using the /reload command won't do the trick here!\r\n:::\r\n\r\nTo get the music disc, you need to get an item which has the minecraft:jukebox_playable component. This can be any item - it doesn't have to necessarily be an already existing music disc (but you can if you want)\r\n`ansi\r\ngive @s minecraft:YOUR_ITEM[minecraft:jukebox_playable={song:\":example_jukebox_song\"}]\r\n`\r\n\r\nThen, you can use this item on a jukebox, and it should start playing your song!","tags":[],"versions":"latest","url":"/guide\\adding-new-features\\jukebox-songs\\"},{"title":"Recipes for your Custom Items","content":"This page is validated and up to date with Minecraft Java: 1.21\n\nThere are two ways to add recipes to your custom items, they differentiate based on what Minecraft version you are developing for. The first one is for the Minecraft version 1.20.5+ (Datapack format 34+), here items can be directly specified in the output with item components. The second method is for all version before 1.20.5.\r\nAfter 1.20.5\r\nThis is the easier method of the two, only requiring you to put the item id and components into the recipe output.\r\n\r\n:::info\r\nNote that there is currently no way to specify item components in the recipe's input items, only in the result. Meaning you custom item can't (easily) be crafted out of different custom items.\r\n:::\r\n\r\nThe instructions here will be very simple, requiring you to only create one file, that being the actual crafting recipe file. This file can be named whatever, but has to end in the .json file format.\r\n\r\nHere is an example of a recipe with the output of a custom item:\rscuteaxe.json\r\n`json\r\n{\r\n\"type\": \"minecraft:crafting_shaped\",\r\n\"pattern\": [\r\n\"ttt\",\r\n\" s \",\r\n\" s \"\r\n],\r\n\"key\": {\r\n\"t\": {\r\n\"item\": \"minecraft:turtle_scute\"\r\n},\r\n\"s\": {\r\n\"item\": \"minecraft:stick\"\r\n}\r\n},\r\n\"result\": {\r\n\"id\": \"minecraft:iron_pickaxe\",\r\n\"count\": 1,\r\n\"components\": {\r\n\"minecraft:tool\": {\r\n\"rules\": [\r\n{\r\n\"blocks\": \"minecraft:turtle_egg\",\r\n\"speed\": 6,\r\n\"correct_for_drops\": true\r\n}\r\n],\r\n\"default_mining_speed\": 3,\r\n\"damage_per_block\": 1\r\n},\r\n\"minecraft:item_name\": \"\\\"{\\\\\\\"text\\\\\\\":\\\\\\\"sCUTE-axe\\\\\\\"}\\\"\"\r\n}\r\n}\r\n}\r\n`\r\n\r\nIn the example, you can see that the result has a \"components\" field, where you can list the components that your custom item should have. I can also recommend a useful site for generating recipes with specified components: https://misode.github.io/recipe/\r\nBefore 1.20.5\r\n\r\nThis part of the guide assumes that you already knowledge some basic commands and how crafting recipes and advancements work.\r\n\r\nTo create a crafting recipe for one of your custom items, you need just a little bit more than for a normal recipe. This is because of the fact that you coudn't use NBT in recipes before 1.20.5 dropped, so thats why we need a small workaround.\r\n\r\nLets create the recipe first:\rscuteaxe.json\r\n`json\r\n{\r\n\"type\": \"minecraft:crafting_shaped\",\r\n\"pattern\": [\r\n\"ttt\",\r\n\" s \",\r\n\" s \"\r\n],\r\n\"key\": {\r\n\"t\": {\r\n\"item\": \"minecraft:turtle_scute\"\r\n},\r\n\"s\": {\r\n\"item\": \"minecraft:stick\"\r\n}\r\n},\r\n\"result\": {\r\n\"item\": \"minecraft:knowledge_book\"\r\n}\r\n}\r\n`\r\n\r\nAs mentioned before, we can't use the custom item as output, so we use the knowledge book as a placeholder.\r\n\r\nTo switch the knowledge book with our custom item, we need an advancement to react when we craft the recipe. For this we use the recipe_crafted trigger.\r\nWith some trickery, here it is also possible to make the ingredients require certain nbt.\rcraft_scuteaxe.json\r\n`json\r\n{\r\n\"criteria\": {\r\n\"requirement\": {\r\n\"trigger\": \"minecraft:recipe_crafted\",\r\n\"conditions\": {\r\n\"recipe_id\": \":scuteaxe\"\r\n}\r\n}\r\n},\r\n\"rewards\": {\r\n\"function\": \":craft_scuteaxe\"\r\n}\r\n}\r\n`\r\n\r\nLasty we have to make the actual function that handles the item switching.\r\nYou can either use a give command or, what I recommend more, define the item in a separate loot table and then use the loot command.\rcraft_scuteaxe.mcfunction\r\n`\r\nclear @s knowledge_book\r\nadvancement revoke @s only :craft_scuteaxe\r\nAny code can go here, this will run when the player crafts the item.\r\nloot give @s loot :\nYou can also you a give command here instead\r\n`\r\n\r\n:::tip\r\nIf you want to create more recipes, you can just copy, rename and configure all the files we've just created.\r\n:::\r\n\r\nAnd that's it, you should now have a custom working recipe for your item.","tags":[],"versions":"latest","url":"/guide\\adding-new-features\\crafting-custom-items\\"},{"title":"Credits","content":"Credits\r\nThe Datapack Wiki is managed by Datapack Hub, based on an original design and idea by Aandeel. All of the content on this wiki is made possible thanks to the dedication of our awesome contributors! You can contribute to this wiki on our GitHub - click the Edit button on any page.\r\nAdministrators\r\nThese people run and develop the site, making any and all important decisions.\r\nSilabear\r\nCobblestone\r\nAandeel\r\nEditors\r\nThese people are in charge of what contributions are added to the site, as well as planning and writing new pages.\r\nGears\r\nContributors\r\nThese people have written or edited pages for the wiki or guides.\r\nDiamond\r\nHeDeAn\r\n\r\n:::note\r\nIf you're contributing, feel free to add your username to this page! You can contribute by clicking the Edit button on any page.\r\n:::","tags":[],"versions":"latest","url":"/credits\\"},{"title":"Site Development","content":"Site Meta and Contribution\r\nThis page is meant to be an introduction for contributors to the wiki. In it is multiple examples which you can examine raw in the site source code.\r\nContributing\r\nThe full contributing guide is available on a separate page here.\r\n\r\nTo contribute, please fork the Datapack-Hub/wiki repo on GitHub, make changes in your fork, then submit a pull request, explaining your changes.\r\nFormatting\r\nThis section goes over how to format wiki pages. We like consistency, so please read carefully and use these features to your advantage:\r\nBasic formatting\r\n\r\nAll content on the website (other than navbar, sidebar and things that are not the actual wiki pages) are made using a technology called mdsvex. This technology enables people like you to insert markdown with svelte components.\r\n\r\nEach page is made of 3 parts:\r\n\r\nfront matter (metadata about the page such as title)\r\ncontent (the actual content of the page)\r\ncomponents (custom components that allow for interactivity or other features not able to be reproduced with markdown)\r\n\r\nEach is crucial to making the page look and feel how it does.\r\nFormatting Examples\n\nExample Markdown used on the wiki:\r\n`md\r\nHeading 1\r\nParagraph text under heading 1\r\nHeading 2\r\nParagraph text under heading 2\r\nHeading 3\r\nParagraph text under heading 3\r\n\r\nClick the link to go to the main page\r\n\r\nI have some inline code for you. Here's some more:\n\\`json\r\n{\r\n\"this.is\":\"cool!\"\r\n}\r\n\\`\r\n\r\nList Item\r\nAnother List Item\r\n\r\nFirst List Item\r\nSecond List Item\r\n\r\n| Which page? | How much I hate formatting it? |\r\n|---|---|\r\n| This one | Very much |\r\n| Other ones | Not as much |\r\nCustom Elements\r\n:::info\r\nI am a very important piece of information. In this box, you might find educational info, or explanations for features.:::\r\n\r\n:::warning\r\nThe stuff in this box is probably very important. You should read this box - it might contain information which affects your datapack.:::\r\n\r\n:::tip\r\nYou can do this really cool thing. It'll make your life a lot easier! But don't worry - it's only optional.:::\n\nThis page is validated and up to date with Minecraft Java: 1.21\n\nResult of the markdown:\n\nHeading 1\r\nParagraph text under heading 1\r\nHeading 2\r\nParagraph text under heading 2\r\nHeading 3\r\nParagraph text under heading 3\r\n\r\nClick the link to go to the main page\r\n\r\nI have some inline code for you. Here's some more:\n`json\r\n{\r\n\"this.is\":\"cool!\"\r\n}\r\n`\r\n\r\nList Item\r\nAnother List Item\r\n\r\nFirst List Item\r\nSecond List Item\r\n\r\n| Which page? | How much I hate formatting it? |\r\n|---|---|\r\n| This one | Very much |\r\n| Other ones | Not as much |\r\nCustom Elements\r\n:::info\r\nI am a very important piece of information. In this box, you might find educational info, or explanations for features.:::\r\n\r\n:::warning\r\nThe stuff in this box is probably very important. You should read this box - it might contain information which affects your datapack.:::\r\n\r\n:::tip\r\nYou can do this really cool thing. It'll make your life a lot easier! But don't worry - it's only optional.:::\n\nThis page is validated and up to date with Minecraft Java: 1.21","tags":[],"versions":"latest","url":"/contribute\\"}]