---
title: "Git Practices"
description: "This page is an introduction to our Git practices a page for the wiki."
---

# Git Practices

**Last Updated:** 12-11-2024

This page is an introduction to how we use Git in the wiki repository. In order to keep the wiki consistent and
reputable, we have a few rules that we follow.

Git provides a lot of features that are great for collaboration, and we try to use them as much as possible.

## Branching and PRs

Branches are a great way to work on the wiki without introducing unfinished pages, changes, etc. Branches allow you to
work on a page without affecting the main (production) branch and allow us to review your changes before they are
merged.

### Branch Naming

We use `kebab-case` for branch names. This means that the branch name should be all lowercase and use hyphens to
separate words. For example, if you are working on a page called "Adding New Features", the branch name should be
`adding-new-features`.

### Branch Workflow

When you are ready to merge your changes into the main branch, you should create a pull request (PR) and assign it to a
reviewer. The reviewer will review your changes and either approve or request changes. Once approved, the changes will
be merged into the main branch.

We recommend deleting the branch after it has been merged into the main branch. This will keep the repository clean and
reduce confusion. An exception to this is if you are working on a very large feature that will take a while to merge, or
if you plan to merge multiple features from one branch.

## Commit Messages

Commit messages are a great way to keep track of what changes have been made to the wiki. Summarize the changes in the
commit message and use the imperative mood.

For example, if you are adding a new page called "Adding New Features", the commit message should be
`Add new page for adding new features`. If you are fixing a typo on a page, the commit message could be
`Fix typo in page about adding new features`.

Optionally, you can add a short description of the changes in the commit message. This is not required, but it is
recommended.

## Merging

Whenever you start working on a new branch or features, you should pull the latest changes from the main branch. This
will ensure that you have the most up-to-date changes.

You will likely run into an issue with the `search.json` file, which is used to generate the search index. This file is
generated automatically and should not be manually edited. A solution to this is to remove the `search.json` file and
run the search index generation script. This will regenerate the file and you can commit it.

```
node run ./gen_search_indexes_node.js

OR

bun ./gen_search_indexes.js
```

## Other Important Information

- Always use the `main` branch as the base branch for your PRs. This will reduce the chances of conflicts and ensure
  that your changes are merged correctly.
- Make a description of your changes in your PR.
- Reviewers: Make sure to proofread changes before approving them.
- Reviewers: It's not required, but it's recommended to make sure the changes follow American English for consistency
  sake.
