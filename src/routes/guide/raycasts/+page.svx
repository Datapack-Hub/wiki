---
title: Raycasts
description: "Raycasting is when we shoot a line from the player's eyes in the direction they are looking. We use this to get what the player is looking at, and do something to it, such as spawning an explosion."
---

# Raycasting

Raycasting is when we shoot a line from the player's eyes in the direction they are looking. We use this to get what the player is looking at, and do something to it, such as spawning an explosion.

> This tutorial uses a neat thing called a **recursive function**. A recursive function is a function which runs itself over and over again.

## Raycast to an entity

This method will show you how to find what entity that a player is looking at. This is useful for many reasons - if you wanted to make a gun datapack, you'd need to damage the entity that a player is looking at in order to damage them.

To do this, you have to run a recursive function which will start at the eyes of the player and keep running itself **0.1 blocks forward** until it hits an entity. When it does hit an entity, you can easily get the entity and do something to it.

Firstly, we'll make the function which, when you run it, will **start** the raycast. In this function, we'll want to:

- set the **maximum distance** for the raycast, so it won't go on forever if it never hits an entity.
- run the function at the eyes of the player

To set a maximum distance, we store the maximum amount of times we want the function to run in a scoreboard. Every time the recursive function runs, we want to subtract one from that scoreboard, and only continue if the score is more than 0.

Firstly, you need to create a scoreboard. This should go in your `/reload` function.

```mcfunction
scoreboard objectives add raycast_temp dummy
```

Then, we can use this scoreboard to set the limit of the raycast before we run it.

```mcfunction
tag @s add raycaster

# Set the distance limit on the raycast. (10 x limit in blocks, so 1000 would be 100 blocks)
scoreboard players set .limit raycast_temp 1000

# Start the raycast
execute at @s anchored eyes positioned ^ ^ ^.1 run function <namespace>:raycast

tag @s remove raycaster
```

The `raycaster` tag is used to make sure that the raycast doesn't hit the player who ran it. In the raycast, we check for any entity at the current position which doesn't match the tag.

In the raycast function, we want to check if the function has hit an entity, and if not, run it again until it does, moving a bit forward each time:

```mcfunction
# Remove one from the limit
scoreboard players remove .limit <objective> 1

# Optional - place a particle, to make the raycast leave a trail
particle minecraft:dust 1 0 0 1 ~ ~ ~

# If the raycast has hit an entity, make it say hi
execute as @e[dx=0,tag=!raycaster] run say hi

# If the raycast hasn't hit an entity, continue, but only if the limit is 1 or more (1..)
execute if block ~ ~ ~ #minecraft:replaceable unless entity @e[dx=0,tag=!raycaster] positioned ^ ^ ^0.1 if score .limit <objective> matches 1.. run function <namespace>:raycast
```
