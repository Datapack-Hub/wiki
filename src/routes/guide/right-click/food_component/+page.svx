---
title: Using the Food Component for RC detection
description: "This is one of the best right click detection methods, because you can bind it to ANY item. So why not learn how to use it?"
---

<script lang="ts">
import {Version} from '$lib/reusables';
</script>

<Version>This page is validated and up to date with Minecraft Java: 1.21</Version>

# Pros and cons

**Pros:**

- Can detect clicks from any item
- Works in any world
- Doesn't require additional entities
- Doesn't need to run every tick
- Doesn't attract mobs

**Cons:**

- Only works in 1.20.5+
- Slows player down when holding right click

**Other:**

- Detects up to 20 clicks/second when holding right click
- Bound to the player, not a specific location

# Using the Food Component for Right Click Detection

Using the `food` component for right-click detection is one of the most flexible methods, simply because you can put it on (almost) ANY item. This method is not limited to a single item, like using a coas. You can use any item you want.

This is just a guide, so you'll need to change a few things for your actual datapack:

- Change `<item>` to the item you want to detect
- Change `<namespace>` to your namespace
- Change `<custom_data>` to whatever custom data you want

:::warning
You can use any item for the method, but if the item already has an existing right-click functionality (like placing a block), it will keep that.
:::

The first step will be creating the advancement that detects when a player is "using" (in this case eating) the item, the name can be whatever you want ending in `json`, but for the purpose of this tutorial we will call it `click_food.json`. Then put this file into `data/<namespace>/advancement/`

```json:click_food.json
{
  "criteria": {
    "requirement": {
      "trigger": "minecraft:using_item",
      "conditions": {
        "item": {
          "items": [
            "minecraft:<item>"
          ],
          "predicates": {
            "minecraft:custom_data": {"<custom_data>": true}
          }
        }
      }
    }
  },
  "rewards": {
    "function": "<namespace>:rightclick_run"
  }
}
```

As you can see, the advancement runs a function when it detects a player eating our custom item, so the next step is creating the actual function logic. This is pretty simple, just create a `.mcfunction` file in `data/<namespace>/function/`. Make sure you call the function the same, as you did in the advancement file, in our case `rightclick_run.mcfunction`

You can put whatever commands you want into this function, but make sure you revoke the advancement from the player, so the item can be clicked again.

```mcfunction:rightclick_run.mcfunction
# Revoke the advancement from the player so it can be used again
advancement revoke @s only <namespace>:click_food
# Announce the use of the item in chat, feel free to replace this with whatever
# your logic here...
say I successfully used food component detection!
```

## See it in action!

After `/reload`ing the datapack, we will now need to give ourselves the actual item with the custom food component. (You can run this in the chat to test it, or put it in a function to trigger when you want):

```mcfunction
give @s stick[minecraft:food={nutrition:0, saturation:0, can_always_eat:true, eat_seconds:999999999}, minecraft:custom_data={<custom_data>:true}]
```

## How it works

We've added a food component to our custom stick item, allowing it to be consumed like food. The player won't actually eat it, since `eat_seconds` is set to `999999999`, so it would take them over 30 years. The food component lets the player try to eat it, which can be detected using an advancement. That advancement runs a function which removes the advancement so it can be triggered again next tick, and runs whatever code you want to the item to trigger.
