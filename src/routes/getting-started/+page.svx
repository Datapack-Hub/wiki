<script lang="ts">
import Info from '$lib/reusables/Info.svelte';
import Warning from '$lib/reusables/Warning.svelte';
import Tip from '$lib/reusables/Tip.svelte';
</script>

# Getting Started

If you're new to datapacks, you're at the right place. Looking around, getting into datapack creation might seem confusing, but once you've grasped the basics, you'll be off to a good start.
This Getting Started Page explains step-by-step, how to set up the file structure for a datapack, prominently for the use of `.mcfunction` files.

  
<Info>These docs are still work in progress, please join the Discord Server for any specific help you require.</Info>

## What is a Datapack?

- In hindsight a Datapack is a collection of `.json` files, and `.mcfunction` files, that provides a way to further customise the Minecraft Experience.
- Datapacks can be used to override or add new: 
  - Advancements
  - Dimensions
  - Functions
  - Loot Tables
  - Predicates
  - Item Modifiers
  - Recipies
  - Structures
  - Tags
  - Damage Types
  - World Generation Settings
  - Biomes

## What will you need to make a Datapack?

- A reliable text-editor, we recommend: [Visual Studio Code](https://code.visualstudio.com) with the [Data-Pack Helper Plus (Extention)](https://marketplace.visualstudio.com/items?itemName=SPGoding.datapack-language-server) in conjunction with the [language-mcfunction (Extension)](https://marketplace.visualstudio.com/items?itemName=arcensoth.language-mcfunction). [These extensions will aid in command syntax when making `.mcfunction` files].

## How to set up the base of the Datapack:

1. To start, in the selected world save folder of your choice, go to the world's datapack folder located here: `.minecraft/saves/(world)/datapacks`
2. In this directory, create a new folder. You can name this anything you want.

### The `pack.mcmeta` file:

3. Enter the folder, and create a new file with the name and extention: **`pack.mcmeta`**, this is what Minecraft Reads to identify the file as a datapack.
4. Inside the `pack.mcmeta` file you'll need to paste these lines of code:
```
{
	"pack": {
		"pack_format": 26,
		"description": "(Fill this with your datapack's description.)"
	}
}
```

<Tip>Please note that the <code>pack_format</code> number can change depending on future Minecraft Updates. <bold>26</bold> is the current major release datapack format number.</Tip>

5. Save the `pack.mcmeta` file and in the same directory, create a new file named: **`data`**.
6. Inside the new `data` folder create 2 new folders. One named: **`minecraft`** and another named whater you wish. The name you choose for this folder will impact the way you execute functions in future. So keep it short and simple. examples: **`main`** or **`map`**. This is the folder where we'll be adding all of the `.mcfunction` files. (In these docs, `foo` will be used as the example.)

### Tick and Load `.json` files:

- The `tick.json` file allocates a select file in our yet to be created functions folder to be the designated `.mcfunction` file that runs every tick (A bit like a repeating command block.)
- The `load.json` file allocates a select file in out yet to be created functions folder to be the designated `.mcfunction` file that runs every time the datapack is reloaded in-game with `/reload`.

7. Inside the new `minecraft` folder create another folder named **`tags`**, and inside that another folder named **`functions`**, in this we'll be allocating our `load` and `tick` json files.

* Create a new file called **`load.json`**, and inside paste this code:
```
{
	"values": [
		"foo:load"
	]
}
```
> Replace the `foo` with the name of the folder you chose that effects your functions. (Provided examples were **`main`** or **`map`**)


* And in the same folder create another new file called **`tick.json`**, and inside pase this code:
```
{
	"values": [
		"foo:tick"
	]
}
```
> Replace the `foo` with the name of the folder you chose that effects your functions. (Provided examples were **`main`** or **`map`**)

### Working with `.mcfunction` files:

8. Back to the `data` folder, go into the folder you named for your functions, and create a folder within named: **`functions`**
9. This `functions` folder is where all of your `.mcfunction` files will be held. Create a new file and name it **`tick.mcfunction`** and another named **`load.mcfunction`** These are the two files we setup the allocation for prior.


### Final File Structure:

```md
`.minecraft/saves/(world)/datapacks`
    └(your-datapack-name)
      ├`pack.mcmeta`
      └(data)
        ├(minecraft)
        |  └(tags)
        |    └(functions)
        |      ├`load.json`
        |      └`tick.json`
        └(foo)
           └(functions)
             ├`load.mcfunction`
             └`tick.mcfunction`
```

To test that the datapack works, in the `load.mcfunction` file, type `say hello new datapack`. Save it and in-game, type the command `/reload`, If everything is setup correctly, the Say command should execute.

<Warning>Please note, that <code>.mcfunction</code> files do <bold>NOT</bold> use the <bold>/</bold> prefix for commands. Adding a <code>/</code> will cause the datapack to not load, until it is removed from all commands that contain the prefix.</Warning>
