---
title: Getting Started
description: "If you're new to datapacks, you're at the right place. Looking around, getting into datapack creation might seem confusing, but once you've grasped the basics, you'll be off to a good start."
---

<script lang="ts">
import {Info, Warning, Tip, Version} from '$lib/reuseables';
</script>
<Version>This page is validated and up to date with Minecraft Java: 1.21</Version>

# Getting Started
If you're new to datapacks, you're at the right place. Looking around, getting into datapack creation might seem confusing, but once you've grasped the basics, you'll be off to a good start.

This Getting Started Page explains step-by-step, how to set up the file structure for a datapack, prominently for the use of `.mcfunction` files.

## What is a Datapack?

In hindsight a Datapack is a collection of `.json` files, and `.mcfunction` files, that provides a way to further customise the Minecraft Experience. Datapacks can be used to override or add new: 
  - Advancements
  - Dimensions
  - Functions
  - Loot Tables
  - Predicates
  - Item Modifiers
  - Recipes
  - Structures
  - Tags
  - Damage Types
  - World Generation Settings
  - Biomes
  - Enchantments [1.21+]

## Tools required for this tutorial
You will need a reliable text-editor, we recommend: [Visual Studio Code](https://code.visualstudio.com) with the [Data-Pack Helper Plus (Extension)](https://marketplace.visualstudio.com/items?itemName=SPGoding.datapack-language-server) in conjunction with the [language-mcfunction (Extension)](https://marketplace.visualstudio.com/items?itemName=arcensoth.language-mcfunction). (These extensions will aid in command syntax when making `.mcfunction` files).

## Setting up the base
1. To start, in the selected world save folder of your choice, go to the world's datapack folder located here: `.minecraft/saves/(world)/datapacks`
2. In this directory, create a new folder. You can name this anything you want.

### The `pack.mcmeta` file:
3. Enter the folder, and create a new file with the name and extension: **`pack.mcmeta`**. This is what Minecraft reads to identify the datapack.
4. Inside the `pack.mcmeta` file you'll need to paste these lines of code:
```json
{
	"pack": {
		"pack_format": 48,
		"description": "(Fill this with your datapack's description.)"
	}
}
```

<Tip>Please note that the <code>pack_format</code> number can change depending on future Minecraft Updates. <code>41</code> is the current major release datapack format number for 1.20.6.</Tip>

5. Save the `pack.mcmeta` file and in the same directory, create a new folder called **`data`**.
6. Inside the new `data` folder create 2 new folders. One named: **`minecraft`** and another named whatever you wish (the only allowed characters are `lowercase a-z`, `0-9`, `_`, `-`). The name you choose for this folder will impact the way you execute functions in future. Keep it simple, but **unique to your project**. If another datapack uses a similar name, then there will be compatibility issues. This folder that you create is called your **__namespace__**.

### `tick` and `load` `.json` files:
- The `tick.json` file basically tells the game which `.mcfunction` file (we'll make this later) to run in an infinite loop, or rather 20 times every second
- The `load.json` file basically tells the game which `.mcfunction` file to run when the datapack loads. This is useful to set up all of our data.

7. Inside the new `minecraft` folder create another folder named **`tags`**, and inside that another folder named **`functions`**, in this we'll be allocating our `load` and `tick` json files.

Create a new file called **`load.json`**, and inside paste this code:
```json
{
	"values": [
		"<namespace>:load"
	]
}
```


In the same folder create another new file called **`tick.json`**, and inside paste this code:
```json
{
	"values": [
		"<namespace>:tick"
	]
}
```
<Warning>In both above examples, make sure to replace &lt;namespace&gt; with your namespace which you created in Step 6.</Warning>

### Working with `.mcfunction` files:

8. Back to the `data` folder, go into your namespace folder, and create a folder within named: **`functions`**. This `functions` folder is where all of your `.mcfunction` files will be held.
9. Create a new file and name it **`tick.mcfunction`**, and another named **`load.mcfunction`** (These are the two functions which we specified in `tick.json` and `load.json` in Step 7.)


### Final File Structure:

```json
.minecraft/saves/(world)/datapacks
  └(your-datapack-name)
    ├pack.mcmeta
    └(data)
      ├(minecraft)
      |  └(tags)
      |    └(function)
      |      ├load.json
      |      └tick.json
      └(<namespace>)
        └(function)
          ├load.mcfunction
          └tick.mcfunction
```

To test that the datapack works, in the `load.mcfunction` file, type `say hello new datapack`. Save it and in-game, type the command `/reload`, If everything is setup correctly, the Say command should execute.

<Warning>Please note, that <code>.mcfunction</code> files do <bold>NOT</bold> use the <bold>/</bold> prefix for commands. Adding a <code>/</code> will cause the datapack to not load, until it is removed from all commands that contain the prefix.</Warning>
