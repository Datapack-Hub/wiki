---
title: Tags
description: "Registry tags, not to be confused with [entity tags](/command/tag), are essentially lists of groups such as blocks, items, entity types, etc. They use JSON format and are located in the `data/<namespace>/tags/<category>` folder."
---

<script lang="ts">
import {Info, Warning, Tip, Version} from '$lib/reuseables';
</script>

<Version>This page is validated and up to date with Minecraft Java: 1.20.6</Version>

# Tags
Registry tags, not to be confused with [entity tags](/command/tag), are essentially lists of groups such as blocks, items, entity types, etc. They use JSON format and are located in the `data/<namespace>/tags/<category>` folder.

## Special tags
Minecraft uses some tags internally for certain behaviours. These tags are located in the `minecraft` namespace. For example:
- any functions in the `#minecraft:load` function tag will be automatically run when a datapack is loaded
- the `#minecraft:minable/pickaxe` block tag lists blocks which are mined faster using a pickaxe.  

In many cases, modifying these special tags allows you to configure certain aspects of how Minecraft behaves.

## Registries
Tags group various types in a specific registry (category). 

This list shows all of the possible registry types, as well as the path their tags should be put in.
- Items (`/tags/items`)
- Blocks (`/tags/blocks`)
- Entity types (`/tags/entity_types`)
- Functions (`/tags/functions`)
- Fluids (`/tags/fluids`)
- Game Events (`/tags/game_events`)
- Chat Types (`/tags/chat_type`)
- Damage Types (`/tags/damage_type`)
- Banner patterns (`/tags/banner_patterns`) 
- Cat variants (`/tags/cat_variant`)
- Enchantments (`/tags/enchantment`) 
- Goat horns (`/tags/instrument`) 
- Paintings (`/tags/painting_variant`) 
- Entity POI (`/tags/point_of_interest_type`) 
- Biome (`/tags/worldgen/biome`) 
- Flat world preset (`/tags/worldgen/flat_level_generator_preset`) 
- Structures (`/tags/worldgen/structure`) 
- World preset (`/tags/worldgen/world_preset`) 

## JSON format
Tags have a very simple format, with two fields.

### `replace`
`replace` is a boolean field which decides whether the tag should replace other tags with the same path, or merge with them. For example, if `"replace": true` is added to the `tick.json` function tag, only the tick functions in that datapack would load, as it would replace all other defined tick tags. If `replace` is false, it will merge with any values in `tick.json` within other packs.
`replace` is an optional field, and if not specified will default to `false`.

### `values`
Values (`values`) is an array containing everything to group under this tag. Each element is a string, containing either the ID of the entry (such as `minecraft:diamond_block`), or the ID of another tag, beginning with a `#` (such as `#minecraft:logs`).

### Example
Here is an example tag, located in `data/example/tags/items/wood.json` (`example` is the namespace being used).  
<Info>
`#minecraft:logs` and `#minecraft:planks` are two item tags provided by Minecraft.
</Info>

```json
{
  "replace": true,
  "values": [
    "#minecraft:logs",
    "#minecraft:planks",
    "minecraft:chest",
    "minecraft:stick"
  ]
}
```
