---
title: JSON Text
description: Styled text in Minecraft commands is done through a JSON text format.
version: 1.21.4
---

# JSON Text
Styled text (bold, underline, colours, etc) is represented as JSON in Minecraft. A JSON text component is a way to format styled text in Minecraft commands, and is used in many places such as `/tellraw`, `/title`, and more.

Instead of just using standard text (for example `"Hello World"`), we can use JSON text to format the text in a variety of ways, including colours, text effects, click events, hover events, language-based text, accessing NBT data, and more.

## Format
A JSON text component is formatted as either an object (`{"text":"Hello World","color":"red"}`), or an array of objects (`[{"text":"Hello"},{"text":"World"}]`). An object could just be a normal string (`["Hello", "World"]` is valid JSON text). 

If the JSON text component is an array, then all the objects inherit the style from the first object. For instance, if the first object in an array is styled to be red, then all the other objects in the array will also be red unless specified otherwise. 

### Content sources
The actual text of a JSON text object can be either static text or from a source such as NBT or scoreboard. Every object requires one of the following:
- `"text":"<text>"`: A simple string of text.
- `"score":{"name":"<player>","objective":"<objective>"}`: The score of a player in an objective. In some cases, `name` can be set to `"*"`, which will access the score of the player viewing the text.
- **NBT**: This will display the value of an NBT tag. If `"nbt"` is used in a JSON text object, then one of `"storage"`, `"entity"`, or `"block"` is also required. The following properties should be used:
  - `"nbt":"<path>"`: The path to the NBT value. This is required - it should be a string value following the NBT path format.
  - `"storage":"<namespace:storage>"`: The storage to get the NBT value from.
  - `"entity":"<selector>"`: The entity to get the NBT value from.
  - `"block":"<x> <y> <z>"`: The block to get the NBT value from.
  - `"interpret":(true/false)`: If true, then the NBT value's text will be parsed and interpreted as a JSON text object. Defaults to false.
- `"selector":"<selector>"`: The name of a player or entity. 
- `"translate":"<key>"`: A translation key from language files defined in a resource pack. This will display the value of the key in the player's selected language.
  - `with`: This can also optionally be used to insert arguments into the translation key. This should be an array of JSON text objects.
  - `fallback`: This can also optionally be used to specify what to display if the translation is not found. If this is not specified, the key itself will be displayed if the translation is not found. This should be a string value.
- `"keybind":"<keybind id>"`: The key which a player has bound to a keybind. (For example, `key.jump` would show the text `Space`, assuming the player has not changed the keybind).

**Example**: This JSON text object will display the value of the path `ShopData.Name` in the NBT storage `minecraft:xyz`:
```json
{"nbt":"ShopData.Name","storage":"minecraft:xyz"}
```

### Style properties
The following properties can be used in a JSON text object to change the **style** of the text:
- `color`: The colour of the text. This can be one of the 16 standard colours (e.g `"red"`, `"light_purple"`, etc.), or a hex colour code (e.g `"#ff0000"`).
- `bold`: Whether the text is bold. This can be `true` or `false`.
- `italic`: Whether the text is italic. This can be `true` or `false`.
- `underlined`: Whether the text is underlined. This can be `true` or `false`.
- `strikethrough`: Whether the text is strikethrough. This can be `true` or `false`.
- `obfuscated`: Whether the text is obfuscated. Obfuscated text applies a special glitch effect to the text. This can be `true` or `false`.

**Example**: This text will be "Hello World", in red, bold, and strikethrough:
```json
{"text": "Hello World", "color": "red", "bold": true, "strikethrough": true}
```

### Interactivity properties
The following properties can be used in a JSON text object to add **interactivity** to the text:
- `insertion`: Can be used to specify text to be inserted into the chat when the text is shift-clicked. This should be a string value.
- `clickEvent`: Can be used to specify an action to be performed when the text is clicked. This should be an object with the following properties:
  - `action`: The action to be performed. This can be one of the following:
    - `"open_url"`: Opens the url in `value` in the player's web browser.
    - `"run_command"`: Runs the command in `value` (the player needs permission to run the commands, and this excludes commands like /say or /tell which make the player send something to chat).
    - `"suggest_command"`: Opens and inserts the contents of `value` into the player's chat box.
    - `"copy_to_clipboard"`: Copies `value` to the clipboard.
    - `"change_page"`: (books only) Changes the page of the book to the page specified in `value`.
  - `value`: The value of the action. This should be a string value.
- `hoverEvent`: Can be used to specify what happens when a player hovers over the text. This should be an object with the following properties
  - `action`: The action to be performed. This can be one of the following:
    - `"show_text"`: Shows the text in `contents` in a tooltip by the player's mouse.
    - `"show_entity"`: Shows the entity in `contents` in a tooltip by the player's mouse.
    - `"show_item"`: Shows the item in `contents` in a tooltip by the player's mouse.
  - `value`: The value of the action. This changes based on the `action`:
    - If `"show_text"` is the action, this should be a JSON text object or array.
    - If `"show_entity"` is the action, this should be an object which represents the entity to be displayed in the tooltip. This needs the properties `"id"`, `"type"`, and `"name"`. This is used for the `selector` component type
    - If `"show_item"` is the action, this should be an object which represents the item to be displayed in the tooltip. This needs the properties `"id"`, `"count"`, `"components"`.

**Example**: This text will be "Click me", in blue, and when clicked, it will run the command `/say Hello`:
```json
{"text": "Click me", "clickEvent": {"action": "run_command", "value": "/say Hello"}}
```

### Other
- `extra`: This property can be used to add another JSON text object after, which inherits all the styles and interactivity from the parent object.
- `separator`: If the text source returns multiple values (e.g. multiple entities with the `selector` source, or multiple NBT values with the `nbt` source), this can be used to specify the separator between the values. This should be a string value.

## JSON text generators
Writing JSON text manually can be tedious - there are numerous generators which can be used to quickly create JSON text objects. Here are our recommendations:
- [Minecraft Tools](https://minecraft.tools/tellraw.php)
- [MinecraftJSON.com](https://minecraftjson.com/)
- [Misode](https://misode.github.io/text-component)