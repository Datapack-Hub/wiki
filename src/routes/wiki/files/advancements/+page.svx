---
title: Advancements
description: In a datapack, we can create advancements, which can additionally be used to detect events.
---

<script lang="ts">
import {Version} from '$lib/reusables';
</script>

<Version version="1.21.4"/>

# Advancements
Advancement files are used to create in-game advancements. These can have display properties to make them visible to the player, like how vanilla advancements work. In many function datapacks, we can use hidden custom advancements to detect events (e.g player attacks entity) and then run a function.

Advancements can be stored in trees. This means that an advancement can have parent and children advancements. This tree format is good for showing progression in different areas of the game, as well as allowing you to have custom advancment tabs.

Advancement files are JSON files stored in the `/data/<namespace>/advancement` folder.

## JSON Format
Each advancement is represented by a JSON object stored in the advancement JSON file. The advancment JSON object can have the following fields:
- `criteria`: An object containing the criteria/criterion that can trigger this advancement. (See the **Criteria** section below)
- `requirements`: This can optionally be used to specify more advanced rules as to which criteria trigger the advancement (for example, this can be used to specfiy "Advancement is given if (Criteria A OR Criteria B) AND (Criteria C OR Criteria D) is true"). This should be a list of lists of `criteria` keys - the advancement is given when at least one criteria from each list has been achieved.
- `display`: If left out, this advancement is completely hidden from the player. Otherwise, this will control the style of the advancement, and where it is displayed to the player. It has the following keys:
    - `icon`: An object defining the item used as the icon as the advancement. This has a `id` field (the item ID) and `components` (an object with the item components)
    - `title`: A text component representing the title or name of the advancement that is shown to the player
    - `description`: A text component representing the description of the advancement
    - `background`: (Root advancement only) The path to the background texture of the advancement tab
    - `frame`: Used to specify the frame (or type) of advancement. This should be either `"task"` (default), `"challenge"`, or `"goal"`.
    - `show_toast`: If true, a pop-up will be shown when a player completes the advancement. Defaults to true (if display exists).
    - `announce_to_chat`: If true, the advancement will be announced to chat when it is completed by a player. Defaults to true (if display exists)
    - `hidden`: If true, the advancement will not show up in the advancements menu until it has been achieved by the player. Defaults to false.
- `parent`: The ID of this advancement's parent advancement. This should be set if your advancement is not just for internal event purposes. If this is left blank, it is considered to be a root advancement.
- `rewards`: An object which stores data about what should happen to the player when the advancement has been achieved. This can contain the following fields:
    - `function`: The ID of the function to run as the player when they achieve the advancement.
    - `loot`: A list of loot table IDs to be given to the player when they achieve the advancement.
    - `recipes`: A list of the recipe IDs to be unlocked by the player when they achieve the advancement
    - `experience`: The XP points to give to the player when they achieve the advancement. This should be an integer
- `sends_telemetry_event`: (`minecraft` namespace only) Whether to send telemetry info about this advancement to Mojang. Defaults to `false`.

## `criteria`
The `criteria` object is an object containing the criteria needed to unlock this advancement. This object should contain other objects - the key of which can be anything, as it serves as the criteria ID. If the `requirements` field is not used, the advancement will be achieved when all of the criteria have been achieved.

Each criteria object contains a `trigger` and `conditions` fields. There are many different `trigger`s that can be used, the contents of `conditions` depends on which `trigger` is used. 

:::info
The `player` condition can exist with any advancement trigger (except `minecraft:impossible`). This condition can either be an object (an `entity_properties` predicate) or a list of other predicates (any predicate type) to further match the player.
:::

The rest of section lists the possible types of `trigger`s:

### `minecraft:allay_drop_item_on_block`
`allay_drop_item_on_block` will trigger when a player's allay drops an item on a block.

- `location`: a predicate used to check the position the item was dropped at.

### `minecraft:any_block_use`

### `minecraft:avoid_vibration`
`avoid_vibration` will trigger when a player avoids sending a vibration (because they are crouching). 

No other `conditions` can be used with this.

### `minecraft:bee_nest_destroyed`
`bee_nest_destroyed` will trigger when a player destoys a `bee_nest` or `beehive`.

- `block`: The ID of the destroyed block to match. This accepts any value, but will only work with bee nests or beehives. This should be a string
- `item`: The item used to destroy the block. This should be an item matcher (see [Item Matchers](/wiki/files/predicates#item-matcher))
- `num_bees_inside`: The number of bees that were inside the destroyed block. This should be an integer

### `minecraft:bred_animals`
`bred_animals` will trigger when a player breeds two animals (and spawns a baby animal).

- `parent`: An `entity_properties` predicate or list of other predicates (any type) to match the first parent of the baby.
- `partner`: An `entity_properties` predicate or list of other predicates (any type) to match the second parent of the baby.
- `child`: An `entity_properties` predicate or list of other predicates (any type) to match the baby.

### `minecraft:brewed_potion`
`brewed_potion` triggers when a player creates a potion (in a brewing table).

- `potion`: The ID of the brewed potion to match.

### `minecraft:changed_dimension`
`changed_dimension` will trigger when a player moves from one dimension to another (by any means).

- `from`: The ID of the dimension the player was in before they changed dimension.
- `to`: The ID of the dimension the player was in after they changed dimension.

### `minecraft:channeled_lightning`
`channeled_lightning` will trigger when a player uses the Channeling enchantment to spawn lightning on an entity or a lightning rod.

- `victims`: A list of `entity_properties` predicates or list of other predicates (any type) to match the targets of the lightning bolt. Each list item represents one entity. All entities in this list must be struck by the lightning bolt in order for the advancement to trigger.

### `minecraft:construct_beacon`
`construct_beacon` triggers when a player constructs or updates the base of (blocks below) a beacon.

- `level`: The level of the new beacon. This should either be an integer or an object containing a `max` and `min` value to match a range.

### `minecraft:consume_item`
`consume_item` triggers when a player consumes an item (with the `consumable` component)

- `item`: The item that was consumed. This should be an item matcher (see [Item Matchers](/wiki/files/predicates#item-matcher))

### `minecraft:crafter_recipe_crafted`
`crafter_recipe_crafted` triggers when a player uses a crafter to craft a recipe.

- `recipe`: The ID of the recipe that was crafted. This should be a string with a recipe ID.
- `ingredients`: A list of item matchers to match the items used in the crafting recipe.

### `minecraft:cured_zombie_villager`
`cured_zombie_villager` triggers when a player cures a zombie villager by turning it back into a villager.

- `villager`: A list of `entity_properties` predicates or list of other predicates (any type) to match the villager that the zombie villager was turned into
- `zombie`: A list of `entity_properties` predicates or list of other predicates (any type) to match the zombie villager.

### `minecraft:default_block_use`

### `minecraft:`

:::note
im only on letter d this is so boring but i wanted to push this anyway (do not keep in prod plz) plz someone else finish this i want to go outside and breath a fresh air plz plz
:::