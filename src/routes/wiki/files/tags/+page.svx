---
title: Tags
description:
  "Registry tags, not to be confused with [entity tags](/wiki/command/tag), are essentially lists of groups such as
  blocks, items, entity types, etc. They use JSON format and are located in the `data/<namespace>/tags/<category>`
  folder."
---

<script lang="ts">
import {Version} from '$lib/reusables';
</script>

<Version>This page is validated and up to date with Minecraft Java: 1.21.3</Version>

# Tags

Registry tags, not to be confused with [entity tags](/wiki/command/tag), are essentially lists of groups such as blocks,
items, entity types, etc. They use JSON format and are located in the `data/<namespace>/tags/<category>` folder.

## Special tags

Minecraft uses some tags internally for certain behaviours. These tags are located in the `minecraft` namespace. For
example:

- any functions in the `#minecraft:load` function tag will be automatically run when a datapack is loaded
- the `#minecraft:minable/pickaxe` block tag lists blocks which are mined faster using a pickaxe.

In many cases, modifying these special tags allows you to configure certain aspects of how Minecraft behaves.

## Registries
Tags group various types in a specific registry (category), such as items, blocks, functions, game events, chat types, etc.

This list shows some of the possible registry types, as well as the path their tags should be put in.

| Registry Types    | Path                                               | Example Value                 |
|-------------------|----------------------------------------------------|-------------------------------|
| Items             | `/tags/item`                                       | `"minecraft:apple"`           |
| Blocks            | `/tags/block`                                      | `"minecraft:grass_block"`     |
| Entity types      | `/tags/entity_type`                                | `"minecraft:pig"`             |
| Functions         | `/tags/function`                                   | `"namespace:some_function"`   |
| Fluids            | `/tags/fluid`                                      | `"minecraft:water"`           |
| Game Events       | `/tags/game_event`                                 | `"minecraft:container_open"`  |
| Chat Types        | `/tags/chat_type`                                  | `"minecraft:say_command"`     |
| Damage Types      | `/tags/damage_type`                                | `"minecraft:fly_into_wall"`   |
| Banner patterns   | `/tags/banner_pattern`                             | `"minecraft:square_top_right"`|
| Cat variants      | `/tags/cat_variant`                                | `"minecraft:jellie"`          |
| Enchantments      | `/tags/enchantment`                                | `"minecraft:sharpness"`       |
| Goat horns        | `/tags/instrument`                                 | `"minecraft:seek_goat_horn"`  |
| Paintings         | `/tags/painting_variant`                           | `"minecraft:skull_and_roses"` |
| Entity POI        | `/tags/point_of_interest_type`                     | `"minecraft:cleric"`          |
| Biome             | `/tags/worldgen/biome`                             | `"minecraft:plains"`          |
| Flat world preset | `/tags/worldgen/flat_level_generator_preset`       | `"minecraft:classic_flat"`    |
| Structures        | `/tags/worldgen/structure`                         | `"minecraft:village"`         |
| World preset      | `/tags/worldgen/world_preset`                      | `"minecraft:large_biomes"`    |

## JSON format

Tags have a very simple format, with two fields.

### `replace`

`replace` is a boolean field which decides whether the tag should replace other tags with the same path, or merge with
them. For example, if `"replace": true` is added to the `tick.json` function tag, only the tick functions in that
datapack would load, as it would replace all other defined tick tags. If `replace` is false, it will merge with any
values in `tick.json` within other packs. `replace` is an optional field, and if not specified will default to `false`.

### `values`

Values (`values`) is an array containing everything to group under this tag. Each element is either a string or an
object containing an `id` field and a `required` field (object example `{"required": false, "id":"minecraft:stick"}` ).
The plain string and the `id` field contain either the ID of the entry (such as `minecraft:diamond_block`), or the ID of
another tag, beginning with a `#` (such as `#minecraft:logs`). The `required` field in the object is a boolean (`true`
or `false`) which defines if this entry can be ignored if the id cannot be found.

### Example
Here is an example `item` tag file:

```json
{
  "replace": true,
  "values": [
    "#minecraft:logs", 
    "#minecraft:planks", 
    "minecraft:chest", 
    "minecraft:stick"
  ]
}
```
:::info
Tag files can also reference other tags. In this case, `#minecraft:logs` and `#minecraft:planks` are two vanilla item tags. This item tag will contain whatever is defined in those two item tags as well.
:::