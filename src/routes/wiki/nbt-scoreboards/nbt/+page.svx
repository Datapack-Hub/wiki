---
title: NBT
description: TODO
---

<script lang="ts">
  import SNBTValidator from "./SNBTValidator.svelte";
</script>

# NBT
NBT (Named Binary Tags) is a structured (key/value) data format used by Minecraft to store data about entities, items, blocks, structures, player data, worldgen, and more. You can use it to store custom data in items and NBT storages.

## SNBT Format
SNBT (Stringified Named Binary Tags) format is a JSON-like tree structure used in datapack development to manipulate the
NBT data of an entity. SNBT is a human-readable version of NBT (Named Binary Tags), which is a format used by Minecraft
to store data. NBT is used to store data about entities, items, blocks, structures, game saves, and more.

SNBT consists of **key/value pairs**, which are represented as `key:value`. These are contained with **compounds**,
marked with curly brackets (`{}`). Compounds can contain multiple key/value pairs, which are separated with commas, like
so: `key:value,key:value,key:value`

An example SNBT structure looks like:
`{name:"Silabear",age:102,friends:["Flynecraft","Aandeel","Cobblestone"],socials:{discord:"silabear"}}`

## NBT storages
Storages allow you to store NBT data in a world without binding it to a physical object (item, entity, block), but rather storing it under a namespaced ID (e.g `example:main`). Storages are stored globally per world, and can only be accessed with `/data`. Storages don't need to be initialized beforehand, unlike scoreboards.

Unlike entity and block NBT, storages have no fixed structure, and can contain whichever arbitrary keys are added to it.

### Storage example
Storages are defined when a `/data` command modifies them. Unlike scoreboards, storages do not need to be "created" -
the only code needed to initialize a storage is a `/data modify` or `/data merge` command to that storage, for example:

```mcfunction
data merge storage example:main {number: 1, message: "Hello!"}
data modify storage example:main other_number set from storage example:main number
data modify storage compound.array append value 42
```

The `example:main` storage would now contain the following data:

<!-- Javascript is used here because it's almost identical syntax to SNBT -->

```javascript
{
  number: 1,
  message: "Hello!",
  other_number: 1,
  compound: {
    array: [42]
  }
}
```


## Data Types
There are a few data types you can use to represent different types of data, including whole numbers, decimal numbers,
string, text, booleans, and more.

### Strings

Strings can store any text value, or more technically, any sequence of unicode characters.

**Format**: Strings are stored within either double or single quotes. For strings containing standard characters
(`A-Z, a-z, 0-9, -,_,+,.`), the quotes are optional, but recommended. `"<text>"` or `'<text>'` or `<text>`

**Example**: `name:"Silabear"`, `name:'Cobblestone'`, `name:Aandeel`

### Whole Numbers

**Short**, **Int**, and **Long** data types all represent integers (whole numbers).

- **Byte** is an unsigned 8 bit integers, it can be any value from `0` to `255`
- **Short** is a signed 16 bit integer, it can be any value from `-32,768` to `32,767`
- **Int** is a signed 32 bit integer, it can be any value from `-2,147,483,648` to `2,147,483,647`
- **Long** is a signed 64 bit integer, it can be any value from `-9,223,372,036,854,775,808` to
  `9,223,372,036,854,775,807`

**Format**: By default, numbers are stored as integers. To store a number in the other formats, you need to use the appropriate suffix.
For shorts, ints, and longs, the prefix is `s`, `i`, and `l` respectively.

**Example**: `count:1234s`, `bigNumber:1200000`, `reallyBigNumber:12123023687234L`, `byte:112b`

### Decimal Numbers

**Float** and **Double** data types both represent decimal numbers.

- **Float** is a signed 32 bit floating point number, it can be any value from `-3.4028235E38` to `3.4028235E38`. It is precise to 7 decimal places.
- **Double** is a signed 64 bit floating point number, it can be any value from `-1.7976931348623157E308` to
  `1.7976931348623157E308`. It is precise to 15 decimal places.

**Format**: By default, decimal numbers are stored as doubles. To store a number in the other formats, you need to use the
appropriate suffix. For floats, the suffix is `f`. For doubles, the suffix is `d`.

**Example**: `pi:3.1415926535d`, `e:2.718281828459045d`, `phi:1.6180f`

### Bytes or Booleans

In older versions of Minecraft, booleans were stored as bytes with `0b` representing 
`false` and `1b` representing `true`. In newer versions, booleans were introduced.
Essentially, booleans represent the old `0b` and `1b` with a more descriptive name.
It's recommended to use booleans instead of bytes whenever possible, as they are more readable.

### Arrays

Arrays are used to store multiple values of the same type. There are currently 3 types of arrays:

- **Byte Array**: Used to store multiple bytes
- **Int Array**: Used to store multiple integers
- **Long Array**: Used to store multiple longs

**Format**: Arrays are defined using square brackets (`[]`), followed by the type of the array, a semicolon, and then your data. 
The data still has to have prefixes if it needs it.

**Example**: `[B;1b,2B,true,false]`, `[I;1,2,3,4,5]`, `[L;1l,2l,3l,4l,5l]`

## Validator

Below is a validator for SNBT. It will validate the input and show you if it is valid or not.

<SNBTValidator />
